
3wheelomni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec0  08004ec0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec8  08004ec8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000007c  08004f4c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004f4c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5da  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea5  00000000  00000000  0002d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0002f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a59  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fac  00000000  00000000  00030d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010158  00000000  00000000  00053cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39c2  00000000  00000000  00063e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f44  00000000  00000000  001377d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013b714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004d88 	.word	0x08004d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08004d88 	.word	0x08004d88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	603b      	str	r3, [r7, #0]
return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	69b9      	ldr	r1, [r7, #24]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	1a8a      	subs	r2, r1, r2
 80005c6:	fb03 f202 	mul.w	r2, r3, r2
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1acb      	subs	r3, r1, r3
 80005d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	4413      	add	r3, r2
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 f8d9 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 fc07 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fe19 	bl	8001228 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005f6:	f000 fc75 	bl	8000ee4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005fa:	f000 fd75 	bl	80010e8 <MX_TIM5_Init>
  MX_UART4_Init();
 80005fe:	f000 fde9 	bl	80011d4 <MX_UART4_Init>
  MX_TIM3_Init();
 8000602:	f000 fcef 	bl	8000fe4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive(&huart4, rxbuff, 64,1000);
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	2240      	movs	r2, #64	; 0x40
 800060c:	4976      	ldr	r1, [pc, #472]	; (80007e8 <main+0x204>)
 800060e:	4877      	ldr	r0, [pc, #476]	; (80007ec <main+0x208>)
 8000610:	f003 f860 	bl	80036d4 <HAL_UART_Receive>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_StatusTypeDef status;

	 	 	   status=HAL_UART_Receive(&huart4, rxbuff,64,1000);
 8000614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000618:	2240      	movs	r2, #64	; 0x40
 800061a:	4973      	ldr	r1, [pc, #460]	; (80007e8 <main+0x204>)
 800061c:	4873      	ldr	r0, [pc, #460]	; (80007ec <main+0x208>)
 800061e:	f003 f859 	bl	80036d4 <HAL_UART_Receive>
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]



	 	 	   if (status == HAL_OK)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f040 8167 	bne.w	80008fc <main+0x318>

	 	 	   // Convert the received bytes to signed integers



	 	 	   lx = (rxbuff[1] & 0x80) ? (int32_t)rxbuff[1] - 256 : (int32_t)rxbuff[1];
 800062e:	4b6e      	ldr	r3, [pc, #440]	; (80007e8 <main+0x204>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	da04      	bge.n	8000642 <main+0x5e>
 8000638:	4b6b      	ldr	r3, [pc, #428]	; (80007e8 <main+0x204>)
 800063a:	785b      	ldrb	r3, [r3, #1]
 800063c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000640:	e001      	b.n	8000646 <main+0x62>
 8000642:	4b69      	ldr	r3, [pc, #420]	; (80007e8 <main+0x204>)
 8000644:	785b      	ldrb	r3, [r3, #1]
 8000646:	4a6a      	ldr	r2, [pc, #424]	; (80007f0 <main+0x20c>)
 8000648:	6013      	str	r3, [r2, #0]

	 	 	   ly = (rxbuff[2] & 0x80) ? (int32_t)rxbuff[2] - 256 : (int32_t)rxbuff[2];
 800064a:	4b67      	ldr	r3, [pc, #412]	; (80007e8 <main+0x204>)
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	b25b      	sxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	da04      	bge.n	800065e <main+0x7a>
 8000654:	4b64      	ldr	r3, [pc, #400]	; (80007e8 <main+0x204>)
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800065c:	e001      	b.n	8000662 <main+0x7e>
 800065e:	4b62      	ldr	r3, [pc, #392]	; (80007e8 <main+0x204>)
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	4a64      	ldr	r2, [pc, #400]	; (80007f4 <main+0x210>)
 8000664:	6013      	str	r3, [r2, #0]

	 	 	   rx = (rxbuff[3] & 0x80) ? (int32_t)rxbuff[3] - 256 : (int32_t)rxbuff[3];
 8000666:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <main+0x204>)
 8000668:	78db      	ldrb	r3, [r3, #3]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	da04      	bge.n	800067a <main+0x96>
 8000670:	4b5d      	ldr	r3, [pc, #372]	; (80007e8 <main+0x204>)
 8000672:	78db      	ldrb	r3, [r3, #3]
 8000674:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000678:	e001      	b.n	800067e <main+0x9a>
 800067a:	4b5b      	ldr	r3, [pc, #364]	; (80007e8 <main+0x204>)
 800067c:	78db      	ldrb	r3, [r3, #3]
 800067e:	4a5e      	ldr	r2, [pc, #376]	; (80007f8 <main+0x214>)
 8000680:	6013      	str	r3, [r2, #0]

	 	 	   ry = (rxbuff[4] & 0x80) ? (int32_t)rxbuff[4] - 256 : (int32_t)rxbuff[4];
 8000682:	4b59      	ldr	r3, [pc, #356]	; (80007e8 <main+0x204>)
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	b25b      	sxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	da04      	bge.n	8000696 <main+0xb2>
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <main+0x204>)
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000694:	e001      	b.n	800069a <main+0xb6>
 8000696:	4b54      	ldr	r3, [pc, #336]	; (80007e8 <main+0x204>)
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	4a58      	ldr	r2, [pc, #352]	; (80007fc <main+0x218>)
 800069c:	6013      	str	r3, [r2, #0]



	 	 	   cro= (rxbuff[5] & 0x80) ? (int32_t)rxbuff[5] - 256 : (int32_t)rxbuff[5];
 800069e:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <main+0x204>)
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da04      	bge.n	80006b2 <main+0xce>
 80006a8:	4b4f      	ldr	r3, [pc, #316]	; (80007e8 <main+0x204>)
 80006aa:	795b      	ldrb	r3, [r3, #5]
 80006ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006b0:	e001      	b.n	80006b6 <main+0xd2>
 80006b2:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <main+0x204>)
 80006b4:	795b      	ldrb	r3, [r3, #5]
 80006b6:	4a52      	ldr	r2, [pc, #328]	; (8000800 <main+0x21c>)
 80006b8:	6013      	str	r3, [r2, #0]

	 	 	   squ= (rxbuff[6] & 0x80) ? (int32_t)rxbuff[6] - 256 : (int32_t)rxbuff[6];
 80006ba:	4b4b      	ldr	r3, [pc, #300]	; (80007e8 <main+0x204>)
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da04      	bge.n	80006ce <main+0xea>
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <main+0x204>)
 80006c6:	799b      	ldrb	r3, [r3, #6]
 80006c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006cc:	e001      	b.n	80006d2 <main+0xee>
 80006ce:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <main+0x204>)
 80006d0:	799b      	ldrb	r3, [r3, #6]
 80006d2:	4a4c      	ldr	r2, [pc, #304]	; (8000804 <main+0x220>)
 80006d4:	6013      	str	r3, [r2, #0]

	 	 	   tri= (rxbuff[7] & 0x80) ? (int32_t)rxbuff[7] - 256 : (int32_t)rxbuff[7];
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <main+0x204>)
 80006d8:	79db      	ldrb	r3, [r3, #7]
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	da04      	bge.n	80006ea <main+0x106>
 80006e0:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <main+0x204>)
 80006e2:	79db      	ldrb	r3, [r3, #7]
 80006e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006e8:	e001      	b.n	80006ee <main+0x10a>
 80006ea:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <main+0x204>)
 80006ec:	79db      	ldrb	r3, [r3, #7]
 80006ee:	4a46      	ldr	r2, [pc, #280]	; (8000808 <main+0x224>)
 80006f0:	6013      	str	r3, [r2, #0]

	 	 	   cir= (rxbuff[8] & 0x80) ? (int32_t)rxbuff[8] - 256 : (int32_t)rxbuff[8];
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <main+0x204>)
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	da04      	bge.n	8000706 <main+0x122>
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <main+0x204>)
 80006fe:	7a1b      	ldrb	r3, [r3, #8]
 8000700:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000704:	e001      	b.n	800070a <main+0x126>
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <main+0x204>)
 8000708:	7a1b      	ldrb	r3, [r3, #8]
 800070a:	4a40      	ldr	r2, [pc, #256]	; (800080c <main+0x228>)
 800070c:	6013      	str	r3, [r2, #0]

	 	 	   up= (rxbuff[9] & 0x80) ? (int32_t)rxbuff[9] - 256 : (int32_t)rxbuff[9];
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <main+0x204>)
 8000710:	7a5b      	ldrb	r3, [r3, #9]
 8000712:	b25b      	sxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	da04      	bge.n	8000722 <main+0x13e>
 8000718:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <main+0x204>)
 800071a:	7a5b      	ldrb	r3, [r3, #9]
 800071c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000720:	e001      	b.n	8000726 <main+0x142>
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <main+0x204>)
 8000724:	7a5b      	ldrb	r3, [r3, #9]
 8000726:	4a3a      	ldr	r2, [pc, #232]	; (8000810 <main+0x22c>)
 8000728:	6013      	str	r3, [r2, #0]

	 	 	   down= (rxbuff[10] & 0x80) ? (int32_t)rxbuff[10] - 256 : (int32_t)rxbuff[10];
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <main+0x204>)
 800072c:	7a9b      	ldrb	r3, [r3, #10]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	da04      	bge.n	800073e <main+0x15a>
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <main+0x204>)
 8000736:	7a9b      	ldrb	r3, [r3, #10]
 8000738:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800073c:	e001      	b.n	8000742 <main+0x15e>
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <main+0x204>)
 8000740:	7a9b      	ldrb	r3, [r3, #10]
 8000742:	4a34      	ldr	r2, [pc, #208]	; (8000814 <main+0x230>)
 8000744:	6013      	str	r3, [r2, #0]

	 	 	   left= (rxbuff[11] & 0x80) ? (int32_t)rxbuff[11] - 256 : (int32_t)rxbuff[11];
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <main+0x204>)
 8000748:	7adb      	ldrb	r3, [r3, #11]
 800074a:	b25b      	sxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	da04      	bge.n	800075a <main+0x176>
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <main+0x204>)
 8000752:	7adb      	ldrb	r3, [r3, #11]
 8000754:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000758:	e001      	b.n	800075e <main+0x17a>
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <main+0x204>)
 800075c:	7adb      	ldrb	r3, [r3, #11]
 800075e:	4a2e      	ldr	r2, [pc, #184]	; (8000818 <main+0x234>)
 8000760:	6013      	str	r3, [r2, #0]

	 	 	   right=(rxbuff[12] & 0x80) ? (int32_t)rxbuff[12] - 256 : (int32_t)rxbuff[12];
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <main+0x204>)
 8000764:	7b1b      	ldrb	r3, [r3, #12]
 8000766:	b25b      	sxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	da04      	bge.n	8000776 <main+0x192>
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <main+0x204>)
 800076e:	7b1b      	ldrb	r3, [r3, #12]
 8000770:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000774:	e001      	b.n	800077a <main+0x196>
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <main+0x204>)
 8000778:	7b1b      	ldrb	r3, [r3, #12]
 800077a:	4a28      	ldr	r2, [pc, #160]	; (800081c <main+0x238>)
 800077c:	6013      	str	r3, [r2, #0]

	 	 	   ll1= (rxbuff[13] & 0x80) ? (int32_t)rxbuff[13] - 256 : (int32_t)rxbuff[13];
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <main+0x204>)
 8000780:	7b5b      	ldrb	r3, [r3, #13]
 8000782:	b25b      	sxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	da04      	bge.n	8000792 <main+0x1ae>
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <main+0x204>)
 800078a:	7b5b      	ldrb	r3, [r3, #13]
 800078c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000790:	e001      	b.n	8000796 <main+0x1b2>
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <main+0x204>)
 8000794:	7b5b      	ldrb	r3, [r3, #13]
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <main+0x23c>)
 8000798:	6013      	str	r3, [r2, #0]

	 	 	   ll2= (rxbuff[14] & 0x80) ? (int32_t)rxbuff[14] - 256 : (int32_t)rxbuff[14];
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <main+0x204>)
 800079c:	7b9b      	ldrb	r3, [r3, #14]
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	da04      	bge.n	80007ae <main+0x1ca>
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <main+0x204>)
 80007a6:	7b9b      	ldrb	r3, [r3, #14]
 80007a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80007ac:	e001      	b.n	80007b2 <main+0x1ce>
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <main+0x204>)
 80007b0:	7b9b      	ldrb	r3, [r3, #14]
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <main+0x240>)
 80007b4:	6013      	str	r3, [r2, #0]

	 	 	   rr1= (rxbuff[15] & 0x80) ? (int32_t)rxbuff[15] - 256 : (int32_t)rxbuff[15];
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <main+0x204>)
 80007b8:	7bdb      	ldrb	r3, [r3, #15]
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da04      	bge.n	80007ca <main+0x1e6>
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <main+0x204>)
 80007c2:	7bdb      	ldrb	r3, [r3, #15]
 80007c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80007c8:	e001      	b.n	80007ce <main+0x1ea>
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <main+0x204>)
 80007cc:	7bdb      	ldrb	r3, [r3, #15]
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <main+0x244>)
 80007d0:	6013      	str	r3, [r2, #0]

	 	 	   rr2= (rxbuff[16] & 0x80) ? (int32_t)rxbuff[16] - 256 : (int32_t)rxbuff[16];
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <main+0x204>)
 80007d4:	7c1b      	ldrb	r3, [r3, #16]
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	da27      	bge.n	800082c <main+0x248>
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <main+0x204>)
 80007de:	7c1b      	ldrb	r3, [r3, #16]
 80007e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80007e4:	e024      	b.n	8000830 <main+0x24c>
 80007e6:	bf00      	nop
 80007e8:	20000098 	.word	0x20000098
 80007ec:	200001c0 	.word	0x200001c0
 80007f0:	200000a8 	.word	0x200000a8
 80007f4:	200000ac 	.word	0x200000ac
 80007f8:	200000b0 	.word	0x200000b0
 80007fc:	200000b4 	.word	0x200000b4
 8000800:	200000b8 	.word	0x200000b8
 8000804:	200000bc 	.word	0x200000bc
 8000808:	200000c0 	.word	0x200000c0
 800080c:	200000c4 	.word	0x200000c4
 8000810:	200000c8 	.word	0x200000c8
 8000814:	200000cc 	.word	0x200000cc
 8000818:	200000d0 	.word	0x200000d0
 800081c:	200000d4 	.word	0x200000d4
 8000820:	200000d8 	.word	0x200000d8
 8000824:	200000e0 	.word	0x200000e0
 8000828:	200000dc 	.word	0x200000dc
 800082c:	4b8b      	ldr	r3, [pc, #556]	; (8000a5c <main+0x478>)
 800082e:	7c1b      	ldrb	r3, [r3, #16]
 8000830:	4a8b      	ldr	r2, [pc, #556]	; (8000a60 <main+0x47c>)
 8000832:	6013      	str	r3, [r2, #0]



	 	 	   // Print the received values

	 	 	   printf("Received Integers:\n");
 8000834:	488b      	ldr	r0, [pc, #556]	; (8000a64 <main+0x480>)
 8000836:	f003 fc3d 	bl	80040b4 <puts>

	 	 	   printf("lx: %ld\n", lx);
 800083a:	4b8b      	ldr	r3, [pc, #556]	; (8000a68 <main+0x484>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	488a      	ldr	r0, [pc, #552]	; (8000a6c <main+0x488>)
 8000842:	f003 fbd1 	bl	8003fe8 <iprintf>

	 	 	   printf("ly: %ld\n", ly);
 8000846:	4b8a      	ldr	r3, [pc, #552]	; (8000a70 <main+0x48c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	4889      	ldr	r0, [pc, #548]	; (8000a74 <main+0x490>)
 800084e:	f003 fbcb 	bl	8003fe8 <iprintf>

	 	 	   printf("rx: %ld\n", rx);
 8000852:	4b89      	ldr	r3, [pc, #548]	; (8000a78 <main+0x494>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4619      	mov	r1, r3
 8000858:	4888      	ldr	r0, [pc, #544]	; (8000a7c <main+0x498>)
 800085a:	f003 fbc5 	bl	8003fe8 <iprintf>

	 	 	   printf("ry: %ld\n", ry);
 800085e:	4b88      	ldr	r3, [pc, #544]	; (8000a80 <main+0x49c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	4887      	ldr	r0, [pc, #540]	; (8000a84 <main+0x4a0>)
 8000866:	f003 fbbf 	bl	8003fe8 <iprintf>



	 	 	   printf("cro: %ld\n", cro);
 800086a:	4b87      	ldr	r3, [pc, #540]	; (8000a88 <main+0x4a4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	4886      	ldr	r0, [pc, #536]	; (8000a8c <main+0x4a8>)
 8000872:	f003 fbb9 	bl	8003fe8 <iprintf>

	 	 	   printf("squ: %ld\n", squ);
 8000876:	4b86      	ldr	r3, [pc, #536]	; (8000a90 <main+0x4ac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	4885      	ldr	r0, [pc, #532]	; (8000a94 <main+0x4b0>)
 800087e:	f003 fbb3 	bl	8003fe8 <iprintf>

	 	 	   printf("tri: %ld\n", tri);
 8000882:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <main+0x4b4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	4884      	ldr	r0, [pc, #528]	; (8000a9c <main+0x4b8>)
 800088a:	f003 fbad 	bl	8003fe8 <iprintf>

	 	 	   printf("cir: %ld\n", cir);
 800088e:	4b84      	ldr	r3, [pc, #528]	; (8000aa0 <main+0x4bc>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4619      	mov	r1, r3
 8000894:	4883      	ldr	r0, [pc, #524]	; (8000aa4 <main+0x4c0>)
 8000896:	f003 fba7 	bl	8003fe8 <iprintf>



	 	 	   printf("up: %ld\n", up);
 800089a:	4b83      	ldr	r3, [pc, #524]	; (8000aa8 <main+0x4c4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	4882      	ldr	r0, [pc, #520]	; (8000aac <main+0x4c8>)
 80008a2:	f003 fba1 	bl	8003fe8 <iprintf>

	 	 	   printf("down: %ld\n", down);
 80008a6:	4b82      	ldr	r3, [pc, #520]	; (8000ab0 <main+0x4cc>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4881      	ldr	r0, [pc, #516]	; (8000ab4 <main+0x4d0>)
 80008ae:	f003 fb9b 	bl	8003fe8 <iprintf>

	 	 	   printf("left: %ld\n", left);
 80008b2:	4b81      	ldr	r3, [pc, #516]	; (8000ab8 <main+0x4d4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4619      	mov	r1, r3
 80008b8:	4880      	ldr	r0, [pc, #512]	; (8000abc <main+0x4d8>)
 80008ba:	f003 fb95 	bl	8003fe8 <iprintf>

	 	 	   printf("right: %ld\n", right);
 80008be:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <main+0x4dc>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	487f      	ldr	r0, [pc, #508]	; (8000ac4 <main+0x4e0>)
 80008c6:	f003 fb8f 	bl	8003fe8 <iprintf>



	 	 	   printf("ll1: %ld\n", ll1);
 80008ca:	4b7f      	ldr	r3, [pc, #508]	; (8000ac8 <main+0x4e4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4619      	mov	r1, r3
 80008d0:	487e      	ldr	r0, [pc, #504]	; (8000acc <main+0x4e8>)
 80008d2:	f003 fb89 	bl	8003fe8 <iprintf>

	 	 	   printf("ll2: %ld\n", ll2);
 80008d6:	4b7e      	ldr	r3, [pc, #504]	; (8000ad0 <main+0x4ec>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	487d      	ldr	r0, [pc, #500]	; (8000ad4 <main+0x4f0>)
 80008de:	f003 fb83 	bl	8003fe8 <iprintf>

	 	 	   printf("rr1: %ld\n", rr1);
 80008e2:	4b7d      	ldr	r3, [pc, #500]	; (8000ad8 <main+0x4f4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	487c      	ldr	r0, [pc, #496]	; (8000adc <main+0x4f8>)
 80008ea:	f003 fb7d 	bl	8003fe8 <iprintf>

	 	 	   printf("rr2: %ld\n", rr2);
 80008ee:	4b5c      	ldr	r3, [pc, #368]	; (8000a60 <main+0x47c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	487a      	ldr	r0, [pc, #488]	; (8000ae0 <main+0x4fc>)
 80008f6:	f003 fb77 	bl	8003fe8 <iprintf>
 80008fa:	e02f      	b.n	800095c <main+0x378>

	 	 	   }

	 	 	   else{

	 	 	   ry = 0;
 80008fc:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <main+0x49c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]

	 	 	   rx = 0;
 8000902:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <main+0x494>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]

	 	 	   lx = 0;
 8000908:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <main+0x484>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]

	 	 	   ly = 0;
 800090e:	4b58      	ldr	r3, [pc, #352]	; (8000a70 <main+0x48c>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]

	 	 	   cro = 0;
 8000914:	4b5c      	ldr	r3, [pc, #368]	; (8000a88 <main+0x4a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]

	 	 	   squ = 0;
 800091a:	4b5d      	ldr	r3, [pc, #372]	; (8000a90 <main+0x4ac>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]

	 	 	   tri = 0;
 8000920:	4b5d      	ldr	r3, [pc, #372]	; (8000a98 <main+0x4b4>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]

	 	 	   cir = 0;
 8000926:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <main+0x4bc>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]

	 	 	   up = 0;
 800092c:	4b5e      	ldr	r3, [pc, #376]	; (8000aa8 <main+0x4c4>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]

	 	 	   down = 0;
 8000932:	4b5f      	ldr	r3, [pc, #380]	; (8000ab0 <main+0x4cc>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]

	 	 	   left = 0;
 8000938:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <main+0x4d4>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]

	 	 	   right = 0;
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <main+0x4dc>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]

	 	 	   ll1=0;
 8000944:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <main+0x4e4>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]

	 	 	   ll2=0;
 800094a:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <main+0x4ec>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]

	 	 	   rr1=0;
 8000950:	4b61      	ldr	r3, [pc, #388]	; (8000ad8 <main+0x4f4>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]

	 	 	   rr2=0;
 8000956:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <main+0x47c>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]



	 	 	   uint16_t dutycycle;

	 	 	  	dutycycle=0;
 800095c:	2300      	movs	r3, #0
 800095e:	80bb      	strh	r3, [r7, #4]



	 	 	  	//motors stop

	 	 	  	if(ly>=Buff2 && ly<=Buff1 && lx>=Buff2 && lx<=Buff1 && rx>=Buff2 && rx<=Buff1){
 8000960:	4b43      	ldr	r3, [pc, #268]	; (8000a70 <main+0x48c>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b5f      	ldr	r3, [pc, #380]	; (8000ae4 <main+0x500>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	db35      	blt.n	80009d8 <main+0x3f4>
 800096c:	4b40      	ldr	r3, [pc, #256]	; (8000a70 <main+0x48c>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b5d      	ldr	r3, [pc, #372]	; (8000ae8 <main+0x504>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	dc2f      	bgt.n	80009d8 <main+0x3f4>
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <main+0x484>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <main+0x500>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	db29      	blt.n	80009d8 <main+0x3f4>
 8000984:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <main+0x484>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b57      	ldr	r3, [pc, #348]	; (8000ae8 <main+0x504>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	dc23      	bgt.n	80009d8 <main+0x3f4>
 8000990:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <main+0x494>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <main+0x500>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	db1d      	blt.n	80009d8 <main+0x3f4>
 800099c:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <main+0x494>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b51      	ldr	r3, [pc, #324]	; (8000ae8 <main+0x504>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dc17      	bgt.n	80009d8 <main+0x3f4>
	 	 //
	 	 	  	 TIM3->CCR1 = 0;
 80009a8:	4b50      	ldr	r3, [pc, #320]	; (8000aec <main+0x508>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
	 	 	  	 TIM3->CCR2 = 0;
 80009ae:	4b4f      	ldr	r3, [pc, #316]	; (8000aec <main+0x508>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	639a      	str	r2, [r3, #56]	; 0x38
	 	 	  	 TIM5->CCR1 = 0;
 80009b4:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <main+0x50c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
	 	 //
	 	 	  	dutycycle=0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	80bb      	strh	r3, [r7, #4]


	 	 //
	 	 	  	 HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80009be:	2100      	movs	r1, #0
 80009c0:	484c      	ldr	r0, [pc, #304]	; (8000af4 <main+0x510>)
 80009c2:	f002 f84d 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	 HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80009c6:	2104      	movs	r1, #4
 80009c8:	484a      	ldr	r0, [pc, #296]	; (8000af4 <main+0x510>)
 80009ca:	f002 f849 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	 HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 80009ce:	2100      	movs	r1, #0
 80009d0:	4849      	ldr	r0, [pc, #292]	; (8000af8 <main+0x514>)
 80009d2:	f002 f845 	bl	8002a60 <HAL_TIM_PWM_Start>
 80009d6:	e1fd      	b.n	8000dd4 <main+0x7f0>
	 	 //
	 	 //	  	// else{
	 	 //
	 	 //	  	//forward
	 	 //
	 	 	  	else if( ly>=Buff1 && (lx<=BuffP && lx>=BuffN) )
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <main+0x48c>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <main+0x504>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	f2c0 8093 	blt.w	8000b0c <main+0x528>
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <main+0x484>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <main+0x518>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	f300 808c 	bgt.w	8000b0c <main+0x528>
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <main+0x484>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b41      	ldr	r3, [pc, #260]	; (8000b00 <main+0x51c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	f2c0 8085 	blt.w	8000b0c <main+0x528>

	 	 	  	{

	 	 	  	dutycycle=map(ly,Buff1,127,0,fast);
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <main+0x48c>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <main+0x504>)
 8000a08:	6819      	ldr	r1, [r3, #0]
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <main+0x520>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	227f      	movs	r2, #127	; 0x7f
 8000a14:	f7ff fdca 	bl	80005ac <map>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	80bb      	strh	r3, [r7, #4]

	 	 	  	TIM3->CCR1 = dutycycle;
 8000a1c:	4a33      	ldr	r2, [pc, #204]	; (8000aec <main+0x508>)
 8000a1e:	88bb      	ldrh	r3, [r7, #4]
 8000a20:	6353      	str	r3, [r2, #52]	; 0x34
	 	 	  	TIM3->CCR2 = 0;
 8000a22:	4b32      	ldr	r3, [pc, #200]	; (8000aec <main+0x508>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	639a      	str	r2, [r3, #56]	; 0x38
	 	 	  	TIM5->CCR1 = dutycycle;
 8000a28:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <main+0x50c>)
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	6353      	str	r3, [r2, #52]	; 0x34
	 	 //
	 	 //	  //
	 	 //
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4830      	ldr	r0, [pc, #192]	; (8000af4 <main+0x510>)
 8000a32:	f002 f815 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000a36:	2104      	movs	r1, #4
 8000a38:	482e      	ldr	r0, [pc, #184]	; (8000af4 <main+0x510>)
 8000a3a:	f002 f811 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	482d      	ldr	r0, [pc, #180]	; (8000af8 <main+0x514>)
 8000a42:	f002 f80d 	bl	8002a60 <HAL_TIM_PWM_Start>





	 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2101      	movs	r1, #1
 8000a4a:	482f      	ldr	r0, [pc, #188]	; (8000b08 <main+0x524>)
 8000a4c:	f001 f994 	bl	8001d78 <HAL_GPIO_WritePin>

	 //	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);



	 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2108      	movs	r1, #8
 8000a54:	482c      	ldr	r0, [pc, #176]	; (8000b08 <main+0x524>)
 8000a56:	f001 f98f 	bl	8001d78 <HAL_GPIO_WritePin>
 8000a5a:	e1bb      	b.n	8000dd4 <main+0x7f0>
 8000a5c:	20000098 	.word	0x20000098
 8000a60:	200000e4 	.word	0x200000e4
 8000a64:	08004da0 	.word	0x08004da0
 8000a68:	200000a8 	.word	0x200000a8
 8000a6c:	08004db4 	.word	0x08004db4
 8000a70:	200000ac 	.word	0x200000ac
 8000a74:	08004dc0 	.word	0x08004dc0
 8000a78:	200000b0 	.word	0x200000b0
 8000a7c:	08004dcc 	.word	0x08004dcc
 8000a80:	200000b4 	.word	0x200000b4
 8000a84:	08004dd8 	.word	0x08004dd8
 8000a88:	200000b8 	.word	0x200000b8
 8000a8c:	08004de4 	.word	0x08004de4
 8000a90:	200000bc 	.word	0x200000bc
 8000a94:	08004df0 	.word	0x08004df0
 8000a98:	200000c0 	.word	0x200000c0
 8000a9c:	08004dfc 	.word	0x08004dfc
 8000aa0:	200000c4 	.word	0x200000c4
 8000aa4:	08004e08 	.word	0x08004e08
 8000aa8:	200000c8 	.word	0x200000c8
 8000aac:	08004e14 	.word	0x08004e14
 8000ab0:	200000cc 	.word	0x200000cc
 8000ab4:	08004e20 	.word	0x08004e20
 8000ab8:	200000d0 	.word	0x200000d0
 8000abc:	08004e2c 	.word	0x08004e2c
 8000ac0:	200000d4 	.word	0x200000d4
 8000ac4:	08004e38 	.word	0x08004e38
 8000ac8:	200000d8 	.word	0x200000d8
 8000acc:	08004e44 	.word	0x08004e44
 8000ad0:	200000e0 	.word	0x200000e0
 8000ad4:	08004e50 	.word	0x08004e50
 8000ad8:	200000dc 	.word	0x200000dc
 8000adc:	08004e5c 	.word	0x08004e5c
 8000ae0:	08004e68 	.word	0x08004e68
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	40000400 	.word	0x40000400
 8000af0:	40000c00 	.word	0x40000c00
 8000af4:	20000130 	.word	0x20000130
 8000af8:	20000178 	.word	0x20000178
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	20000010 	.word	0x20000010
 8000b04:	20000000 	.word	0x20000000
 8000b08:	40020800 	.word	0x40020800

	 	 	   }

	 	 	   // backward

	 	 	   else if(ly<=Buff2 && (lx<=BuffP && lx>=BuffN) )
 8000b0c:	4b80      	ldr	r3, [pc, #512]	; (8000d10 <main+0x72c>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <main+0x730>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dc39      	bgt.n	8000b8c <main+0x5a8>
 8000b18:	4b7f      	ldr	r3, [pc, #508]	; (8000d18 <main+0x734>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b7f      	ldr	r3, [pc, #508]	; (8000d1c <main+0x738>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dc33      	bgt.n	8000b8c <main+0x5a8>
 8000b24:	4b7c      	ldr	r3, [pc, #496]	; (8000d18 <main+0x734>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b7d      	ldr	r3, [pc, #500]	; (8000d20 <main+0x73c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	db2d      	blt.n	8000b8c <main+0x5a8>

	 	 	   {

	 	 		 dutycycle=map(ly,-128,Buff2,fast,0);
 8000b30:	4b77      	ldr	r3, [pc, #476]	; (8000d10 <main+0x72c>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	4b77      	ldr	r3, [pc, #476]	; (8000d14 <main+0x730>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b7a      	ldr	r3, [pc, #488]	; (8000d24 <main+0x740>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	9100      	str	r1, [sp, #0]
 8000b40:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000b44:	f7ff fd32 	bl	80005ac <map>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	80bb      	strh	r3, [r7, #4]





	 	 	  	TIM3->CCR1 = dutycycle;
 8000b4c:	4a76      	ldr	r2, [pc, #472]	; (8000d28 <main+0x744>)
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	6353      	str	r3, [r2, #52]	; 0x34
	 	 	  	TIM3->CCR2 = 0;
 8000b52:	4b75      	ldr	r3, [pc, #468]	; (8000d28 <main+0x744>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38
	 	 	  	TIM5->CCR1 = dutycycle;
 8000b58:	4a74      	ldr	r2, [pc, #464]	; (8000d2c <main+0x748>)
 8000b5a:	88bb      	ldrh	r3, [r7, #4]
 8000b5c:	6353      	str	r3, [r2, #52]	; 0x34
	 	 //
	 	 //	  //
	 	 //
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4873      	ldr	r0, [pc, #460]	; (8000d30 <main+0x74c>)
 8000b62:	f001 ff7d 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000b66:	2104      	movs	r1, #4
 8000b68:	4871      	ldr	r0, [pc, #452]	; (8000d30 <main+0x74c>)
 8000b6a:	f001 ff79 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4870      	ldr	r0, [pc, #448]	; (8000d34 <main+0x750>)
 8000b72:	f001 ff75 	bl	8002a60 <HAL_TIM_PWM_Start>


	 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2101      	movs	r1, #1
 8000b7a:	486f      	ldr	r0, [pc, #444]	; (8000d38 <main+0x754>)
 8000b7c:	f001 f8fc 	bl	8001d78 <HAL_GPIO_WritePin>

	 //	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);



	 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2108      	movs	r1, #8
 8000b84:	486c      	ldr	r0, [pc, #432]	; (8000d38 <main+0x754>)
 8000b86:	f001 f8f7 	bl	8001d78 <HAL_GPIO_WritePin>
 8000b8a:	e123      	b.n	8000dd4 <main+0x7f0>

	 	 	   }

	 	 	   //	right

	 	 	   else if(lx>=Buff1 && (ly<=BuffP && ly>=BuffN))
 8000b8c:	4b62      	ldr	r3, [pc, #392]	; (8000d18 <main+0x734>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <main+0x758>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	db38      	blt.n	8000c0a <main+0x626>
 8000b98:	4b5d      	ldr	r3, [pc, #372]	; (8000d10 <main+0x72c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b5f      	ldr	r3, [pc, #380]	; (8000d1c <main+0x738>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dc32      	bgt.n	8000c0a <main+0x626>
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <main+0x72c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	; (8000d20 <main+0x73c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	db2c      	blt.n	8000c0a <main+0x626>

	 	 	   {

	 	 	   dutycycle=map(lx,Buff1,127,0,fast);
 8000bb0:	4b59      	ldr	r3, [pc, #356]	; (8000d18 <main+0x734>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <main+0x758>)
 8000bb6:	6819      	ldr	r1, [r3, #0]
 8000bb8:	4b5a      	ldr	r3, [pc, #360]	; (8000d24 <main+0x740>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	227f      	movs	r2, #127	; 0x7f
 8000bc2:	f7ff fcf3 	bl	80005ac <map>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80bb      	strh	r3, [r7, #4]

	 	 	  	TIM3->CCR1 = dutycycle;
 8000bca:	4a57      	ldr	r2, [pc, #348]	; (8000d28 <main+0x744>)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	6353      	str	r3, [r2, #52]	; 0x34
	 	 	  	TIM3->CCR2 = dutycycle;
 8000bd0:	4a55      	ldr	r2, [pc, #340]	; (8000d28 <main+0x744>)
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	6393      	str	r3, [r2, #56]	; 0x38
	 	 	  	TIM5->CCR1 = 0;
 8000bd6:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <main+0x748>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34

	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4854      	ldr	r0, [pc, #336]	; (8000d30 <main+0x74c>)
 8000be0:	f001 ff3e 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000be4:	2104      	movs	r1, #4
 8000be6:	4852      	ldr	r0, [pc, #328]	; (8000d30 <main+0x74c>)
 8000be8:	f001 ff3a 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000bec:	2100      	movs	r1, #0
 8000bee:	4851      	ldr	r0, [pc, #324]	; (8000d34 <main+0x750>)
 8000bf0:	f001 ff36 	bl	8002a60 <HAL_TIM_PWM_Start>




	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	484f      	ldr	r0, [pc, #316]	; (8000d38 <main+0x754>)
 8000bfa:	f001 f8bd 	bl	8001d78 <HAL_GPIO_WritePin>

	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2102      	movs	r1, #2
 8000c02:	484d      	ldr	r0, [pc, #308]	; (8000d38 <main+0x754>)
 8000c04:	f001 f8b8 	bl	8001d78 <HAL_GPIO_WritePin>
 8000c08:	e0e4      	b.n	8000dd4 <main+0x7f0>

	 	 	   }

	 	 	   // left

	 	 	   else if(lx<=Buff2 && (ly<=BuffP && ly>=BuffN) )
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <main+0x734>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b41      	ldr	r3, [pc, #260]	; (8000d14 <main+0x730>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dc39      	bgt.n	8000c8a <main+0x6a6>
 8000c16:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <main+0x72c>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <main+0x738>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dc33      	bgt.n	8000c8a <main+0x6a6>
 8000c22:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <main+0x72c>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b3e      	ldr	r3, [pc, #248]	; (8000d20 <main+0x73c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	db2d      	blt.n	8000c8a <main+0x6a6>

	 	 	   {

	 	 	   dutycycle=map(lx,-128,Buff2,fast,0);
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <main+0x734>)
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <main+0x730>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <main+0x740>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	9100      	str	r1, [sp, #0]
 8000c3e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000c42:	f7ff fcb3 	bl	80005ac <map>
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]



	 	 	  	TIM3->CCR1 = 0;
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <main+0x744>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
	 	 	  	TIM3->CCR2 = dutycycle;
 8000c50:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <main+0x744>)
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	6393      	str	r3, [r2, #56]	; 0x38
	 	 	  	TIM5->CCR1 = dutycycle;
 8000c56:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <main+0x748>)
 8000c58:	88bb      	ldrh	r3, [r7, #4]
 8000c5a:	6353      	str	r3, [r2, #52]	; 0x34

	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4834      	ldr	r0, [pc, #208]	; (8000d30 <main+0x74c>)
 8000c60:	f001 fefe 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000c64:	2104      	movs	r1, #4
 8000c66:	4832      	ldr	r0, [pc, #200]	; (8000d30 <main+0x74c>)
 8000c68:	f001 fefa 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4831      	ldr	r0, [pc, #196]	; (8000d34 <main+0x750>)
 8000c70:	f001 fef6 	bl	8002a60 <HAL_TIM_PWM_Start>



	 //	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);

	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2102      	movs	r1, #2
 8000c78:	482f      	ldr	r0, [pc, #188]	; (8000d38 <main+0x754>)
 8000c7a:	f001 f87d 	bl	8001d78 <HAL_GPIO_WritePin>



	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2108      	movs	r1, #8
 8000c82:	482d      	ldr	r0, [pc, #180]	; (8000d38 <main+0x754>)
 8000c84:	f001 f878 	bl	8001d78 <HAL_GPIO_WritePin>
 8000c88:	e0a4      	b.n	8000dd4 <main+0x7f0>

	 	 	   }

	 	 	   //clockwise

	 	 	   else if(rx>=Buff1 && (ry<=BuffP && ry>=BuffN) ){
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <main+0x75c>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <main+0x758>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	db58      	blt.n	8000d48 <main+0x764>
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <main+0x760>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <main+0x738>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dc52      	bgt.n	8000d48 <main+0x764>
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <main+0x760>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <main+0x73c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	db4c      	blt.n	8000d48 <main+0x764>

	 	 	   dutycycle=map(rx,Buff1,127,0,100);
 8000cae:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <main+0x75c>)
 8000cb0:	6818      	ldr	r0, [r3, #0]
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <main+0x758>)
 8000cb4:	6819      	ldr	r1, [r3, #0]
 8000cb6:	2364      	movs	r3, #100	; 0x64
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	227f      	movs	r2, #127	; 0x7f
 8000cbe:	f7ff fc75 	bl	80005ac <map>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80bb      	strh	r3, [r7, #4]





	 	 	  	TIM3->CCR1 = dutycycle;
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <main+0x744>)
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	6353      	str	r3, [r2, #52]	; 0x34
	 	 	  	TIM3->CCR2 = dutycycle;
 8000ccc:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <main+0x744>)
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	6393      	str	r3, [r2, #56]	; 0x38
	 	 	  	TIM5->CCR1 = dutycycle;
 8000cd2:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <main+0x748>)
 8000cd4:	88bb      	ldrh	r3, [r7, #4]
 8000cd6:	6353      	str	r3, [r2, #52]	; 0x34

	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4815      	ldr	r0, [pc, #84]	; (8000d30 <main+0x74c>)
 8000cdc:	f001 fec0 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4813      	ldr	r0, [pc, #76]	; (8000d30 <main+0x74c>)
 8000ce4:	f001 febc 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <main+0x750>)
 8000cec:	f001 feb8 	bl	8002a60 <HAL_TIM_PWM_Start>




	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <main+0x754>)
 8000cf6:	f001 f83f 	bl	8001d78 <HAL_GPIO_WritePin>

	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <main+0x754>)
 8000d00:	f001 f83a 	bl	8001d78 <HAL_GPIO_WritePin>



	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2108      	movs	r1, #8
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <main+0x754>)
 8000d0a:	f001 f835 	bl	8001d78 <HAL_GPIO_WritePin>
 8000d0e:	e061      	b.n	8000dd4 <main+0x7f0>
 8000d10:	200000ac 	.word	0x200000ac
 8000d14:	20000008 	.word	0x20000008
 8000d18:	200000a8 	.word	0x200000a8
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000010 	.word	0x20000010
 8000d24:	20000000 	.word	0x20000000
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	40000c00 	.word	0x40000c00
 8000d30:	20000130 	.word	0x20000130
 8000d34:	20000178 	.word	0x20000178
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	20000004 	.word	0x20000004
 8000d40:	200000b0 	.word	0x200000b0
 8000d44:	200000b4 	.word	0x200000b4



	 	 	  // //anticlockwise

	 	 	   else if(rx<=Buff2 && (ry<=BuffP && ry>=BuffN) ){
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <main+0x7f4>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <main+0x7f8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f73f ac5f 	bgt.w	8000614 <main+0x30>
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <main+0x7fc>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <main+0x800>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f73f ac58 	bgt.w	8000614 <main+0x30>
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <main+0x7fc>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <main+0x804>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	f6ff ac51 	blt.w	8000614 <main+0x30>

	 	 	   dutycycle=map(rx,-128,Buff2,100,0);
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <main+0x7f4>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <main+0x7f8>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2364      	movs	r3, #100	; 0x64
 8000d80:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000d84:	f7ff fc12 	bl	80005ac <map>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	80bb      	strh	r3, [r7, #4]

	 	 	  	TIM3->CCR1 = dutycycle;
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <main+0x808>)
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	6353      	str	r3, [r2, #52]	; 0x34
	 	 	  	TIM3->CCR2 = dutycycle;
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <main+0x808>)
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	6393      	str	r3, [r2, #56]	; 0x38
	 	 	  	TIM5->CCR1 = dutycycle;
 8000d98:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <main+0x80c>)
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	6353      	str	r3, [r2, #52]	; 0x34

	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4814      	ldr	r0, [pc, #80]	; (8000df4 <main+0x810>)
 8000da2:	f001 fe5d 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000da6:	2104      	movs	r1, #4
 8000da8:	4812      	ldr	r0, [pc, #72]	; (8000df4 <main+0x810>)
 8000daa:	f001 fe59 	bl	8002a60 <HAL_TIM_PWM_Start>
	 	 	  	HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
 8000dae:	2100      	movs	r1, #0
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <main+0x814>)
 8000db2:	f001 fe55 	bl	8002a60 <HAL_TIM_PWM_Start>




	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2101      	movs	r1, #1
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <main+0x818>)
 8000dbc:	f000 ffdc 	bl	8001d78 <HAL_GPIO_WritePin>

	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <main+0x818>)
 8000dc6:	f000 ffd7 	bl	8001d78 <HAL_GPIO_WritePin>



	 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2108      	movs	r1, #8
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <main+0x818>)
 8000dd0:	f000 ffd2 	bl	8001d78 <HAL_GPIO_WritePin>
  {
 8000dd4:	e41e      	b.n	8000614 <main+0x30>
 8000dd6:	bf00      	nop
 8000dd8:	200000b0 	.word	0x200000b0
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200000b4 	.word	0x200000b4
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	20000010 	.word	0x20000010
 8000dec:	40000400 	.word	0x40000400
 8000df0:	40000c00 	.word	0x40000c00
 8000df4:	20000130 	.word	0x20000130
 8000df8:	20000178 	.word	0x20000178
 8000dfc:	40020800 	.word	0x40020800

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	2234      	movs	r2, #52	; 0x34
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fa30 	bl	8004274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <SystemClock_Config+0xdc>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <SystemClock_Config+0xdc>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <SystemClock_Config+0xdc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <SystemClock_Config+0xe0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <SystemClock_Config+0xe0>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <SystemClock_Config+0xe0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e74:	23b4      	movs	r3, #180	; 0xb4
 8000e76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 faa3 	bl	80023d4 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e94:	f000 fa0a 	bl	80012ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e98:	f000 ff88 	bl	8001dac <HAL_PWREx_EnableOverDrive>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ea2:	f000 fa03 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	2105      	movs	r1, #5
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 ffc1 	bl	8001e4c <HAL_RCC_ClockConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ed0:	f000 f9ec 	bl	80012ac <Error_Handler>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3750      	adds	r7, #80	; 0x50
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40007000 	.word	0x40007000

08000ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f1e:	22b3      	movs	r2, #179	; 0xb3
 8000f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f3c:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f3e:	f001 fce7 	bl	8002910 <HAL_TIM_Base_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f48:	f000 f9b0 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f5a:	f001 ff0b 	bl	8002d74 <HAL_TIM_ConfigClockSource>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f64:	f000 f9a2 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f6a:	f001 fd20 	bl	80029ae <HAL_TIM_PWM_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f74:	f000 f99a 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f80:	f107 0320 	add.w	r3, r7, #32
 8000f84:	4619      	mov	r1, r3
 8000f86:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000f88:	f002 fad8 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f92:	f000 f98b 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f96:	2360      	movs	r3, #96	; 0x60
 8000f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000fae:	f001 fe1f 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000fb8:	f000 f978 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000fc4:	f001 fe14 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000fce:	f000 f96d 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM2_Init+0xfc>)
 8000fd4:	f000 f9e4 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 8000fd8:	bf00      	nop
 8000fda:	3738      	adds	r7, #56	; 0x38
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000e8 	.word	0x200000e8

08000fe4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001016:	4a33      	ldr	r2, [pc, #204]	; (80010e4 <MX_TIM3_Init+0x100>)
 8001018:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <MX_TIM3_Init+0xfc>)
 800101c:	22b3      	movs	r2, #179	; 0xb3
 800101e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001028:	f240 32e7 	movw	r2, #999	; 0x3e7
 800102c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800103a:	4829      	ldr	r0, [pc, #164]	; (80010e0 <MX_TIM3_Init+0xfc>)
 800103c:	f001 fc68 	bl	8002910 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001046:	f000 f931 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001054:	4619      	mov	r1, r3
 8001056:	4822      	ldr	r0, [pc, #136]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001058:	f001 fe8c 	bl	8002d74 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001062:	f000 f923 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001066:	481e      	ldr	r0, [pc, #120]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001068:	f001 fca1 	bl	80029ae <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001072:	f000 f91b 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4619      	mov	r1, r3
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <MX_TIM3_Init+0xfc>)
 8001086:	f002 fa59 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001090:	f000 f90c 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_TIM3_Init+0xfc>)
 80010ac:	f001 fda0 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010b6:	f000 f8f9 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2204      	movs	r2, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <MX_TIM3_Init+0xfc>)
 80010c2:	f001 fd95 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010cc:	f000 f8ee 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <MX_TIM3_Init+0xfc>)
 80010d2:	f000 f965 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 80010d6:	bf00      	nop
 80010d8:	3738      	adds	r7, #56	; 0x38
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000130 	.word	0x20000130
 80010e4:	40000400 	.word	0x40000400

080010e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08e      	sub	sp, #56	; 0x38
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <MX_TIM5_Init+0xe4>)
 800111a:	4a2d      	ldr	r2, [pc, #180]	; (80011d0 <MX_TIM5_Init+0xe8>)
 800111c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 180-1;
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_TIM5_Init+0xe4>)
 8001120:	22b3      	movs	r2, #179	; 0xb3
 8001122:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_TIM5_Init+0xe4>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_TIM5_Init+0xe4>)
 800112c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001130:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_TIM5_Init+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_TIM5_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800113e:	4823      	ldr	r0, [pc, #140]	; (80011cc <MX_TIM5_Init+0xe4>)
 8001140:	f001 fbe6 	bl	8002910 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800114a:	f000 f8af 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001158:	4619      	mov	r1, r3
 800115a:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_TIM5_Init+0xe4>)
 800115c:	f001 fe0a 	bl	8002d74 <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001166:	f000 f8a1 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800116a:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM5_Init+0xe4>)
 800116c:	f001 fc1f 	bl	80029ae <HAL_TIM_PWM_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001176:	f000 f899 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4619      	mov	r1, r3
 8001188:	4810      	ldr	r0, [pc, #64]	; (80011cc <MX_TIM5_Init+0xe4>)
 800118a:	f002 f9d7 	bl	800353c <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001194:	f000 f88a 	bl	80012ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM5_Init+0xe4>)
 80011b0:	f001 fd1e 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80011ba:	f000 f877 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM5_Init+0xe4>)
 80011c0:	f000 f8ee 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000178 	.word	0x20000178
 80011d0:	40000c00 	.word	0x40000c00

080011d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_UART4_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_UART4_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_UART4_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_UART4_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_UART4_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_UART4_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_UART4_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_UART4_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_UART4_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_UART4_Init+0x4c>)
 800120c:	f002 fa12 	bl	8003634 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f849 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200001c0 	.word	0x200001c0
 8001224:	40004c00 	.word	0x40004c00

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_GPIO_Init+0x7c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <MX_GPIO_Init+0x7c>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_GPIO_Init+0x7c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_GPIO_Init+0x7c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <MX_GPIO_Init+0x7c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_GPIO_Init+0x7c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	210b      	movs	r1, #11
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MX_GPIO_Init+0x80>)
 800127c:	f000 fd7c 	bl	8001d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001280:	230b      	movs	r3, #11
 8001282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4619      	mov	r1, r3
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_GPIO_Init+0x80>)
 8001298:	f000 fbda 	bl	8001a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020800 	.word	0x40020800

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001318:	d10e      	bne.n	8001338 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001336:	e026      	b.n	8001386 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10e      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
}
 800135e:	e012      	b.n	8001386 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <HAL_TIM_Base_MspInit+0x94>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10d      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	bf00      	nop
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40000400 	.word	0x40000400
 800139c:	40000c00 	.word	0x40000c00

080013a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c0:	d11e      	bne.n	8001400 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a33      	ldr	r2, [pc, #204]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80013de:	2322      	movs	r3, #34	; 0x22
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ee:	2301      	movs	r3, #1
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <HAL_TIM_MspPostInit+0xfc>)
 80013fa:	f000 fb29 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80013fe:	e046      	b.n	800148e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <HAL_TIM_MspPostInit+0x100>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d11e      	bne.n	8001448 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a21      	ldr	r2, [pc, #132]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001426:	23c0      	movs	r3, #192	; 0xc0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001436:	2302      	movs	r3, #2
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4818      	ldr	r0, [pc, #96]	; (80014a4 <HAL_TIM_MspPostInit+0x104>)
 8001442:	f000 fb05 	bl	8001a50 <HAL_GPIO_Init>
}
 8001446:	e022      	b.n	800148e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a16      	ldr	r2, [pc, #88]	; (80014a8 <HAL_TIM_MspPostInit+0x108>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d11d      	bne.n	800148e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_TIM_MspPostInit+0xf8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800146e:	2301      	movs	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800147e:	2302      	movs	r3, #2
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <HAL_TIM_MspPostInit+0xfc>)
 800148a:	f000 fae1 	bl	8001a50 <HAL_GPIO_Init>
}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40000400 	.word	0x40000400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40000c00 	.word	0x40000c00

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_UART_MspInit+0x84>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12c      	bne.n	8001528 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_UART_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001506:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001518:	2308      	movs	r3, #8
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <HAL_UART_MspInit+0x8c>)
 8001524:	f000 fa94 	bl	8001a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40004c00 	.word	0x40004c00
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f95c 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <ITM_SendChar+0x48>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <ITM_SendChar+0x48>)
 80015a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <ITM_SendChar+0x4c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <ITM_SendChar+0x4c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80015b2:	bf00      	nop
 80015b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f8      	beq.n	80015b4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80015c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000edfc 	.word	0xe000edfc
 80015dc:	e0000e00 	.word	0xe0000e00

080015e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f2:	f3af 8000 	nop.w
 80015f6:	4601      	mov	r1, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_read+0x12>
  }

  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	e009      	b.n	8001640 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ffab 	bl	8001590 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf1      	blt.n	800162c <_write+0x12>
  }
  return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_close>:

int _close(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	605a      	str	r2, [r3, #4]
  return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f002 fe10 	bl	8004310 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20020000 	.word	0x20020000
 800171c:	00000400 	.word	0x00000400
 8001720:	20000208 	.word	0x20000208
 8001724:	20000360 	.word	0x20000360

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001784 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001750:	f7ff ffea 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800177a:	f002 fdcf 	bl	800431c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7fe ff31 	bl	80005e4 <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001790:	08004ed0 	.word	0x08004ed0
  ldr r2, =_sbss
 8001794:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001798:	2000035c 	.word	0x2000035c

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_Init+0x40>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_Init+0x40>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_Init+0x40>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 f90d 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	200f      	movs	r0, #15
 80017d0:	f000 f808 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fd70 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x54>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f917 	bl	8001a36 <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f000 f8ed 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x5c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000014 	.word	0x20000014
 800183c:	2000001c 	.word	0x2000001c
 8001840:	20000018 	.word	0x20000018

08001844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x20>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x24>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_IncTick+0x24>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000001c 	.word	0x2000001c
 8001868:	2000020c 	.word	0x2000020c

0800186c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetTick+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2000020c 	.word	0x2000020c

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff8e 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff47 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff5c 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff8e 	bl	800193c <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5d 	bl	80018e8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffb0 	bl	80019a4 <SysTick_Config>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e165      	b.n	8001d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8154 	bne.w	8001d32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80ae 	beq.w	8001d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <HAL_GPIO_Init+0x300>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a5c      	ldr	r2, [pc, #368]	; (8001d50 <HAL_GPIO_Init+0x300>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b5a      	ldr	r3, [pc, #360]	; (8001d50 <HAL_GPIO_Init+0x300>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4f      	ldr	r2, [pc, #316]	; (8001d58 <HAL_GPIO_Init+0x308>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d025      	beq.n	8001c6a <HAL_GPIO_Init+0x21a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4e      	ldr	r2, [pc, #312]	; (8001d5c <HAL_GPIO_Init+0x30c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01f      	beq.n	8001c66 <HAL_GPIO_Init+0x216>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4d      	ldr	r2, [pc, #308]	; (8001d60 <HAL_GPIO_Init+0x310>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x212>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4c      	ldr	r2, [pc, #304]	; (8001d64 <HAL_GPIO_Init+0x314>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <HAL_GPIO_Init+0x318>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x20a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_GPIO_Init+0x31c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x206>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_GPIO_Init+0x320>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x202>
 8001c4e:	2306      	movs	r3, #6
 8001c50:	e00c      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00a      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c56:	2305      	movs	r3, #5
 8001c58:	e008      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e004      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x21c>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4093      	lsls	r3, r2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c7c:	4935      	ldr	r1, [pc, #212]	; (8001d54 <HAL_GPIO_Init+0x304>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8a:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cae:	4a31      	ldr	r2, [pc, #196]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd8:	4a26      	ldr	r2, [pc, #152]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cde:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d02:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d2c:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <HAL_GPIO_Init+0x324>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	f67f ae96 	bls.w	8001a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_PWREx_EnableOverDrive+0x94>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd8:	f7ff fd48 	bl	800186c <HAL_GetTick>
 8001ddc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dde:	e009      	b.n	8001df4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001de0:	f7ff fd44 	bl	800186c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dee:	d901      	bls.n	8001df4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e01f      	b.n	8001e34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d1ee      	bne.n	8001de0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff fd30 	bl	800186c <HAL_GetTick>
 8001e0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e0e:	e009      	b.n	8001e24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e10:	f7ff fd2c 	bl	800186c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e1e:	d901      	bls.n	8001e24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e007      	b.n	8001e34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e30:	d1ee      	bne.n	8001e10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	420e0040 	.word	0x420e0040
 8001e44:	40007000 	.word	0x40007000
 8001e48:	420e0044 	.word	0x420e0044

08001e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0cc      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d90c      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d044      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d119      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e067      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b37      	ldr	r3, [pc, #220]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4934      	ldr	r1, [pc, #208]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff fc96 	bl	800186c <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7ff fc92 	bl	800186c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e04f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d20c      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f855 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	490a      	ldr	r1, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	5ccb      	ldrb	r3, [r1, r3]
 8001fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fbf6 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023c00 	.word	0x40023c00
 8002008:	40023800 	.word	0x40023800
 800200c:	08004e74 	.word	0x08004e74
 8002010:	20000014 	.word	0x20000014
 8002014:	20000018 	.word	0x20000018

08002018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_RCC_GetHCLKFreq+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000014 	.word	0x20000014

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002034:	f7ff fff0 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0a9b      	lsrs	r3, r3, #10
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	08004e84 	.word	0x08004e84

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800205c:	f7ff ffdc 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0b5b      	lsrs	r3, r3, #13
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4903      	ldr	r1, [pc, #12]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	08004e84 	.word	0x08004e84

08002080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002084:	b0a6      	sub	sp, #152	; 0x98
 8002086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a6:	4bc8      	ldr	r3, [pc, #800]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	f200 817e 	bhi.w	80023b0 <HAL_RCC_GetSysClockFreq+0x330>
 80020b4:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ba:	bf00      	nop
 80020bc:	080020f1 	.word	0x080020f1
 80020c0:	080023b1 	.word	0x080023b1
 80020c4:	080023b1 	.word	0x080023b1
 80020c8:	080023b1 	.word	0x080023b1
 80020cc:	080020f9 	.word	0x080020f9
 80020d0:	080023b1 	.word	0x080023b1
 80020d4:	080023b1 	.word	0x080023b1
 80020d8:	080023b1 	.word	0x080023b1
 80020dc:	08002101 	.word	0x08002101
 80020e0:	080023b1 	.word	0x080023b1
 80020e4:	080023b1 	.word	0x080023b1
 80020e8:	080023b1 	.word	0x080023b1
 80020ec:	0800226b 	.word	0x0800226b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4bb6      	ldr	r3, [pc, #728]	; (80023cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80020f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020f6:	e15f      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f8:	4bb5      	ldr	r3, [pc, #724]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020fe:	e15b      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002100:	4bb1      	ldr	r3, [pc, #708]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210c:	4bae      	ldr	r3, [pc, #696]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d031      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002118:	4bab      	ldr	r3, [pc, #684]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	2200      	movs	r2, #0
 8002120:	66bb      	str	r3, [r7, #104]	; 0x68
 8002122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212a:	663b      	str	r3, [r7, #96]	; 0x60
 800212c:	2300      	movs	r3, #0
 800212e:	667b      	str	r3, [r7, #100]	; 0x64
 8002130:	4ba7      	ldr	r3, [pc, #668]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002132:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002136:	462a      	mov	r2, r5
 8002138:	fb03 f202 	mul.w	r2, r3, r2
 800213c:	2300      	movs	r3, #0
 800213e:	4621      	mov	r1, r4
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	4aa2      	ldr	r2, [pc, #648]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002148:	4621      	mov	r1, r4
 800214a:	fba1 1202 	umull	r1, r2, r1, r2
 800214e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002150:	460a      	mov	r2, r1
 8002152:	67ba      	str	r2, [r7, #120]	; 0x78
 8002154:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002156:	4413      	add	r3, r2
 8002158:	67fb      	str	r3, [r7, #124]	; 0x7c
 800215a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800215e:	2200      	movs	r2, #0
 8002160:	65bb      	str	r3, [r7, #88]	; 0x58
 8002162:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002164:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002168:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800216c:	f7fe f8a0 	bl	80002b0 <__aeabi_uldivmod>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4613      	mov	r3, r2
 8002176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800217a:	e064      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217c:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	2200      	movs	r2, #0
 8002184:	653b      	str	r3, [r7, #80]	; 0x50
 8002186:	657a      	str	r2, [r7, #84]	; 0x54
 8002188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002190:	2300      	movs	r3, #0
 8002192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002194:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002198:	4622      	mov	r2, r4
 800219a:	462b      	mov	r3, r5
 800219c:	f04f 0000 	mov.w	r0, #0
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	0159      	lsls	r1, r3, #5
 80021a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021aa:	0150      	lsls	r0, r2, #5
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4621      	mov	r1, r4
 80021b2:	1a51      	subs	r1, r2, r1
 80021b4:	6139      	str	r1, [r7, #16]
 80021b6:	4629      	mov	r1, r5
 80021b8:	eb63 0301 	sbc.w	r3, r3, r1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021ca:	4659      	mov	r1, fp
 80021cc:	018b      	lsls	r3, r1, #6
 80021ce:	4651      	mov	r1, sl
 80021d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021d4:	4651      	mov	r1, sl
 80021d6:	018a      	lsls	r2, r1, #6
 80021d8:	4651      	mov	r1, sl
 80021da:	ebb2 0801 	subs.w	r8, r2, r1
 80021de:	4659      	mov	r1, fp
 80021e0:	eb63 0901 	sbc.w	r9, r3, r1
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021f8:	4690      	mov	r8, r2
 80021fa:	4699      	mov	r9, r3
 80021fc:	4623      	mov	r3, r4
 80021fe:	eb18 0303 	adds.w	r3, r8, r3
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	462b      	mov	r3, r5
 8002206:	eb49 0303 	adc.w	r3, r9, r3
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002218:	4629      	mov	r1, r5
 800221a:	028b      	lsls	r3, r1, #10
 800221c:	4621      	mov	r1, r4
 800221e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002222:	4621      	mov	r1, r4
 8002224:	028a      	lsls	r2, r1, #10
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800222e:	2200      	movs	r2, #0
 8002230:	643b      	str	r3, [r7, #64]	; 0x40
 8002232:	647a      	str	r2, [r7, #68]	; 0x44
 8002234:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002238:	f7fe f83a 	bl	80002b0 <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4613      	mov	r3, r2
 8002242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002246:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	0c1b      	lsrs	r3, r3, #16
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	3301      	adds	r3, #1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco / pllp;
 8002258:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800225c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002268:	e0a6      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d02a      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	2200      	movs	r2, #0
 800228a:	63bb      	str	r3, [r7, #56]	; 0x38
 800228c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002294:	2100      	movs	r1, #0
 8002296:	4b4e      	ldr	r3, [pc, #312]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002298:	fb03 f201 	mul.w	r2, r3, r1
 800229c:	2300      	movs	r3, #0
 800229e:	fb00 f303 	mul.w	r3, r0, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	4a4a      	ldr	r2, [pc, #296]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x350>)
 80022a6:	fba0 1202 	umull	r1, r2, r0, r2
 80022aa:	677a      	str	r2, [r7, #116]	; 0x74
 80022ac:	460a      	mov	r2, r1
 80022ae:	673a      	str	r2, [r7, #112]	; 0x70
 80022b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022b2:	4413      	add	r3, r2
 80022b4:	677b      	str	r3, [r7, #116]	; 0x74
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ba:	2200      	movs	r2, #0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
 80022be:	637a      	str	r2, [r7, #52]	; 0x34
 80022c0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80022c8:	f7fd fff2 	bl	80002b0 <__aeabi_uldivmod>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4613      	mov	r3, r2
 80022d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022d6:	e05b      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d8:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	2200      	movs	r2, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022f4:	4642      	mov	r2, r8
 80022f6:	464b      	mov	r3, r9
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0159      	lsls	r1, r3, #5
 8002302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002306:	0150      	lsls	r0, r2, #5
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4641      	mov	r1, r8
 800230e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002312:	4649      	mov	r1, r9
 8002314:	eb63 0b01 	sbc.w	fp, r3, r1
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800232c:	ebb2 040a 	subs.w	r4, r2, sl
 8002330:	eb63 050b 	sbc.w	r5, r3, fp
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	00eb      	lsls	r3, r5, #3
 800233e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	4643      	mov	r3, r8
 800234a:	18e3      	adds	r3, r4, r3
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	464b      	mov	r3, r9
 8002350:	eb45 0303 	adc.w	r3, r5, r3
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002362:	4629      	mov	r1, r5
 8002364:	028b      	lsls	r3, r1, #10
 8002366:	4621      	mov	r1, r4
 8002368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800236c:	4621      	mov	r1, r4
 800236e:	028a      	lsls	r2, r1, #10
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002378:	2200      	movs	r2, #0
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	61fa      	str	r2, [r7, #28]
 800237e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002382:	f7fd ff95 	bl	80002b0 <__aeabi_uldivmod>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4613      	mov	r3, r2
 800238c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0f1b      	lsrs	r3, r3, #28
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco / pllr;
 800239e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80023ae:	e003      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_RCC_GetSysClockFreq+0x34c>)
 80023b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80023b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3798      	adds	r7, #152	; 0x98
 80023c0:	46bd      	mov	sp, r7
 80023c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	017d7840 	.word	0x017d7840

080023d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e28d      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8083 	beq.w	80024fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f4:	4b94      	ldr	r3, [pc, #592]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d019      	beq.n	8002434 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002400:	4b91      	ldr	r3, [pc, #580]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
        || \
 8002408:	2b08      	cmp	r3, #8
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800240c:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002418:	d00c      	beq.n	8002434 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d112      	bne.n	800244c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002432:	d10b      	bne.n	800244c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d05b      	beq.n	80024f8 <HAL_RCC_OscConfig+0x124>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d157      	bne.n	80024f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e25a      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d106      	bne.n	8002464 <HAL_RCC_OscConfig+0x90>
 8002456:	4b7c      	ldr	r3, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7b      	ldr	r2, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xcc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0xb4>
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a75      	ldr	r2, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a72      	ldr	r2, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xcc>
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6b      	ldr	r2, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff f9e0 	bl	800186c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff f9dc 	bl	800186c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e21f      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xdc>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f9cc 	bl	800186c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff f9c8 	bl	800186c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e20b      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x104>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d06f      	beq.n	80025e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d017      	beq.n	8002542 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
        || \
 800251a:	2b08      	cmp	r3, #8
 800251c:	d105      	bne.n	800252a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b44      	ldr	r3, [pc, #272]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x186>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1d3      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4937      	ldr	r1, [pc, #220]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x278>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff f975 	bl	800186c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff f971 	bl	800186c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1b4      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4925      	ldr	r1, [pc, #148]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCC_OscConfig+0x278>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff f954 	bl	800186c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7ff f950 	bl	800186c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e193      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d036      	beq.n	8002660 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_RCC_OscConfig+0x27c>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff f934 	bl	800186c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff f930 	bl	800186c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e173      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x234>
 8002626:	e01b      	b.n	8002660 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_OscConfig+0x27c>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff f91d 	bl	800186c <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e00e      	b.n	8002654 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7ff f919 	bl	800186c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d907      	bls.n	8002654 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e15c      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
 8002648:	40023800 	.word	0x40023800
 800264c:	42470000 	.word	0x42470000
 8002650:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	4b8a      	ldr	r3, [pc, #552]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ea      	bne.n	8002636 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8097 	beq.w	800279c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002672:	4b83      	ldr	r3, [pc, #524]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	4b7f      	ldr	r3, [pc, #508]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a7e      	ldr	r2, [pc, #504]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b7c      	ldr	r3, [pc, #496]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b79      	ldr	r3, [pc, #484]	; (8002884 <HAL_RCC_OscConfig+0x4b0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x4b0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a75      	ldr	r2, [pc, #468]	; (8002884 <HAL_RCC_OscConfig+0x4b0>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7ff f8d9 	bl	800186c <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7ff f8d5 	bl	800186c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e118      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <HAL_RCC_OscConfig+0x4b0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x31e>
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a65      	ldr	r2, [pc, #404]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	e01c      	b.n	800272c <HAL_RCC_OscConfig+0x358>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x340>
 80026fa:	4b61      	ldr	r3, [pc, #388]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a60      	ldr	r2, [pc, #384]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
 8002706:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	4a5d      	ldr	r2, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6713      	str	r3, [r2, #112]	; 0x70
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0x358>
 8002714:	4b5a      	ldr	r3, [pc, #360]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a59      	ldr	r2, [pc, #356]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	4b57      	ldr	r3, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d015      	beq.n	8002760 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f89a 	bl	800186c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	e00a      	b.n	8002752 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273c:	f7ff f896 	bl	800186c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0d7      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0ee      	beq.n	800273c <HAL_RCC_OscConfig+0x368>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7ff f884 	bl	800186c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7ff f880 	bl	800186c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0c1      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	4b40      	ldr	r3, [pc, #256]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ee      	bne.n	8002768 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	4a3a      	ldr	r2, [pc, #232]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80ad 	beq.w	8002900 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d060      	beq.n	8002874 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d145      	bne.n	8002846 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b33      	ldr	r3, [pc, #204]	; (8002888 <HAL_RCC_OscConfig+0x4b4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff f854 	bl	800186c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff f850 	bl	800186c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e093      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	3b01      	subs	r3, #1
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	071b      	lsls	r3, r3, #28
 8002812:	491b      	ldr	r1, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x4b4>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7ff f825 	bl	800186c <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7ff f821 	bl	800186c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e064      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x452>
 8002844:	e05c      	b.n	8002900 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_RCC_OscConfig+0x4b4>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff f80e 	bl	800186c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7ff f80a 	bl	800186c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e04d      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_OscConfig+0x4ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x480>
 8002872:	e045      	b.n	8002900 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e040      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000
 8002888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <HAL_RCC_OscConfig+0x538>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d030      	beq.n	80028fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d129      	bne.n	80028fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d122      	bne.n	80028fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d119      	bne.n	80028fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d10f      	bne.n	80028fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e041      	b.n	80029a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fce6 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f000 fad8 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e041      	b.n	8002a44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f839 	bl	8002a4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f000 fa89 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_TIM_PWM_Start+0x24>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e022      	b.n	8002aca <HAL_TIM_PWM_Start+0x6a>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d109      	bne.n	8002a9e <HAL_TIM_PWM_Start+0x3e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e015      	b.n	8002aca <HAL_TIM_PWM_Start+0x6a>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d109      	bne.n	8002ab8 <HAL_TIM_PWM_Start+0x58>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e008      	b.n	8002aca <HAL_TIM_PWM_Start+0x6a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07c      	b.n	8002bcc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0x82>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae0:	e013      	b.n	8002b0a <HAL_TIM_PWM_Start+0xaa>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x92>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af0:	e00b      	b.n	8002b0a <HAL_TIM_PWM_Start+0xaa>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_PWM_Start+0xa2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b00:	e003      	b.n	8002b0a <HAL_TIM_PWM_Start+0xaa>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fcec 	bl	80034f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <HAL_TIM_PWM_Start+0x174>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_TIM_PWM_Start+0xcc>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <HAL_TIM_PWM_Start+0x178>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIM_PWM_Start+0xd0>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_TIM_PWM_Start+0xd2>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_TIM_PWM_Start+0x174>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x136>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b58:	d01d      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x136>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_TIM_PWM_Start+0x17c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x136>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_TIM_PWM_Start+0x180>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x136>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_TIM_PWM_Start+0x184>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x136>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <HAL_TIM_PWM_Start+0x178>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x136>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_TIM_PWM_Start+0x188>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_TIM_PWM_Start+0x136>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_TIM_PWM_Start+0x18c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d111      	bne.n	8002bba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d010      	beq.n	8002bca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	e007      	b.n	8002bca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40010400 	.word	0x40010400
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40001800 	.word	0x40001800

08002bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0ae      	b.n	8002d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	f200 809f 	bhi.w	8002d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c59 	.word	0x08002c59
 8002c28:	08002d5d 	.word	0x08002d5d
 8002c2c:	08002d5d 	.word	0x08002d5d
 8002c30:	08002d5d 	.word	0x08002d5d
 8002c34:	08002c99 	.word	0x08002c99
 8002c38:	08002d5d 	.word	0x08002d5d
 8002c3c:	08002d5d 	.word	0x08002d5d
 8002c40:	08002d5d 	.word	0x08002d5d
 8002c44:	08002cdb 	.word	0x08002cdb
 8002c48:	08002d5d 	.word	0x08002d5d
 8002c4c:	08002d5d 	.word	0x08002d5d
 8002c50:	08002d5d 	.word	0x08002d5d
 8002c54:	08002d1b 	.word	0x08002d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f9fc 	bl	800305c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0208 	orr.w	r2, r2, #8
 8002c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0204 	bic.w	r2, r2, #4
 8002c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	619a      	str	r2, [r3, #24]
      break;
 8002c96:	e064      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fa4c 	bl	800313c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6999      	ldr	r1, [r3, #24]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	021a      	lsls	r2, r3, #8
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	619a      	str	r2, [r3, #24]
      break;
 8002cd8:	e043      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 faa1 	bl	8003228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0208 	orr.w	r2, r2, #8
 8002cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0204 	bic.w	r2, r2, #4
 8002d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69d9      	ldr	r1, [r3, #28]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	61da      	str	r2, [r3, #28]
      break;
 8002d18:	e023      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 faf5 	bl	8003310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69da      	ldr	r2, [r3, #28]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69d9      	ldr	r1, [r3, #28]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	61da      	str	r2, [r3, #28]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_ConfigClockSource+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0b4      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x186>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc8:	d03e      	beq.n	8002e48 <HAL_TIM_ConfigClockSource+0xd4>
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	f200 8087 	bhi.w	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	f000 8086 	beq.w	8002ee6 <HAL_TIM_ConfigClockSource+0x172>
 8002dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dde:	d87f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	d01a      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xa6>
 8002de4:	2b70      	cmp	r3, #112	; 0x70
 8002de6:	d87b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b60      	cmp	r3, #96	; 0x60
 8002dea:	d050      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x11a>
 8002dec:	2b60      	cmp	r3, #96	; 0x60
 8002dee:	d877      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b50      	cmp	r3, #80	; 0x50
 8002df2:	d03c      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xfa>
 8002df4:	2b50      	cmp	r3, #80	; 0x50
 8002df6:	d873      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d058      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x13a>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d86f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b30      	cmp	r3, #48	; 0x30
 8002e02:	d064      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e04:	2b30      	cmp	r3, #48	; 0x30
 8002e06:	d86b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d060      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d867      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05c      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d05a      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e18:	e062      	b.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e2a:	f000 fb41 	bl	80034b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	609a      	str	r2, [r3, #8]
      break;
 8002e46:	e04f      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e58:	f000 fb2a 	bl	80034b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e6a:	609a      	str	r2, [r3, #8]
      break;
 8002e6c:	e03c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f000 fa9e 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2150      	movs	r1, #80	; 0x50
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 faf7 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e02c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 fabd 	bl	800341a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2160      	movs	r1, #96	; 0x60
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fae7 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002eac:	e01c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 fa7e 	bl	80033bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fad7 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e00c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 face 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002ede:	e003      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee4:	e000      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a46      	ldr	r2, [pc, #280]	; (8003030 <TIM_Base_SetConfig+0x12c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a43      	ldr	r2, [pc, #268]	; (8003034 <TIM_Base_SetConfig+0x130>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a42      	ldr	r2, [pc, #264]	; (8003038 <TIM_Base_SetConfig+0x134>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a41      	ldr	r2, [pc, #260]	; (800303c <TIM_Base_SetConfig+0x138>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a40      	ldr	r2, [pc, #256]	; (8003040 <TIM_Base_SetConfig+0x13c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a35      	ldr	r2, [pc, #212]	; (8003030 <TIM_Base_SetConfig+0x12c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d027      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a32      	ldr	r2, [pc, #200]	; (8003034 <TIM_Base_SetConfig+0x130>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d023      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a31      	ldr	r2, [pc, #196]	; (8003038 <TIM_Base_SetConfig+0x134>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a30      	ldr	r2, [pc, #192]	; (800303c <TIM_Base_SetConfig+0x138>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2f      	ldr	r2, [pc, #188]	; (8003040 <TIM_Base_SetConfig+0x13c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d017      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <TIM_Base_SetConfig+0x140>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2d      	ldr	r2, [pc, #180]	; (8003048 <TIM_Base_SetConfig+0x144>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2c      	ldr	r2, [pc, #176]	; (800304c <TIM_Base_SetConfig+0x148>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <TIM_Base_SetConfig+0x14c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <TIM_Base_SetConfig+0x150>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a29      	ldr	r2, [pc, #164]	; (8003058 <TIM_Base_SetConfig+0x154>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d108      	bne.n	8002fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a10      	ldr	r2, [pc, #64]	; (8003030 <TIM_Base_SetConfig+0x12c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <TIM_Base_SetConfig+0x13c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]
  }
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40010000 	.word	0x40010000
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00
 8003040:	40010400 	.word	0x40010400
 8003044:	40014000 	.word	0x40014000
 8003048:	40014400 	.word	0x40014400
 800304c:	40014800 	.word	0x40014800
 8003050:	40001800 	.word	0x40001800
 8003054:	40001c00 	.word	0x40001c00
 8003058:	40002000 	.word	0x40002000

0800305c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 0201 	bic.w	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 0302 	bic.w	r3, r3, #2
 80030a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a20      	ldr	r2, [pc, #128]	; (8003134 <TIM_OC1_SetConfig+0xd8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_OC1_SetConfig+0x64>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <TIM_OC1_SetConfig+0xdc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10c      	bne.n	80030da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <TIM_OC1_SetConfig+0xd8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <TIM_OC1_SetConfig+0x8e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a14      	ldr	r2, [pc, #80]	; (8003138 <TIM_OC1_SetConfig+0xdc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d111      	bne.n	800310e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40010000 	.word	0x40010000
 8003138:	40010400 	.word	0x40010400

0800313c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 0210 	bic.w	r2, r3, #16
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0320 	bic.w	r3, r3, #32
 8003186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a22      	ldr	r2, [pc, #136]	; (8003220 <TIM_OC2_SetConfig+0xe4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_OC2_SetConfig+0x68>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a21      	ldr	r2, [pc, #132]	; (8003224 <TIM_OC2_SetConfig+0xe8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10d      	bne.n	80031c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a17      	ldr	r2, [pc, #92]	; (8003220 <TIM_OC2_SetConfig+0xe4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_OC2_SetConfig+0x94>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a16      	ldr	r2, [pc, #88]	; (8003224 <TIM_OC2_SetConfig+0xe8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d113      	bne.n	80031f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40010000 	.word	0x40010000
 8003224:	40010400 	.word	0x40010400

08003228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	021b      	lsls	r3, r3, #8
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a21      	ldr	r2, [pc, #132]	; (8003308 <TIM_OC3_SetConfig+0xe0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_OC3_SetConfig+0x66>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a20      	ldr	r2, [pc, #128]	; (800330c <TIM_OC3_SetConfig+0xe4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10d      	bne.n	80032aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <TIM_OC3_SetConfig+0xe0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d003      	beq.n	80032ba <TIM_OC3_SetConfig+0x92>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <TIM_OC3_SetConfig+0xe4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d113      	bne.n	80032e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
}
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40010000 	.word	0x40010000
 800330c:	40010400 	.word	0x40010400

08003310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800335a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	031b      	lsls	r3, r3, #12
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <TIM_OC4_SetConfig+0xa4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_OC4_SetConfig+0x68>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <TIM_OC4_SetConfig+0xa8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d109      	bne.n	800338c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40010400 	.word	0x40010400

080033bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0201 	bic.w	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 030a 	bic.w	r3, r3, #10
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341a:	b480      	push	{r7}
 800341c:	b087      	sub	sp, #28
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0210 	bic.w	r2, r3, #16
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003456:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	f043 0307 	orr.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	021a      	lsls	r2, r3, #8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2201      	movs	r2, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1a      	ldr	r2, [r3, #32]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
}
 800352e:	bf00      	nop
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e05a      	b.n	800360a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a0:	d01d      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a17      	ldr	r2, [pc, #92]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a15      	ldr	r2, [pc, #84]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40010000 	.word	0x40010000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40010400 	.word	0x40010400
 800362c:	40014000 	.word	0x40014000
 8003630:	40001800 	.word	0x40001800

08003634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e042      	b.n	80036cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd ff26 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f97f 	bl	800397c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800368c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	f040 8081 	bne.w	80037f8 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_UART_Receive+0x2e>
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e079      	b.n	80037fa <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2222      	movs	r2, #34	; 0x22
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fe f8a7 	bl	800186c <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Receive+0x74>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003750:	e047      	b.n	80037e2 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	2120      	movs	r1, #32
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f850 	bl	8003802 <UART_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e042      	b.n	80037fa <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10c      	bne.n	8003794 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003786:	b29a      	uxth	r2, r3
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	3302      	adds	r3, #2
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	e01f      	b.n	80037d4 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d007      	beq.n	80037ae <HAL_UART_Receive+0xda>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <HAL_UART_Receive+0xe8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e008      	b.n	80037ce <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1b2      	bne.n	8003752 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e000      	b.n	80037fa <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
  }
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003812:	e03b      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d037      	beq.n	800388c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381c:	f7fe f826 	bl	800186c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	6a3a      	ldr	r2, [r7, #32]
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <UART_WaitOnFlagUntilTimeout+0x30>
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e03a      	b.n	80038ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d023      	beq.n	800388c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b80      	cmp	r3, #128	; 0x80
 8003848:	d020      	beq.n	800388c <UART_WaitOnFlagUntilTimeout+0x8a>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d01d      	beq.n	800388c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b08      	cmp	r3, #8
 800385c:	d116      	bne.n	800388c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f81d 	bl	80038b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2208      	movs	r2, #8
 800387e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e00f      	b.n	80038ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4013      	ands	r3, r2
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d0b4      	beq.n	8003814 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b095      	sub	sp, #84	; 0x54
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038dc:	643a      	str	r2, [r7, #64]	; 0x40
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	64bb      	str	r3, [r7, #72]	; 0x48
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	2b01      	cmp	r3, #1
 800392a:	d119      	bne.n	8003960 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	60bb      	str	r3, [r7, #8]
   return(result);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	647b      	str	r3, [r7, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800394c:	61ba      	str	r2, [r7, #24]
 800394e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	613b      	str	r3, [r7, #16]
   return(result);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800396e:	bf00      	nop
 8003970:	3754      	adds	r7, #84	; 0x54
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b0c0      	sub	sp, #256	; 0x100
 8003982:	af00      	add	r7, sp, #0
 8003984:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	68d9      	ldr	r1, [r3, #12]
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	ea40 0301 	orr.w	r3, r0, r1
 80039a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039d4:	f021 010c 	bic.w	r1, r1, #12
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039e2:	430b      	orrs	r3, r1
 80039e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f6:	6999      	ldr	r1, [r3, #24]
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	ea40 0301 	orr.w	r3, r0, r1
 8003a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b8f      	ldr	r3, [pc, #572]	; (8003c48 <UART_SetConfig+0x2cc>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d005      	beq.n	8003a1c <UART_SetConfig+0xa0>
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b8d      	ldr	r3, [pc, #564]	; (8003c4c <UART_SetConfig+0x2d0>)
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d104      	bne.n	8003a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a1c:	f7fe fb1c 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8003a20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a24:	e003      	b.n	8003a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a26:	f7fe fb03 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8003a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a38:	f040 810c 	bne.w	8003c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a4e:	4622      	mov	r2, r4
 8003a50:	462b      	mov	r3, r5
 8003a52:	1891      	adds	r1, r2, r2
 8003a54:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a56:	415b      	adcs	r3, r3
 8003a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a5e:	4621      	mov	r1, r4
 8003a60:	eb12 0801 	adds.w	r8, r2, r1
 8003a64:	4629      	mov	r1, r5
 8003a66:	eb43 0901 	adc.w	r9, r3, r1
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7e:	4690      	mov	r8, r2
 8003a80:	4699      	mov	r9, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	eb18 0303 	adds.w	r3, r8, r3
 8003a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	eb49 0303 	adc.w	r3, r9, r3
 8003a92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003aaa:	460b      	mov	r3, r1
 8003aac:	18db      	adds	r3, r3, r3
 8003aae:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	eb42 0303 	adc.w	r3, r2, r3
 8003ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ac0:	f7fc fbf6 	bl	80002b0 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <UART_SetConfig+0x2d4>)
 8003aca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	011c      	lsls	r4, r3, #4
 8003ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aec:	415b      	adcs	r3, r3
 8003aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003af4:	4641      	mov	r1, r8
 8003af6:	eb12 0a01 	adds.w	sl, r2, r1
 8003afa:	4649      	mov	r1, r9
 8003afc:	eb43 0b01 	adc.w	fp, r3, r1
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b14:	4692      	mov	sl, r2
 8003b16:	469b      	mov	fp, r3
 8003b18:	4643      	mov	r3, r8
 8003b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b22:	464b      	mov	r3, r9
 8003b24:	eb4b 0303 	adc.w	r3, fp, r3
 8003b28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b40:	460b      	mov	r3, r1
 8003b42:	18db      	adds	r3, r3, r3
 8003b44:	643b      	str	r3, [r7, #64]	; 0x40
 8003b46:	4613      	mov	r3, r2
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b56:	f7fc fbab 	bl	80002b0 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <UART_SetConfig+0x2d4>)
 8003b62:	fba3 2301 	umull	r2, r3, r3, r1
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2264      	movs	r2, #100	; 0x64
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	1acb      	subs	r3, r1, r3
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b76:	4b36      	ldr	r3, [pc, #216]	; (8003c50 <UART_SetConfig+0x2d4>)
 8003b78:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b84:	441c      	add	r4, r3
 8003b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b98:	4642      	mov	r2, r8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	1891      	adds	r1, r2, r2
 8003b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ba0:	415b      	adcs	r3, r3
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ba8:	4641      	mov	r1, r8
 8003baa:	1851      	adds	r1, r2, r1
 8003bac:	6339      	str	r1, [r7, #48]	; 0x30
 8003bae:	4649      	mov	r1, r9
 8003bb0:	414b      	adcs	r3, r1
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	00cb      	lsls	r3, r1, #3
 8003bc4:	4651      	mov	r1, sl
 8003bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bca:	4651      	mov	r1, sl
 8003bcc:	00ca      	lsls	r2, r1, #3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bdc:	464b      	mov	r3, r9
 8003bde:	460a      	mov	r2, r1
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c12:	f7fc fb4d 	bl	80002b0 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <UART_SetConfig+0x2d4>)
 8003c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	2164      	movs	r1, #100	; 0x64
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	3332      	adds	r3, #50	; 0x32
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <UART_SetConfig+0x2d4>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	f003 0207 	and.w	r2, r3, #7
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4422      	add	r2, r4
 8003c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c44:	e106      	b.n	8003e54 <UART_SetConfig+0x4d8>
 8003c46:	bf00      	nop
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40011400 	.word	0x40011400
 8003c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c66:	4642      	mov	r2, r8
 8003c68:	464b      	mov	r3, r9
 8003c6a:	1891      	adds	r1, r2, r2
 8003c6c:	6239      	str	r1, [r7, #32]
 8003c6e:	415b      	adcs	r3, r3
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
 8003c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c76:	4641      	mov	r1, r8
 8003c78:	1854      	adds	r4, r2, r1
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	eb43 0501 	adc.w	r5, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	00eb      	lsls	r3, r5, #3
 8003c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8e:	00e2      	lsls	r2, r4, #3
 8003c90:	4614      	mov	r4, r2
 8003c92:	461d      	mov	r5, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	18e3      	adds	r3, r4, r3
 8003c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	eb45 0303 	adc.w	r3, r5, r3
 8003ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	008b      	lsls	r3, r1, #2
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ccc:	4621      	mov	r1, r4
 8003cce:	008a      	lsls	r2, r1, #2
 8003cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cd4:	f7fc faec 	bl	80002b0 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4b60      	ldr	r3, [pc, #384]	; (8003e60 <UART_SetConfig+0x4e4>)
 8003cde:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	011c      	lsls	r4, r3, #4
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	61b9      	str	r1, [r7, #24]
 8003d00:	415b      	adcs	r3, r3
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d08:	4641      	mov	r1, r8
 8003d0a:	1851      	adds	r1, r2, r1
 8003d0c:	6139      	str	r1, [r7, #16]
 8003d0e:	4649      	mov	r1, r9
 8003d10:	414b      	adcs	r3, r1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d20:	4659      	mov	r1, fp
 8003d22:	00cb      	lsls	r3, r1, #3
 8003d24:	4651      	mov	r1, sl
 8003d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	00ca      	lsls	r2, r1, #3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	4642      	mov	r2, r8
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d60:	4649      	mov	r1, r9
 8003d62:	008b      	lsls	r3, r1, #2
 8003d64:	4641      	mov	r1, r8
 8003d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	008a      	lsls	r2, r1, #2
 8003d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d72:	f7fc fa9d 	bl	80002b0 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <UART_SetConfig+0x4e4>)
 8003d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2264      	movs	r2, #100	; 0x64
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	1acb      	subs	r3, r1, r3
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	3332      	adds	r3, #50	; 0x32
 8003d90:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <UART_SetConfig+0x4e4>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9c:	441c      	add	r4, r3
 8003d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da2:	2200      	movs	r2, #0
 8003da4:	673b      	str	r3, [r7, #112]	; 0x70
 8003da6:	677a      	str	r2, [r7, #116]	; 0x74
 8003da8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	415b      	adcs	r3, r3
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	1851      	adds	r1, r2, r1
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	414b      	adcs	r3, r1
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	00cb      	lsls	r3, r1, #3
 8003dd8:	4651      	mov	r1, sl
 8003dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dde:	4651      	mov	r1, sl
 8003de0:	00ca      	lsls	r2, r1, #3
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	4642      	mov	r2, r8
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dee:	464b      	mov	r3, r9
 8003df0:	460a      	mov	r2, r1
 8003df2:	eb42 0303 	adc.w	r3, r2, r3
 8003df6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
 8003e02:	667a      	str	r2, [r7, #100]	; 0x64
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e10:	4649      	mov	r1, r9
 8003e12:	008b      	lsls	r3, r1, #2
 8003e14:	4641      	mov	r1, r8
 8003e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	008a      	lsls	r2, r1, #2
 8003e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e22:	f7fc fa45 	bl	80002b0 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <UART_SetConfig+0x4e4>)
 8003e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	2164      	movs	r1, #100	; 0x64
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	3332      	adds	r3, #50	; 0x32
 8003e3e:	4a08      	ldr	r2, [pc, #32]	; (8003e60 <UART_SetConfig+0x4e4>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4422      	add	r2, r4
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e60:	51eb851f 	.word	0x51eb851f

08003e64 <std>:
 8003e64:	2300      	movs	r3, #0
 8003e66:	b510      	push	{r4, lr}
 8003e68:	4604      	mov	r4, r0
 8003e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e72:	6083      	str	r3, [r0, #8]
 8003e74:	8181      	strh	r1, [r0, #12]
 8003e76:	6643      	str	r3, [r0, #100]	; 0x64
 8003e78:	81c2      	strh	r2, [r0, #14]
 8003e7a:	6183      	str	r3, [r0, #24]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	2208      	movs	r2, #8
 8003e80:	305c      	adds	r0, #92	; 0x5c
 8003e82:	f000 f9f7 	bl	8004274 <memset>
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <std+0x58>)
 8003e88:	6263      	str	r3, [r4, #36]	; 0x24
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <std+0x5c>)
 8003e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <std+0x60>)
 8003e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <std+0x64>)
 8003e94:	6323      	str	r3, [r4, #48]	; 0x30
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <std+0x68>)
 8003e98:	6224      	str	r4, [r4, #32]
 8003e9a:	429c      	cmp	r4, r3
 8003e9c:	d006      	beq.n	8003eac <std+0x48>
 8003e9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ea2:	4294      	cmp	r4, r2
 8003ea4:	d002      	beq.n	8003eac <std+0x48>
 8003ea6:	33d0      	adds	r3, #208	; 0xd0
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	d105      	bne.n	8003eb8 <std+0x54>
 8003eac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb4:	f000 ba56 	b.w	8004364 <__retarget_lock_init_recursive>
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	bf00      	nop
 8003ebc:	080040c5 	.word	0x080040c5
 8003ec0:	080040e7 	.word	0x080040e7
 8003ec4:	0800411f 	.word	0x0800411f
 8003ec8:	08004143 	.word	0x08004143
 8003ecc:	20000210 	.word	0x20000210

08003ed0 <stdio_exit_handler>:
 8003ed0:	4a02      	ldr	r2, [pc, #8]	; (8003edc <stdio_exit_handler+0xc>)
 8003ed2:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <stdio_exit_handler+0x10>)
 8003ed4:	4803      	ldr	r0, [pc, #12]	; (8003ee4 <stdio_exit_handler+0x14>)
 8003ed6:	f000 b869 	b.w	8003fac <_fwalk_sglue>
 8003eda:	bf00      	nop
 8003edc:	20000020 	.word	0x20000020
 8003ee0:	08004c11 	.word	0x08004c11
 8003ee4:	2000002c 	.word	0x2000002c

08003ee8 <cleanup_stdio>:
 8003ee8:	6841      	ldr	r1, [r0, #4]
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <cleanup_stdio+0x34>)
 8003eec:	4299      	cmp	r1, r3
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	d001      	beq.n	8003ef8 <cleanup_stdio+0x10>
 8003ef4:	f000 fe8c 	bl	8004c10 <_fflush_r>
 8003ef8:	68a1      	ldr	r1, [r4, #8]
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <cleanup_stdio+0x38>)
 8003efc:	4299      	cmp	r1, r3
 8003efe:	d002      	beq.n	8003f06 <cleanup_stdio+0x1e>
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 fe85 	bl	8004c10 <_fflush_r>
 8003f06:	68e1      	ldr	r1, [r4, #12]
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <cleanup_stdio+0x3c>)
 8003f0a:	4299      	cmp	r1, r3
 8003f0c:	d004      	beq.n	8003f18 <cleanup_stdio+0x30>
 8003f0e:	4620      	mov	r0, r4
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	f000 be7c 	b.w	8004c10 <_fflush_r>
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000210 	.word	0x20000210
 8003f20:	20000278 	.word	0x20000278
 8003f24:	200002e0 	.word	0x200002e0

08003f28 <global_stdio_init.part.0>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <global_stdio_init.part.0+0x30>)
 8003f2c:	4c0b      	ldr	r4, [pc, #44]	; (8003f5c <global_stdio_init.part.0+0x34>)
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <global_stdio_init.part.0+0x38>)
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	4620      	mov	r0, r4
 8003f34:	2200      	movs	r2, #0
 8003f36:	2104      	movs	r1, #4
 8003f38:	f7ff ff94 	bl	8003e64 <std>
 8003f3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f40:	2201      	movs	r2, #1
 8003f42:	2109      	movs	r1, #9
 8003f44:	f7ff ff8e 	bl	8003e64 <std>
 8003f48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f52:	2112      	movs	r1, #18
 8003f54:	f7ff bf86 	b.w	8003e64 <std>
 8003f58:	20000348 	.word	0x20000348
 8003f5c:	20000210 	.word	0x20000210
 8003f60:	08003ed1 	.word	0x08003ed1

08003f64 <__sfp_lock_acquire>:
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <__sfp_lock_acquire+0x8>)
 8003f66:	f000 b9fe 	b.w	8004366 <__retarget_lock_acquire_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	20000351 	.word	0x20000351

08003f70 <__sfp_lock_release>:
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <__sfp_lock_release+0x8>)
 8003f72:	f000 b9f9 	b.w	8004368 <__retarget_lock_release_recursive>
 8003f76:	bf00      	nop
 8003f78:	20000351 	.word	0x20000351

08003f7c <__sinit>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4604      	mov	r4, r0
 8003f80:	f7ff fff0 	bl	8003f64 <__sfp_lock_acquire>
 8003f84:	6a23      	ldr	r3, [r4, #32]
 8003f86:	b11b      	cbz	r3, 8003f90 <__sinit+0x14>
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f7ff bff0 	b.w	8003f70 <__sfp_lock_release>
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <__sinit+0x28>)
 8003f92:	6223      	str	r3, [r4, #32]
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <__sinit+0x2c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f5      	bne.n	8003f88 <__sinit+0xc>
 8003f9c:	f7ff ffc4 	bl	8003f28 <global_stdio_init.part.0>
 8003fa0:	e7f2      	b.n	8003f88 <__sinit+0xc>
 8003fa2:	bf00      	nop
 8003fa4:	08003ee9 	.word	0x08003ee9
 8003fa8:	20000348 	.word	0x20000348

08003fac <_fwalk_sglue>:
 8003fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	4688      	mov	r8, r1
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	2600      	movs	r6, #0
 8003fb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fbc:	f1b9 0901 	subs.w	r9, r9, #1
 8003fc0:	d505      	bpl.n	8003fce <_fwalk_sglue+0x22>
 8003fc2:	6824      	ldr	r4, [r4, #0]
 8003fc4:	2c00      	cmp	r4, #0
 8003fc6:	d1f7      	bne.n	8003fb8 <_fwalk_sglue+0xc>
 8003fc8:	4630      	mov	r0, r6
 8003fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fce:	89ab      	ldrh	r3, [r5, #12]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d907      	bls.n	8003fe4 <_fwalk_sglue+0x38>
 8003fd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	d003      	beq.n	8003fe4 <_fwalk_sglue+0x38>
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4638      	mov	r0, r7
 8003fe0:	47c0      	blx	r8
 8003fe2:	4306      	orrs	r6, r0
 8003fe4:	3568      	adds	r5, #104	; 0x68
 8003fe6:	e7e9      	b.n	8003fbc <_fwalk_sglue+0x10>

08003fe8 <iprintf>:
 8003fe8:	b40f      	push	{r0, r1, r2, r3}
 8003fea:	b507      	push	{r0, r1, r2, lr}
 8003fec:	4906      	ldr	r1, [pc, #24]	; (8004008 <iprintf+0x20>)
 8003fee:	ab04      	add	r3, sp, #16
 8003ff0:	6808      	ldr	r0, [r1, #0]
 8003ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff6:	6881      	ldr	r1, [r0, #8]
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	f000 fad9 	bl	80045b0 <_vfiprintf_r>
 8003ffe:	b003      	add	sp, #12
 8004000:	f85d eb04 	ldr.w	lr, [sp], #4
 8004004:	b004      	add	sp, #16
 8004006:	4770      	bx	lr
 8004008:	20000078 	.word	0x20000078

0800400c <_puts_r>:
 800400c:	6a03      	ldr	r3, [r0, #32]
 800400e:	b570      	push	{r4, r5, r6, lr}
 8004010:	6884      	ldr	r4, [r0, #8]
 8004012:	4605      	mov	r5, r0
 8004014:	460e      	mov	r6, r1
 8004016:	b90b      	cbnz	r3, 800401c <_puts_r+0x10>
 8004018:	f7ff ffb0 	bl	8003f7c <__sinit>
 800401c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800401e:	07db      	lsls	r3, r3, #31
 8004020:	d405      	bmi.n	800402e <_puts_r+0x22>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	0598      	lsls	r0, r3, #22
 8004026:	d402      	bmi.n	800402e <_puts_r+0x22>
 8004028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402a:	f000 f99c 	bl	8004366 <__retarget_lock_acquire_recursive>
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	0719      	lsls	r1, r3, #28
 8004032:	d513      	bpl.n	800405c <_puts_r+0x50>
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	b18b      	cbz	r3, 800405c <_puts_r+0x50>
 8004038:	3e01      	subs	r6, #1
 800403a:	68a3      	ldr	r3, [r4, #8]
 800403c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004040:	3b01      	subs	r3, #1
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	b9e9      	cbnz	r1, 8004082 <_puts_r+0x76>
 8004046:	2b00      	cmp	r3, #0
 8004048:	da2e      	bge.n	80040a8 <_puts_r+0x9c>
 800404a:	4622      	mov	r2, r4
 800404c:	210a      	movs	r1, #10
 800404e:	4628      	mov	r0, r5
 8004050:	f000 f87b 	bl	800414a <__swbuf_r>
 8004054:	3001      	adds	r0, #1
 8004056:	d007      	beq.n	8004068 <_puts_r+0x5c>
 8004058:	250a      	movs	r5, #10
 800405a:	e007      	b.n	800406c <_puts_r+0x60>
 800405c:	4621      	mov	r1, r4
 800405e:	4628      	mov	r0, r5
 8004060:	f000 f8b0 	bl	80041c4 <__swsetup_r>
 8004064:	2800      	cmp	r0, #0
 8004066:	d0e7      	beq.n	8004038 <_puts_r+0x2c>
 8004068:	f04f 35ff 	mov.w	r5, #4294967295
 800406c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800406e:	07da      	lsls	r2, r3, #31
 8004070:	d405      	bmi.n	800407e <_puts_r+0x72>
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	059b      	lsls	r3, r3, #22
 8004076:	d402      	bmi.n	800407e <_puts_r+0x72>
 8004078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407a:	f000 f975 	bl	8004368 <__retarget_lock_release_recursive>
 800407e:	4628      	mov	r0, r5
 8004080:	bd70      	pop	{r4, r5, r6, pc}
 8004082:	2b00      	cmp	r3, #0
 8004084:	da04      	bge.n	8004090 <_puts_r+0x84>
 8004086:	69a2      	ldr	r2, [r4, #24]
 8004088:	429a      	cmp	r2, r3
 800408a:	dc06      	bgt.n	800409a <_puts_r+0x8e>
 800408c:	290a      	cmp	r1, #10
 800408e:	d004      	beq.n	800409a <_puts_r+0x8e>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	6022      	str	r2, [r4, #0]
 8004096:	7019      	strb	r1, [r3, #0]
 8004098:	e7cf      	b.n	800403a <_puts_r+0x2e>
 800409a:	4622      	mov	r2, r4
 800409c:	4628      	mov	r0, r5
 800409e:	f000 f854 	bl	800414a <__swbuf_r>
 80040a2:	3001      	adds	r0, #1
 80040a4:	d1c9      	bne.n	800403a <_puts_r+0x2e>
 80040a6:	e7df      	b.n	8004068 <_puts_r+0x5c>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	250a      	movs	r5, #10
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	6022      	str	r2, [r4, #0]
 80040b0:	701d      	strb	r5, [r3, #0]
 80040b2:	e7db      	b.n	800406c <_puts_r+0x60>

080040b4 <puts>:
 80040b4:	4b02      	ldr	r3, [pc, #8]	; (80040c0 <puts+0xc>)
 80040b6:	4601      	mov	r1, r0
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	f7ff bfa7 	b.w	800400c <_puts_r>
 80040be:	bf00      	nop
 80040c0:	20000078 	.word	0x20000078

080040c4 <__sread>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	460c      	mov	r4, r1
 80040c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040cc:	f000 f8fc 	bl	80042c8 <_read_r>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	bfab      	itete	ge
 80040d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040d6:	89a3      	ldrhlt	r3, [r4, #12]
 80040d8:	181b      	addge	r3, r3, r0
 80040da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040de:	bfac      	ite	ge
 80040e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80040e2:	81a3      	strhlt	r3, [r4, #12]
 80040e4:	bd10      	pop	{r4, pc}

080040e6 <__swrite>:
 80040e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	461f      	mov	r7, r3
 80040ec:	898b      	ldrh	r3, [r1, #12]
 80040ee:	05db      	lsls	r3, r3, #23
 80040f0:	4605      	mov	r5, r0
 80040f2:	460c      	mov	r4, r1
 80040f4:	4616      	mov	r6, r2
 80040f6:	d505      	bpl.n	8004104 <__swrite+0x1e>
 80040f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fc:	2302      	movs	r3, #2
 80040fe:	2200      	movs	r2, #0
 8004100:	f000 f8d0 	bl	80042a4 <_lseek_r>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800410a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	4632      	mov	r2, r6
 8004112:	463b      	mov	r3, r7
 8004114:	4628      	mov	r0, r5
 8004116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411a:	f000 b8e7 	b.w	80042ec <_write_r>

0800411e <__sseek>:
 800411e:	b510      	push	{r4, lr}
 8004120:	460c      	mov	r4, r1
 8004122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004126:	f000 f8bd 	bl	80042a4 <_lseek_r>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	bf15      	itete	ne
 8004130:	6560      	strne	r0, [r4, #84]	; 0x54
 8004132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800413a:	81a3      	strheq	r3, [r4, #12]
 800413c:	bf18      	it	ne
 800413e:	81a3      	strhne	r3, [r4, #12]
 8004140:	bd10      	pop	{r4, pc}

08004142 <__sclose>:
 8004142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004146:	f000 b89d 	b.w	8004284 <_close_r>

0800414a <__swbuf_r>:
 800414a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414c:	460e      	mov	r6, r1
 800414e:	4614      	mov	r4, r2
 8004150:	4605      	mov	r5, r0
 8004152:	b118      	cbz	r0, 800415c <__swbuf_r+0x12>
 8004154:	6a03      	ldr	r3, [r0, #32]
 8004156:	b90b      	cbnz	r3, 800415c <__swbuf_r+0x12>
 8004158:	f7ff ff10 	bl	8003f7c <__sinit>
 800415c:	69a3      	ldr	r3, [r4, #24]
 800415e:	60a3      	str	r3, [r4, #8]
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	071a      	lsls	r2, r3, #28
 8004164:	d525      	bpl.n	80041b2 <__swbuf_r+0x68>
 8004166:	6923      	ldr	r3, [r4, #16]
 8004168:	b31b      	cbz	r3, 80041b2 <__swbuf_r+0x68>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	6922      	ldr	r2, [r4, #16]
 800416e:	1a98      	subs	r0, r3, r2
 8004170:	6963      	ldr	r3, [r4, #20]
 8004172:	b2f6      	uxtb	r6, r6
 8004174:	4283      	cmp	r3, r0
 8004176:	4637      	mov	r7, r6
 8004178:	dc04      	bgt.n	8004184 <__swbuf_r+0x3a>
 800417a:	4621      	mov	r1, r4
 800417c:	4628      	mov	r0, r5
 800417e:	f000 fd47 	bl	8004c10 <_fflush_r>
 8004182:	b9e0      	cbnz	r0, 80041be <__swbuf_r+0x74>
 8004184:	68a3      	ldr	r3, [r4, #8]
 8004186:	3b01      	subs	r3, #1
 8004188:	60a3      	str	r3, [r4, #8]
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	6022      	str	r2, [r4, #0]
 8004190:	701e      	strb	r6, [r3, #0]
 8004192:	6962      	ldr	r2, [r4, #20]
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	429a      	cmp	r2, r3
 8004198:	d004      	beq.n	80041a4 <__swbuf_r+0x5a>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	07db      	lsls	r3, r3, #31
 800419e:	d506      	bpl.n	80041ae <__swbuf_r+0x64>
 80041a0:	2e0a      	cmp	r6, #10
 80041a2:	d104      	bne.n	80041ae <__swbuf_r+0x64>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4628      	mov	r0, r5
 80041a8:	f000 fd32 	bl	8004c10 <_fflush_r>
 80041ac:	b938      	cbnz	r0, 80041be <__swbuf_r+0x74>
 80041ae:	4638      	mov	r0, r7
 80041b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b2:	4621      	mov	r1, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f000 f805 	bl	80041c4 <__swsetup_r>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d0d5      	beq.n	800416a <__swbuf_r+0x20>
 80041be:	f04f 37ff 	mov.w	r7, #4294967295
 80041c2:	e7f4      	b.n	80041ae <__swbuf_r+0x64>

080041c4 <__swsetup_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <__swsetup_r+0xac>)
 80041c8:	4605      	mov	r5, r0
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	460c      	mov	r4, r1
 80041ce:	b118      	cbz	r0, 80041d8 <__swsetup_r+0x14>
 80041d0:	6a03      	ldr	r3, [r0, #32]
 80041d2:	b90b      	cbnz	r3, 80041d8 <__swsetup_r+0x14>
 80041d4:	f7ff fed2 	bl	8003f7c <__sinit>
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041de:	0718      	lsls	r0, r3, #28
 80041e0:	d422      	bmi.n	8004228 <__swsetup_r+0x64>
 80041e2:	06d9      	lsls	r1, r3, #27
 80041e4:	d407      	bmi.n	80041f6 <__swsetup_r+0x32>
 80041e6:	2309      	movs	r3, #9
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041ee:	81a3      	strh	r3, [r4, #12]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	e034      	b.n	8004260 <__swsetup_r+0x9c>
 80041f6:	0758      	lsls	r0, r3, #29
 80041f8:	d512      	bpl.n	8004220 <__swsetup_r+0x5c>
 80041fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041fc:	b141      	cbz	r1, 8004210 <__swsetup_r+0x4c>
 80041fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004202:	4299      	cmp	r1, r3
 8004204:	d002      	beq.n	800420c <__swsetup_r+0x48>
 8004206:	4628      	mov	r0, r5
 8004208:	f000 f8b0 	bl	800436c <_free_r>
 800420c:	2300      	movs	r3, #0
 800420e:	6363      	str	r3, [r4, #52]	; 0x34
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	2300      	movs	r3, #0
 800421a:	6063      	str	r3, [r4, #4]
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	89a3      	ldrh	r3, [r4, #12]
 8004222:	f043 0308 	orr.w	r3, r3, #8
 8004226:	81a3      	strh	r3, [r4, #12]
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	b94b      	cbnz	r3, 8004240 <__swsetup_r+0x7c>
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004236:	d003      	beq.n	8004240 <__swsetup_r+0x7c>
 8004238:	4621      	mov	r1, r4
 800423a:	4628      	mov	r0, r5
 800423c:	f000 fd36 	bl	8004cac <__smakebuf_r>
 8004240:	89a0      	ldrh	r0, [r4, #12]
 8004242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004246:	f010 0301 	ands.w	r3, r0, #1
 800424a:	d00a      	beq.n	8004262 <__swsetup_r+0x9e>
 800424c:	2300      	movs	r3, #0
 800424e:	60a3      	str	r3, [r4, #8]
 8004250:	6963      	ldr	r3, [r4, #20]
 8004252:	425b      	negs	r3, r3
 8004254:	61a3      	str	r3, [r4, #24]
 8004256:	6923      	ldr	r3, [r4, #16]
 8004258:	b943      	cbnz	r3, 800426c <__swsetup_r+0xa8>
 800425a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800425e:	d1c4      	bne.n	80041ea <__swsetup_r+0x26>
 8004260:	bd38      	pop	{r3, r4, r5, pc}
 8004262:	0781      	lsls	r1, r0, #30
 8004264:	bf58      	it	pl
 8004266:	6963      	ldrpl	r3, [r4, #20]
 8004268:	60a3      	str	r3, [r4, #8]
 800426a:	e7f4      	b.n	8004256 <__swsetup_r+0x92>
 800426c:	2000      	movs	r0, #0
 800426e:	e7f7      	b.n	8004260 <__swsetup_r+0x9c>
 8004270:	20000078 	.word	0x20000078

08004274 <memset>:
 8004274:	4402      	add	r2, r0
 8004276:	4603      	mov	r3, r0
 8004278:	4293      	cmp	r3, r2
 800427a:	d100      	bne.n	800427e <memset+0xa>
 800427c:	4770      	bx	lr
 800427e:	f803 1b01 	strb.w	r1, [r3], #1
 8004282:	e7f9      	b.n	8004278 <memset+0x4>

08004284 <_close_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4d06      	ldr	r5, [pc, #24]	; (80042a0 <_close_r+0x1c>)
 8004288:	2300      	movs	r3, #0
 800428a:	4604      	mov	r4, r0
 800428c:	4608      	mov	r0, r1
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	f7fd f9df 	bl	8001652 <_close>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d102      	bne.n	800429e <_close_r+0x1a>
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	b103      	cbz	r3, 800429e <_close_r+0x1a>
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	bd38      	pop	{r3, r4, r5, pc}
 80042a0:	2000034c 	.word	0x2000034c

080042a4 <_lseek_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4d07      	ldr	r5, [pc, #28]	; (80042c4 <_lseek_r+0x20>)
 80042a8:	4604      	mov	r4, r0
 80042aa:	4608      	mov	r0, r1
 80042ac:	4611      	mov	r1, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	602a      	str	r2, [r5, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f7fd f9f4 	bl	80016a0 <_lseek>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d102      	bne.n	80042c2 <_lseek_r+0x1e>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	b103      	cbz	r3, 80042c2 <_lseek_r+0x1e>
 80042c0:	6023      	str	r3, [r4, #0]
 80042c2:	bd38      	pop	{r3, r4, r5, pc}
 80042c4:	2000034c 	.word	0x2000034c

080042c8 <_read_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d07      	ldr	r5, [pc, #28]	; (80042e8 <_read_r+0x20>)
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7fd f982 	bl	80015e0 <_read>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_read_r+0x1e>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_read_r+0x1e>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	2000034c 	.word	0x2000034c

080042ec <_write_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4d07      	ldr	r5, [pc, #28]	; (800430c <_write_r+0x20>)
 80042f0:	4604      	mov	r4, r0
 80042f2:	4608      	mov	r0, r1
 80042f4:	4611      	mov	r1, r2
 80042f6:	2200      	movs	r2, #0
 80042f8:	602a      	str	r2, [r5, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f7fd f98d 	bl	800161a <_write>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_write_r+0x1e>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_write_r+0x1e>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	2000034c 	.word	0x2000034c

08004310 <__errno>:
 8004310:	4b01      	ldr	r3, [pc, #4]	; (8004318 <__errno+0x8>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000078 	.word	0x20000078

0800431c <__libc_init_array>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	4d0d      	ldr	r5, [pc, #52]	; (8004354 <__libc_init_array+0x38>)
 8004320:	4c0d      	ldr	r4, [pc, #52]	; (8004358 <__libc_init_array+0x3c>)
 8004322:	1b64      	subs	r4, r4, r5
 8004324:	10a4      	asrs	r4, r4, #2
 8004326:	2600      	movs	r6, #0
 8004328:	42a6      	cmp	r6, r4
 800432a:	d109      	bne.n	8004340 <__libc_init_array+0x24>
 800432c:	4d0b      	ldr	r5, [pc, #44]	; (800435c <__libc_init_array+0x40>)
 800432e:	4c0c      	ldr	r4, [pc, #48]	; (8004360 <__libc_init_array+0x44>)
 8004330:	f000 fd2a 	bl	8004d88 <_init>
 8004334:	1b64      	subs	r4, r4, r5
 8004336:	10a4      	asrs	r4, r4, #2
 8004338:	2600      	movs	r6, #0
 800433a:	42a6      	cmp	r6, r4
 800433c:	d105      	bne.n	800434a <__libc_init_array+0x2e>
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	f855 3b04 	ldr.w	r3, [r5], #4
 8004344:	4798      	blx	r3
 8004346:	3601      	adds	r6, #1
 8004348:	e7ee      	b.n	8004328 <__libc_init_array+0xc>
 800434a:	f855 3b04 	ldr.w	r3, [r5], #4
 800434e:	4798      	blx	r3
 8004350:	3601      	adds	r6, #1
 8004352:	e7f2      	b.n	800433a <__libc_init_array+0x1e>
 8004354:	08004ec8 	.word	0x08004ec8
 8004358:	08004ec8 	.word	0x08004ec8
 800435c:	08004ec8 	.word	0x08004ec8
 8004360:	08004ecc 	.word	0x08004ecc

08004364 <__retarget_lock_init_recursive>:
 8004364:	4770      	bx	lr

08004366 <__retarget_lock_acquire_recursive>:
 8004366:	4770      	bx	lr

08004368 <__retarget_lock_release_recursive>:
 8004368:	4770      	bx	lr
	...

0800436c <_free_r>:
 800436c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800436e:	2900      	cmp	r1, #0
 8004370:	d044      	beq.n	80043fc <_free_r+0x90>
 8004372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004376:	9001      	str	r0, [sp, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f1a1 0404 	sub.w	r4, r1, #4
 800437e:	bfb8      	it	lt
 8004380:	18e4      	addlt	r4, r4, r3
 8004382:	f000 f8df 	bl	8004544 <__malloc_lock>
 8004386:	4a1e      	ldr	r2, [pc, #120]	; (8004400 <_free_r+0x94>)
 8004388:	9801      	ldr	r0, [sp, #4]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	b933      	cbnz	r3, 800439c <_free_r+0x30>
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	6014      	str	r4, [r2, #0]
 8004392:	b003      	add	sp, #12
 8004394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004398:	f000 b8da 	b.w	8004550 <__malloc_unlock>
 800439c:	42a3      	cmp	r3, r4
 800439e:	d908      	bls.n	80043b2 <_free_r+0x46>
 80043a0:	6825      	ldr	r5, [r4, #0]
 80043a2:	1961      	adds	r1, r4, r5
 80043a4:	428b      	cmp	r3, r1
 80043a6:	bf01      	itttt	eq
 80043a8:	6819      	ldreq	r1, [r3, #0]
 80043aa:	685b      	ldreq	r3, [r3, #4]
 80043ac:	1949      	addeq	r1, r1, r5
 80043ae:	6021      	streq	r1, [r4, #0]
 80043b0:	e7ed      	b.n	800438e <_free_r+0x22>
 80043b2:	461a      	mov	r2, r3
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b10b      	cbz	r3, 80043bc <_free_r+0x50>
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d9fa      	bls.n	80043b2 <_free_r+0x46>
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	1855      	adds	r5, r2, r1
 80043c0:	42a5      	cmp	r5, r4
 80043c2:	d10b      	bne.n	80043dc <_free_r+0x70>
 80043c4:	6824      	ldr	r4, [r4, #0]
 80043c6:	4421      	add	r1, r4
 80043c8:	1854      	adds	r4, r2, r1
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	6011      	str	r1, [r2, #0]
 80043ce:	d1e0      	bne.n	8004392 <_free_r+0x26>
 80043d0:	681c      	ldr	r4, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	6053      	str	r3, [r2, #4]
 80043d6:	440c      	add	r4, r1
 80043d8:	6014      	str	r4, [r2, #0]
 80043da:	e7da      	b.n	8004392 <_free_r+0x26>
 80043dc:	d902      	bls.n	80043e4 <_free_r+0x78>
 80043de:	230c      	movs	r3, #12
 80043e0:	6003      	str	r3, [r0, #0]
 80043e2:	e7d6      	b.n	8004392 <_free_r+0x26>
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	1961      	adds	r1, r4, r5
 80043e8:	428b      	cmp	r3, r1
 80043ea:	bf04      	itt	eq
 80043ec:	6819      	ldreq	r1, [r3, #0]
 80043ee:	685b      	ldreq	r3, [r3, #4]
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	bf04      	itt	eq
 80043f4:	1949      	addeq	r1, r1, r5
 80043f6:	6021      	streq	r1, [r4, #0]
 80043f8:	6054      	str	r4, [r2, #4]
 80043fa:	e7ca      	b.n	8004392 <_free_r+0x26>
 80043fc:	b003      	add	sp, #12
 80043fe:	bd30      	pop	{r4, r5, pc}
 8004400:	20000354 	.word	0x20000354

08004404 <sbrk_aligned>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4e0e      	ldr	r6, [pc, #56]	; (8004440 <sbrk_aligned+0x3c>)
 8004408:	460c      	mov	r4, r1
 800440a:	6831      	ldr	r1, [r6, #0]
 800440c:	4605      	mov	r5, r0
 800440e:	b911      	cbnz	r1, 8004416 <sbrk_aligned+0x12>
 8004410:	f000 fcaa 	bl	8004d68 <_sbrk_r>
 8004414:	6030      	str	r0, [r6, #0]
 8004416:	4621      	mov	r1, r4
 8004418:	4628      	mov	r0, r5
 800441a:	f000 fca5 	bl	8004d68 <_sbrk_r>
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	d00a      	beq.n	8004438 <sbrk_aligned+0x34>
 8004422:	1cc4      	adds	r4, r0, #3
 8004424:	f024 0403 	bic.w	r4, r4, #3
 8004428:	42a0      	cmp	r0, r4
 800442a:	d007      	beq.n	800443c <sbrk_aligned+0x38>
 800442c:	1a21      	subs	r1, r4, r0
 800442e:	4628      	mov	r0, r5
 8004430:	f000 fc9a 	bl	8004d68 <_sbrk_r>
 8004434:	3001      	adds	r0, #1
 8004436:	d101      	bne.n	800443c <sbrk_aligned+0x38>
 8004438:	f04f 34ff 	mov.w	r4, #4294967295
 800443c:	4620      	mov	r0, r4
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	20000358 	.word	0x20000358

08004444 <_malloc_r>:
 8004444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004448:	1ccd      	adds	r5, r1, #3
 800444a:	f025 0503 	bic.w	r5, r5, #3
 800444e:	3508      	adds	r5, #8
 8004450:	2d0c      	cmp	r5, #12
 8004452:	bf38      	it	cc
 8004454:	250c      	movcc	r5, #12
 8004456:	2d00      	cmp	r5, #0
 8004458:	4607      	mov	r7, r0
 800445a:	db01      	blt.n	8004460 <_malloc_r+0x1c>
 800445c:	42a9      	cmp	r1, r5
 800445e:	d905      	bls.n	800446c <_malloc_r+0x28>
 8004460:	230c      	movs	r3, #12
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	2600      	movs	r6, #0
 8004466:	4630      	mov	r0, r6
 8004468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800446c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004540 <_malloc_r+0xfc>
 8004470:	f000 f868 	bl	8004544 <__malloc_lock>
 8004474:	f8d8 3000 	ldr.w	r3, [r8]
 8004478:	461c      	mov	r4, r3
 800447a:	bb5c      	cbnz	r4, 80044d4 <_malloc_r+0x90>
 800447c:	4629      	mov	r1, r5
 800447e:	4638      	mov	r0, r7
 8004480:	f7ff ffc0 	bl	8004404 <sbrk_aligned>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	4604      	mov	r4, r0
 8004488:	d155      	bne.n	8004536 <_malloc_r+0xf2>
 800448a:	f8d8 4000 	ldr.w	r4, [r8]
 800448e:	4626      	mov	r6, r4
 8004490:	2e00      	cmp	r6, #0
 8004492:	d145      	bne.n	8004520 <_malloc_r+0xdc>
 8004494:	2c00      	cmp	r4, #0
 8004496:	d048      	beq.n	800452a <_malloc_r+0xe6>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	4631      	mov	r1, r6
 800449c:	4638      	mov	r0, r7
 800449e:	eb04 0903 	add.w	r9, r4, r3
 80044a2:	f000 fc61 	bl	8004d68 <_sbrk_r>
 80044a6:	4581      	cmp	r9, r0
 80044a8:	d13f      	bne.n	800452a <_malloc_r+0xe6>
 80044aa:	6821      	ldr	r1, [r4, #0]
 80044ac:	1a6d      	subs	r5, r5, r1
 80044ae:	4629      	mov	r1, r5
 80044b0:	4638      	mov	r0, r7
 80044b2:	f7ff ffa7 	bl	8004404 <sbrk_aligned>
 80044b6:	3001      	adds	r0, #1
 80044b8:	d037      	beq.n	800452a <_malloc_r+0xe6>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	442b      	add	r3, r5
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	f8d8 3000 	ldr.w	r3, [r8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d038      	beq.n	800453a <_malloc_r+0xf6>
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	42a2      	cmp	r2, r4
 80044cc:	d12b      	bne.n	8004526 <_malloc_r+0xe2>
 80044ce:	2200      	movs	r2, #0
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	e00f      	b.n	80044f4 <_malloc_r+0xb0>
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	1b52      	subs	r2, r2, r5
 80044d8:	d41f      	bmi.n	800451a <_malloc_r+0xd6>
 80044da:	2a0b      	cmp	r2, #11
 80044dc:	d917      	bls.n	800450e <_malloc_r+0xca>
 80044de:	1961      	adds	r1, r4, r5
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	6025      	str	r5, [r4, #0]
 80044e4:	bf18      	it	ne
 80044e6:	6059      	strne	r1, [r3, #4]
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	bf08      	it	eq
 80044ec:	f8c8 1000 	streq.w	r1, [r8]
 80044f0:	5162      	str	r2, [r4, r5]
 80044f2:	604b      	str	r3, [r1, #4]
 80044f4:	4638      	mov	r0, r7
 80044f6:	f104 060b 	add.w	r6, r4, #11
 80044fa:	f000 f829 	bl	8004550 <__malloc_unlock>
 80044fe:	f026 0607 	bic.w	r6, r6, #7
 8004502:	1d23      	adds	r3, r4, #4
 8004504:	1af2      	subs	r2, r6, r3
 8004506:	d0ae      	beq.n	8004466 <_malloc_r+0x22>
 8004508:	1b9b      	subs	r3, r3, r6
 800450a:	50a3      	str	r3, [r4, r2]
 800450c:	e7ab      	b.n	8004466 <_malloc_r+0x22>
 800450e:	42a3      	cmp	r3, r4
 8004510:	6862      	ldr	r2, [r4, #4]
 8004512:	d1dd      	bne.n	80044d0 <_malloc_r+0x8c>
 8004514:	f8c8 2000 	str.w	r2, [r8]
 8004518:	e7ec      	b.n	80044f4 <_malloc_r+0xb0>
 800451a:	4623      	mov	r3, r4
 800451c:	6864      	ldr	r4, [r4, #4]
 800451e:	e7ac      	b.n	800447a <_malloc_r+0x36>
 8004520:	4634      	mov	r4, r6
 8004522:	6876      	ldr	r6, [r6, #4]
 8004524:	e7b4      	b.n	8004490 <_malloc_r+0x4c>
 8004526:	4613      	mov	r3, r2
 8004528:	e7cc      	b.n	80044c4 <_malloc_r+0x80>
 800452a:	230c      	movs	r3, #12
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4638      	mov	r0, r7
 8004530:	f000 f80e 	bl	8004550 <__malloc_unlock>
 8004534:	e797      	b.n	8004466 <_malloc_r+0x22>
 8004536:	6025      	str	r5, [r4, #0]
 8004538:	e7dc      	b.n	80044f4 <_malloc_r+0xb0>
 800453a:	605b      	str	r3, [r3, #4]
 800453c:	deff      	udf	#255	; 0xff
 800453e:	bf00      	nop
 8004540:	20000354 	.word	0x20000354

08004544 <__malloc_lock>:
 8004544:	4801      	ldr	r0, [pc, #4]	; (800454c <__malloc_lock+0x8>)
 8004546:	f7ff bf0e 	b.w	8004366 <__retarget_lock_acquire_recursive>
 800454a:	bf00      	nop
 800454c:	20000350 	.word	0x20000350

08004550 <__malloc_unlock>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__malloc_unlock+0x8>)
 8004552:	f7ff bf09 	b.w	8004368 <__retarget_lock_release_recursive>
 8004556:	bf00      	nop
 8004558:	20000350 	.word	0x20000350

0800455c <__sfputc_r>:
 800455c:	6893      	ldr	r3, [r2, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	b410      	push	{r4}
 8004564:	6093      	str	r3, [r2, #8]
 8004566:	da08      	bge.n	800457a <__sfputc_r+0x1e>
 8004568:	6994      	ldr	r4, [r2, #24]
 800456a:	42a3      	cmp	r3, r4
 800456c:	db01      	blt.n	8004572 <__sfputc_r+0x16>
 800456e:	290a      	cmp	r1, #10
 8004570:	d103      	bne.n	800457a <__sfputc_r+0x1e>
 8004572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004576:	f7ff bde8 	b.w	800414a <__swbuf_r>
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	1c58      	adds	r0, r3, #1
 800457e:	6010      	str	r0, [r2, #0]
 8004580:	7019      	strb	r1, [r3, #0]
 8004582:	4608      	mov	r0, r1
 8004584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004588:	4770      	bx	lr

0800458a <__sfputs_r>:
 800458a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458c:	4606      	mov	r6, r0
 800458e:	460f      	mov	r7, r1
 8004590:	4614      	mov	r4, r2
 8004592:	18d5      	adds	r5, r2, r3
 8004594:	42ac      	cmp	r4, r5
 8004596:	d101      	bne.n	800459c <__sfputs_r+0x12>
 8004598:	2000      	movs	r0, #0
 800459a:	e007      	b.n	80045ac <__sfputs_r+0x22>
 800459c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a0:	463a      	mov	r2, r7
 80045a2:	4630      	mov	r0, r6
 80045a4:	f7ff ffda 	bl	800455c <__sfputc_r>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d1f3      	bne.n	8004594 <__sfputs_r+0xa>
 80045ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045b0 <_vfiprintf_r>:
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	460d      	mov	r5, r1
 80045b6:	b09d      	sub	sp, #116	; 0x74
 80045b8:	4614      	mov	r4, r2
 80045ba:	4698      	mov	r8, r3
 80045bc:	4606      	mov	r6, r0
 80045be:	b118      	cbz	r0, 80045c8 <_vfiprintf_r+0x18>
 80045c0:	6a03      	ldr	r3, [r0, #32]
 80045c2:	b90b      	cbnz	r3, 80045c8 <_vfiprintf_r+0x18>
 80045c4:	f7ff fcda 	bl	8003f7c <__sinit>
 80045c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ca:	07d9      	lsls	r1, r3, #31
 80045cc:	d405      	bmi.n	80045da <_vfiprintf_r+0x2a>
 80045ce:	89ab      	ldrh	r3, [r5, #12]
 80045d0:	059a      	lsls	r2, r3, #22
 80045d2:	d402      	bmi.n	80045da <_vfiprintf_r+0x2a>
 80045d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045d6:	f7ff fec6 	bl	8004366 <__retarget_lock_acquire_recursive>
 80045da:	89ab      	ldrh	r3, [r5, #12]
 80045dc:	071b      	lsls	r3, r3, #28
 80045de:	d501      	bpl.n	80045e4 <_vfiprintf_r+0x34>
 80045e0:	692b      	ldr	r3, [r5, #16]
 80045e2:	b99b      	cbnz	r3, 800460c <_vfiprintf_r+0x5c>
 80045e4:	4629      	mov	r1, r5
 80045e6:	4630      	mov	r0, r6
 80045e8:	f7ff fdec 	bl	80041c4 <__swsetup_r>
 80045ec:	b170      	cbz	r0, 800460c <_vfiprintf_r+0x5c>
 80045ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045f0:	07dc      	lsls	r4, r3, #31
 80045f2:	d504      	bpl.n	80045fe <_vfiprintf_r+0x4e>
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	b01d      	add	sp, #116	; 0x74
 80045fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fe:	89ab      	ldrh	r3, [r5, #12]
 8004600:	0598      	lsls	r0, r3, #22
 8004602:	d4f7      	bmi.n	80045f4 <_vfiprintf_r+0x44>
 8004604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004606:	f7ff feaf 	bl	8004368 <__retarget_lock_release_recursive>
 800460a:	e7f3      	b.n	80045f4 <_vfiprintf_r+0x44>
 800460c:	2300      	movs	r3, #0
 800460e:	9309      	str	r3, [sp, #36]	; 0x24
 8004610:	2320      	movs	r3, #32
 8004612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004616:	f8cd 800c 	str.w	r8, [sp, #12]
 800461a:	2330      	movs	r3, #48	; 0x30
 800461c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80047d0 <_vfiprintf_r+0x220>
 8004620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004624:	f04f 0901 	mov.w	r9, #1
 8004628:	4623      	mov	r3, r4
 800462a:	469a      	mov	sl, r3
 800462c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004630:	b10a      	cbz	r2, 8004636 <_vfiprintf_r+0x86>
 8004632:	2a25      	cmp	r2, #37	; 0x25
 8004634:	d1f9      	bne.n	800462a <_vfiprintf_r+0x7a>
 8004636:	ebba 0b04 	subs.w	fp, sl, r4
 800463a:	d00b      	beq.n	8004654 <_vfiprintf_r+0xa4>
 800463c:	465b      	mov	r3, fp
 800463e:	4622      	mov	r2, r4
 8004640:	4629      	mov	r1, r5
 8004642:	4630      	mov	r0, r6
 8004644:	f7ff ffa1 	bl	800458a <__sfputs_r>
 8004648:	3001      	adds	r0, #1
 800464a:	f000 80a9 	beq.w	80047a0 <_vfiprintf_r+0x1f0>
 800464e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004650:	445a      	add	r2, fp
 8004652:	9209      	str	r2, [sp, #36]	; 0x24
 8004654:	f89a 3000 	ldrb.w	r3, [sl]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a1 	beq.w	80047a0 <_vfiprintf_r+0x1f0>
 800465e:	2300      	movs	r3, #0
 8004660:	f04f 32ff 	mov.w	r2, #4294967295
 8004664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004668:	f10a 0a01 	add.w	sl, sl, #1
 800466c:	9304      	str	r3, [sp, #16]
 800466e:	9307      	str	r3, [sp, #28]
 8004670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004674:	931a      	str	r3, [sp, #104]	; 0x68
 8004676:	4654      	mov	r4, sl
 8004678:	2205      	movs	r2, #5
 800467a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467e:	4854      	ldr	r0, [pc, #336]	; (80047d0 <_vfiprintf_r+0x220>)
 8004680:	f7fb fdc6 	bl	8000210 <memchr>
 8004684:	9a04      	ldr	r2, [sp, #16]
 8004686:	b9d8      	cbnz	r0, 80046c0 <_vfiprintf_r+0x110>
 8004688:	06d1      	lsls	r1, r2, #27
 800468a:	bf44      	itt	mi
 800468c:	2320      	movmi	r3, #32
 800468e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004692:	0713      	lsls	r3, r2, #28
 8004694:	bf44      	itt	mi
 8004696:	232b      	movmi	r3, #43	; 0x2b
 8004698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800469c:	f89a 3000 	ldrb.w	r3, [sl]
 80046a0:	2b2a      	cmp	r3, #42	; 0x2a
 80046a2:	d015      	beq.n	80046d0 <_vfiprintf_r+0x120>
 80046a4:	9a07      	ldr	r2, [sp, #28]
 80046a6:	4654      	mov	r4, sl
 80046a8:	2000      	movs	r0, #0
 80046aa:	f04f 0c0a 	mov.w	ip, #10
 80046ae:	4621      	mov	r1, r4
 80046b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b4:	3b30      	subs	r3, #48	; 0x30
 80046b6:	2b09      	cmp	r3, #9
 80046b8:	d94d      	bls.n	8004756 <_vfiprintf_r+0x1a6>
 80046ba:	b1b0      	cbz	r0, 80046ea <_vfiprintf_r+0x13a>
 80046bc:	9207      	str	r2, [sp, #28]
 80046be:	e014      	b.n	80046ea <_vfiprintf_r+0x13a>
 80046c0:	eba0 0308 	sub.w	r3, r0, r8
 80046c4:	fa09 f303 	lsl.w	r3, r9, r3
 80046c8:	4313      	orrs	r3, r2
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	46a2      	mov	sl, r4
 80046ce:	e7d2      	b.n	8004676 <_vfiprintf_r+0xc6>
 80046d0:	9b03      	ldr	r3, [sp, #12]
 80046d2:	1d19      	adds	r1, r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	9103      	str	r1, [sp, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bfbb      	ittet	lt
 80046dc:	425b      	neglt	r3, r3
 80046de:	f042 0202 	orrlt.w	r2, r2, #2
 80046e2:	9307      	strge	r3, [sp, #28]
 80046e4:	9307      	strlt	r3, [sp, #28]
 80046e6:	bfb8      	it	lt
 80046e8:	9204      	strlt	r2, [sp, #16]
 80046ea:	7823      	ldrb	r3, [r4, #0]
 80046ec:	2b2e      	cmp	r3, #46	; 0x2e
 80046ee:	d10c      	bne.n	800470a <_vfiprintf_r+0x15a>
 80046f0:	7863      	ldrb	r3, [r4, #1]
 80046f2:	2b2a      	cmp	r3, #42	; 0x2a
 80046f4:	d134      	bne.n	8004760 <_vfiprintf_r+0x1b0>
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	1d1a      	adds	r2, r3, #4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	9203      	str	r2, [sp, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfb8      	it	lt
 8004702:	f04f 33ff 	movlt.w	r3, #4294967295
 8004706:	3402      	adds	r4, #2
 8004708:	9305      	str	r3, [sp, #20]
 800470a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80047e0 <_vfiprintf_r+0x230>
 800470e:	7821      	ldrb	r1, [r4, #0]
 8004710:	2203      	movs	r2, #3
 8004712:	4650      	mov	r0, sl
 8004714:	f7fb fd7c 	bl	8000210 <memchr>
 8004718:	b138      	cbz	r0, 800472a <_vfiprintf_r+0x17a>
 800471a:	9b04      	ldr	r3, [sp, #16]
 800471c:	eba0 000a 	sub.w	r0, r0, sl
 8004720:	2240      	movs	r2, #64	; 0x40
 8004722:	4082      	lsls	r2, r0
 8004724:	4313      	orrs	r3, r2
 8004726:	3401      	adds	r4, #1
 8004728:	9304      	str	r3, [sp, #16]
 800472a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800472e:	4829      	ldr	r0, [pc, #164]	; (80047d4 <_vfiprintf_r+0x224>)
 8004730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004734:	2206      	movs	r2, #6
 8004736:	f7fb fd6b 	bl	8000210 <memchr>
 800473a:	2800      	cmp	r0, #0
 800473c:	d03f      	beq.n	80047be <_vfiprintf_r+0x20e>
 800473e:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <_vfiprintf_r+0x228>)
 8004740:	bb1b      	cbnz	r3, 800478a <_vfiprintf_r+0x1da>
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	3307      	adds	r3, #7
 8004746:	f023 0307 	bic.w	r3, r3, #7
 800474a:	3308      	adds	r3, #8
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004750:	443b      	add	r3, r7
 8004752:	9309      	str	r3, [sp, #36]	; 0x24
 8004754:	e768      	b.n	8004628 <_vfiprintf_r+0x78>
 8004756:	fb0c 3202 	mla	r2, ip, r2, r3
 800475a:	460c      	mov	r4, r1
 800475c:	2001      	movs	r0, #1
 800475e:	e7a6      	b.n	80046ae <_vfiprintf_r+0xfe>
 8004760:	2300      	movs	r3, #0
 8004762:	3401      	adds	r4, #1
 8004764:	9305      	str	r3, [sp, #20]
 8004766:	4619      	mov	r1, r3
 8004768:	f04f 0c0a 	mov.w	ip, #10
 800476c:	4620      	mov	r0, r4
 800476e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004772:	3a30      	subs	r2, #48	; 0x30
 8004774:	2a09      	cmp	r2, #9
 8004776:	d903      	bls.n	8004780 <_vfiprintf_r+0x1d0>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0c6      	beq.n	800470a <_vfiprintf_r+0x15a>
 800477c:	9105      	str	r1, [sp, #20]
 800477e:	e7c4      	b.n	800470a <_vfiprintf_r+0x15a>
 8004780:	fb0c 2101 	mla	r1, ip, r1, r2
 8004784:	4604      	mov	r4, r0
 8004786:	2301      	movs	r3, #1
 8004788:	e7f0      	b.n	800476c <_vfiprintf_r+0x1bc>
 800478a:	ab03      	add	r3, sp, #12
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	462a      	mov	r2, r5
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <_vfiprintf_r+0x22c>)
 8004792:	a904      	add	r1, sp, #16
 8004794:	4630      	mov	r0, r6
 8004796:	f3af 8000 	nop.w
 800479a:	4607      	mov	r7, r0
 800479c:	1c78      	adds	r0, r7, #1
 800479e:	d1d6      	bne.n	800474e <_vfiprintf_r+0x19e>
 80047a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047a2:	07d9      	lsls	r1, r3, #31
 80047a4:	d405      	bmi.n	80047b2 <_vfiprintf_r+0x202>
 80047a6:	89ab      	ldrh	r3, [r5, #12]
 80047a8:	059a      	lsls	r2, r3, #22
 80047aa:	d402      	bmi.n	80047b2 <_vfiprintf_r+0x202>
 80047ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ae:	f7ff fddb 	bl	8004368 <__retarget_lock_release_recursive>
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	065b      	lsls	r3, r3, #25
 80047b6:	f53f af1d 	bmi.w	80045f4 <_vfiprintf_r+0x44>
 80047ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047bc:	e71c      	b.n	80045f8 <_vfiprintf_r+0x48>
 80047be:	ab03      	add	r3, sp, #12
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	462a      	mov	r2, r5
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <_vfiprintf_r+0x22c>)
 80047c6:	a904      	add	r1, sp, #16
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f879 	bl	80048c0 <_printf_i>
 80047ce:	e7e4      	b.n	800479a <_vfiprintf_r+0x1ea>
 80047d0:	08004e8c 	.word	0x08004e8c
 80047d4:	08004e96 	.word	0x08004e96
 80047d8:	00000000 	.word	0x00000000
 80047dc:	0800458b 	.word	0x0800458b
 80047e0:	08004e92 	.word	0x08004e92

080047e4 <_printf_common>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	4616      	mov	r6, r2
 80047ea:	4699      	mov	r9, r3
 80047ec:	688a      	ldr	r2, [r1, #8]
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f4:	4293      	cmp	r3, r2
 80047f6:	bfb8      	it	lt
 80047f8:	4613      	movlt	r3, r2
 80047fa:	6033      	str	r3, [r6, #0]
 80047fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004800:	4607      	mov	r7, r0
 8004802:	460c      	mov	r4, r1
 8004804:	b10a      	cbz	r2, 800480a <_printf_common+0x26>
 8004806:	3301      	adds	r3, #1
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	0699      	lsls	r1, r3, #26
 800480e:	bf42      	ittt	mi
 8004810:	6833      	ldrmi	r3, [r6, #0]
 8004812:	3302      	addmi	r3, #2
 8004814:	6033      	strmi	r3, [r6, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	f015 0506 	ands.w	r5, r5, #6
 800481c:	d106      	bne.n	800482c <_printf_common+0x48>
 800481e:	f104 0a19 	add.w	sl, r4, #25
 8004822:	68e3      	ldr	r3, [r4, #12]
 8004824:	6832      	ldr	r2, [r6, #0]
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	42ab      	cmp	r3, r5
 800482a:	dc26      	bgt.n	800487a <_printf_common+0x96>
 800482c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004830:	1e13      	subs	r3, r2, #0
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	bf18      	it	ne
 8004836:	2301      	movne	r3, #1
 8004838:	0692      	lsls	r2, r2, #26
 800483a:	d42b      	bmi.n	8004894 <_printf_common+0xb0>
 800483c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004840:	4649      	mov	r1, r9
 8004842:	4638      	mov	r0, r7
 8004844:	47c0      	blx	r8
 8004846:	3001      	adds	r0, #1
 8004848:	d01e      	beq.n	8004888 <_printf_common+0xa4>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	6922      	ldr	r2, [r4, #16]
 800484e:	f003 0306 	and.w	r3, r3, #6
 8004852:	2b04      	cmp	r3, #4
 8004854:	bf02      	ittt	eq
 8004856:	68e5      	ldreq	r5, [r4, #12]
 8004858:	6833      	ldreq	r3, [r6, #0]
 800485a:	1aed      	subeq	r5, r5, r3
 800485c:	68a3      	ldr	r3, [r4, #8]
 800485e:	bf0c      	ite	eq
 8004860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004864:	2500      	movne	r5, #0
 8004866:	4293      	cmp	r3, r2
 8004868:	bfc4      	itt	gt
 800486a:	1a9b      	subgt	r3, r3, r2
 800486c:	18ed      	addgt	r5, r5, r3
 800486e:	2600      	movs	r6, #0
 8004870:	341a      	adds	r4, #26
 8004872:	42b5      	cmp	r5, r6
 8004874:	d11a      	bne.n	80048ac <_printf_common+0xc8>
 8004876:	2000      	movs	r0, #0
 8004878:	e008      	b.n	800488c <_printf_common+0xa8>
 800487a:	2301      	movs	r3, #1
 800487c:	4652      	mov	r2, sl
 800487e:	4649      	mov	r1, r9
 8004880:	4638      	mov	r0, r7
 8004882:	47c0      	blx	r8
 8004884:	3001      	adds	r0, #1
 8004886:	d103      	bne.n	8004890 <_printf_common+0xac>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	3501      	adds	r5, #1
 8004892:	e7c6      	b.n	8004822 <_printf_common+0x3e>
 8004894:	18e1      	adds	r1, r4, r3
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	2030      	movs	r0, #48	; 0x30
 800489a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800489e:	4422      	add	r2, r4
 80048a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048a8:	3302      	adds	r3, #2
 80048aa:	e7c7      	b.n	800483c <_printf_common+0x58>
 80048ac:	2301      	movs	r3, #1
 80048ae:	4622      	mov	r2, r4
 80048b0:	4649      	mov	r1, r9
 80048b2:	4638      	mov	r0, r7
 80048b4:	47c0      	blx	r8
 80048b6:	3001      	adds	r0, #1
 80048b8:	d0e6      	beq.n	8004888 <_printf_common+0xa4>
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7d9      	b.n	8004872 <_printf_common+0x8e>
	...

080048c0 <_printf_i>:
 80048c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	7e0f      	ldrb	r7, [r1, #24]
 80048c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048c8:	2f78      	cmp	r7, #120	; 0x78
 80048ca:	4691      	mov	r9, r2
 80048cc:	4680      	mov	r8, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	469a      	mov	sl, r3
 80048d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048d6:	d807      	bhi.n	80048e8 <_printf_i+0x28>
 80048d8:	2f62      	cmp	r7, #98	; 0x62
 80048da:	d80a      	bhi.n	80048f2 <_printf_i+0x32>
 80048dc:	2f00      	cmp	r7, #0
 80048de:	f000 80d4 	beq.w	8004a8a <_printf_i+0x1ca>
 80048e2:	2f58      	cmp	r7, #88	; 0x58
 80048e4:	f000 80c0 	beq.w	8004a68 <_printf_i+0x1a8>
 80048e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048f0:	e03a      	b.n	8004968 <_printf_i+0xa8>
 80048f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048f6:	2b15      	cmp	r3, #21
 80048f8:	d8f6      	bhi.n	80048e8 <_printf_i+0x28>
 80048fa:	a101      	add	r1, pc, #4	; (adr r1, 8004900 <_printf_i+0x40>)
 80048fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004900:	08004959 	.word	0x08004959
 8004904:	0800496d 	.word	0x0800496d
 8004908:	080048e9 	.word	0x080048e9
 800490c:	080048e9 	.word	0x080048e9
 8004910:	080048e9 	.word	0x080048e9
 8004914:	080048e9 	.word	0x080048e9
 8004918:	0800496d 	.word	0x0800496d
 800491c:	080048e9 	.word	0x080048e9
 8004920:	080048e9 	.word	0x080048e9
 8004924:	080048e9 	.word	0x080048e9
 8004928:	080048e9 	.word	0x080048e9
 800492c:	08004a71 	.word	0x08004a71
 8004930:	08004999 	.word	0x08004999
 8004934:	08004a2b 	.word	0x08004a2b
 8004938:	080048e9 	.word	0x080048e9
 800493c:	080048e9 	.word	0x080048e9
 8004940:	08004a93 	.word	0x08004a93
 8004944:	080048e9 	.word	0x080048e9
 8004948:	08004999 	.word	0x08004999
 800494c:	080048e9 	.word	0x080048e9
 8004950:	080048e9 	.word	0x080048e9
 8004954:	08004a33 	.word	0x08004a33
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	1d1a      	adds	r2, r3, #4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	602a      	str	r2, [r5, #0]
 8004960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004968:	2301      	movs	r3, #1
 800496a:	e09f      	b.n	8004aac <_printf_i+0x1ec>
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	0607      	lsls	r7, r0, #24
 8004972:	f103 0104 	add.w	r1, r3, #4
 8004976:	6029      	str	r1, [r5, #0]
 8004978:	d501      	bpl.n	800497e <_printf_i+0xbe>
 800497a:	681e      	ldr	r6, [r3, #0]
 800497c:	e003      	b.n	8004986 <_printf_i+0xc6>
 800497e:	0646      	lsls	r6, r0, #25
 8004980:	d5fb      	bpl.n	800497a <_printf_i+0xba>
 8004982:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004986:	2e00      	cmp	r6, #0
 8004988:	da03      	bge.n	8004992 <_printf_i+0xd2>
 800498a:	232d      	movs	r3, #45	; 0x2d
 800498c:	4276      	negs	r6, r6
 800498e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004992:	485a      	ldr	r0, [pc, #360]	; (8004afc <_printf_i+0x23c>)
 8004994:	230a      	movs	r3, #10
 8004996:	e012      	b.n	80049be <_printf_i+0xfe>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	1d19      	adds	r1, r3, #4
 800499e:	6029      	str	r1, [r5, #0]
 80049a0:	0605      	lsls	r5, r0, #24
 80049a2:	d501      	bpl.n	80049a8 <_printf_i+0xe8>
 80049a4:	681e      	ldr	r6, [r3, #0]
 80049a6:	e002      	b.n	80049ae <_printf_i+0xee>
 80049a8:	0641      	lsls	r1, r0, #25
 80049aa:	d5fb      	bpl.n	80049a4 <_printf_i+0xe4>
 80049ac:	881e      	ldrh	r6, [r3, #0]
 80049ae:	4853      	ldr	r0, [pc, #332]	; (8004afc <_printf_i+0x23c>)
 80049b0:	2f6f      	cmp	r7, #111	; 0x6f
 80049b2:	bf0c      	ite	eq
 80049b4:	2308      	moveq	r3, #8
 80049b6:	230a      	movne	r3, #10
 80049b8:	2100      	movs	r1, #0
 80049ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049be:	6865      	ldr	r5, [r4, #4]
 80049c0:	60a5      	str	r5, [r4, #8]
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	bfa2      	ittt	ge
 80049c6:	6821      	ldrge	r1, [r4, #0]
 80049c8:	f021 0104 	bicge.w	r1, r1, #4
 80049cc:	6021      	strge	r1, [r4, #0]
 80049ce:	b90e      	cbnz	r6, 80049d4 <_printf_i+0x114>
 80049d0:	2d00      	cmp	r5, #0
 80049d2:	d04b      	beq.n	8004a6c <_printf_i+0x1ac>
 80049d4:	4615      	mov	r5, r2
 80049d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049da:	fb03 6711 	mls	r7, r3, r1, r6
 80049de:	5dc7      	ldrb	r7, [r0, r7]
 80049e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049e4:	4637      	mov	r7, r6
 80049e6:	42bb      	cmp	r3, r7
 80049e8:	460e      	mov	r6, r1
 80049ea:	d9f4      	bls.n	80049d6 <_printf_i+0x116>
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d10b      	bne.n	8004a08 <_printf_i+0x148>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	07de      	lsls	r6, r3, #31
 80049f4:	d508      	bpl.n	8004a08 <_printf_i+0x148>
 80049f6:	6923      	ldr	r3, [r4, #16]
 80049f8:	6861      	ldr	r1, [r4, #4]
 80049fa:	4299      	cmp	r1, r3
 80049fc:	bfde      	ittt	le
 80049fe:	2330      	movle	r3, #48	; 0x30
 8004a00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a08:	1b52      	subs	r2, r2, r5
 8004a0a:	6122      	str	r2, [r4, #16]
 8004a0c:	f8cd a000 	str.w	sl, [sp]
 8004a10:	464b      	mov	r3, r9
 8004a12:	aa03      	add	r2, sp, #12
 8004a14:	4621      	mov	r1, r4
 8004a16:	4640      	mov	r0, r8
 8004a18:	f7ff fee4 	bl	80047e4 <_printf_common>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d14a      	bne.n	8004ab6 <_printf_i+0x1f6>
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	b004      	add	sp, #16
 8004a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	f043 0320 	orr.w	r3, r3, #32
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	4833      	ldr	r0, [pc, #204]	; (8004b00 <_printf_i+0x240>)
 8004a34:	2778      	movs	r7, #120	; 0x78
 8004a36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	6829      	ldr	r1, [r5, #0]
 8004a3e:	061f      	lsls	r7, r3, #24
 8004a40:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a44:	d402      	bmi.n	8004a4c <_printf_i+0x18c>
 8004a46:	065f      	lsls	r7, r3, #25
 8004a48:	bf48      	it	mi
 8004a4a:	b2b6      	uxthmi	r6, r6
 8004a4c:	07df      	lsls	r7, r3, #31
 8004a4e:	bf48      	it	mi
 8004a50:	f043 0320 	orrmi.w	r3, r3, #32
 8004a54:	6029      	str	r1, [r5, #0]
 8004a56:	bf48      	it	mi
 8004a58:	6023      	strmi	r3, [r4, #0]
 8004a5a:	b91e      	cbnz	r6, 8004a64 <_printf_i+0x1a4>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	f023 0320 	bic.w	r3, r3, #32
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	2310      	movs	r3, #16
 8004a66:	e7a7      	b.n	80049b8 <_printf_i+0xf8>
 8004a68:	4824      	ldr	r0, [pc, #144]	; (8004afc <_printf_i+0x23c>)
 8004a6a:	e7e4      	b.n	8004a36 <_printf_i+0x176>
 8004a6c:	4615      	mov	r5, r2
 8004a6e:	e7bd      	b.n	80049ec <_printf_i+0x12c>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	6826      	ldr	r6, [r4, #0]
 8004a74:	6961      	ldr	r1, [r4, #20]
 8004a76:	1d18      	adds	r0, r3, #4
 8004a78:	6028      	str	r0, [r5, #0]
 8004a7a:	0635      	lsls	r5, r6, #24
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	d501      	bpl.n	8004a84 <_printf_i+0x1c4>
 8004a80:	6019      	str	r1, [r3, #0]
 8004a82:	e002      	b.n	8004a8a <_printf_i+0x1ca>
 8004a84:	0670      	lsls	r0, r6, #25
 8004a86:	d5fb      	bpl.n	8004a80 <_printf_i+0x1c0>
 8004a88:	8019      	strh	r1, [r3, #0]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	4615      	mov	r5, r2
 8004a90:	e7bc      	b.n	8004a0c <_printf_i+0x14c>
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	1d1a      	adds	r2, r3, #4
 8004a96:	602a      	str	r2, [r5, #0]
 8004a98:	681d      	ldr	r5, [r3, #0]
 8004a9a:	6862      	ldr	r2, [r4, #4]
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f7fb fbb6 	bl	8000210 <memchr>
 8004aa4:	b108      	cbz	r0, 8004aaa <_printf_i+0x1ea>
 8004aa6:	1b40      	subs	r0, r0, r5
 8004aa8:	6060      	str	r0, [r4, #4]
 8004aaa:	6863      	ldr	r3, [r4, #4]
 8004aac:	6123      	str	r3, [r4, #16]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab4:	e7aa      	b.n	8004a0c <_printf_i+0x14c>
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	462a      	mov	r2, r5
 8004aba:	4649      	mov	r1, r9
 8004abc:	4640      	mov	r0, r8
 8004abe:	47d0      	blx	sl
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d0ad      	beq.n	8004a20 <_printf_i+0x160>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	079b      	lsls	r3, r3, #30
 8004ac8:	d413      	bmi.n	8004af2 <_printf_i+0x232>
 8004aca:	68e0      	ldr	r0, [r4, #12]
 8004acc:	9b03      	ldr	r3, [sp, #12]
 8004ace:	4298      	cmp	r0, r3
 8004ad0:	bfb8      	it	lt
 8004ad2:	4618      	movlt	r0, r3
 8004ad4:	e7a6      	b.n	8004a24 <_printf_i+0x164>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4632      	mov	r2, r6
 8004ada:	4649      	mov	r1, r9
 8004adc:	4640      	mov	r0, r8
 8004ade:	47d0      	blx	sl
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d09d      	beq.n	8004a20 <_printf_i+0x160>
 8004ae4:	3501      	adds	r5, #1
 8004ae6:	68e3      	ldr	r3, [r4, #12]
 8004ae8:	9903      	ldr	r1, [sp, #12]
 8004aea:	1a5b      	subs	r3, r3, r1
 8004aec:	42ab      	cmp	r3, r5
 8004aee:	dcf2      	bgt.n	8004ad6 <_printf_i+0x216>
 8004af0:	e7eb      	b.n	8004aca <_printf_i+0x20a>
 8004af2:	2500      	movs	r5, #0
 8004af4:	f104 0619 	add.w	r6, r4, #25
 8004af8:	e7f5      	b.n	8004ae6 <_printf_i+0x226>
 8004afa:	bf00      	nop
 8004afc:	08004e9d 	.word	0x08004e9d
 8004b00:	08004eae 	.word	0x08004eae

08004b04 <__sflush_r>:
 8004b04:	898a      	ldrh	r2, [r1, #12]
 8004b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	0710      	lsls	r0, r2, #28
 8004b0e:	460c      	mov	r4, r1
 8004b10:	d458      	bmi.n	8004bc4 <__sflush_r+0xc0>
 8004b12:	684b      	ldr	r3, [r1, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	dc05      	bgt.n	8004b24 <__sflush_r+0x20>
 8004b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	dc02      	bgt.n	8004b24 <__sflush_r+0x20>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b26:	2e00      	cmp	r6, #0
 8004b28:	d0f9      	beq.n	8004b1e <__sflush_r+0x1a>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b30:	682f      	ldr	r7, [r5, #0]
 8004b32:	6a21      	ldr	r1, [r4, #32]
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	d032      	beq.n	8004b9e <__sflush_r+0x9a>
 8004b38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	075a      	lsls	r2, r3, #29
 8004b3e:	d505      	bpl.n	8004b4c <__sflush_r+0x48>
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	1ac0      	subs	r0, r0, r3
 8004b44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b46:	b10b      	cbz	r3, 8004b4c <__sflush_r+0x48>
 8004b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b4a:	1ac0      	subs	r0, r0, r3
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4602      	mov	r2, r0
 8004b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b52:	6a21      	ldr	r1, [r4, #32]
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b0      	blx	r6
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	d106      	bne.n	8004b6c <__sflush_r+0x68>
 8004b5e:	6829      	ldr	r1, [r5, #0]
 8004b60:	291d      	cmp	r1, #29
 8004b62:	d82b      	bhi.n	8004bbc <__sflush_r+0xb8>
 8004b64:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <__sflush_r+0x108>)
 8004b66:	410a      	asrs	r2, r1
 8004b68:	07d6      	lsls	r6, r2, #31
 8004b6a:	d427      	bmi.n	8004bbc <__sflush_r+0xb8>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	6062      	str	r2, [r4, #4]
 8004b70:	04d9      	lsls	r1, r3, #19
 8004b72:	6922      	ldr	r2, [r4, #16]
 8004b74:	6022      	str	r2, [r4, #0]
 8004b76:	d504      	bpl.n	8004b82 <__sflush_r+0x7e>
 8004b78:	1c42      	adds	r2, r0, #1
 8004b7a:	d101      	bne.n	8004b80 <__sflush_r+0x7c>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b903      	cbnz	r3, 8004b82 <__sflush_r+0x7e>
 8004b80:	6560      	str	r0, [r4, #84]	; 0x54
 8004b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b84:	602f      	str	r7, [r5, #0]
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d0c9      	beq.n	8004b1e <__sflush_r+0x1a>
 8004b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b8e:	4299      	cmp	r1, r3
 8004b90:	d002      	beq.n	8004b98 <__sflush_r+0x94>
 8004b92:	4628      	mov	r0, r5
 8004b94:	f7ff fbea 	bl	800436c <_free_r>
 8004b98:	2000      	movs	r0, #0
 8004b9a:	6360      	str	r0, [r4, #52]	; 0x34
 8004b9c:	e7c0      	b.n	8004b20 <__sflush_r+0x1c>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b0      	blx	r6
 8004ba4:	1c41      	adds	r1, r0, #1
 8004ba6:	d1c8      	bne.n	8004b3a <__sflush_r+0x36>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0c5      	beq.n	8004b3a <__sflush_r+0x36>
 8004bae:	2b1d      	cmp	r3, #29
 8004bb0:	d001      	beq.n	8004bb6 <__sflush_r+0xb2>
 8004bb2:	2b16      	cmp	r3, #22
 8004bb4:	d101      	bne.n	8004bba <__sflush_r+0xb6>
 8004bb6:	602f      	str	r7, [r5, #0]
 8004bb8:	e7b1      	b.n	8004b1e <__sflush_r+0x1a>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	e7ad      	b.n	8004b20 <__sflush_r+0x1c>
 8004bc4:	690f      	ldr	r7, [r1, #16]
 8004bc6:	2f00      	cmp	r7, #0
 8004bc8:	d0a9      	beq.n	8004b1e <__sflush_r+0x1a>
 8004bca:	0793      	lsls	r3, r2, #30
 8004bcc:	680e      	ldr	r6, [r1, #0]
 8004bce:	bf08      	it	eq
 8004bd0:	694b      	ldreq	r3, [r1, #20]
 8004bd2:	600f      	str	r7, [r1, #0]
 8004bd4:	bf18      	it	ne
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	eba6 0807 	sub.w	r8, r6, r7
 8004bdc:	608b      	str	r3, [r1, #8]
 8004bde:	f1b8 0f00 	cmp.w	r8, #0
 8004be2:	dd9c      	ble.n	8004b1e <__sflush_r+0x1a>
 8004be4:	6a21      	ldr	r1, [r4, #32]
 8004be6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004be8:	4643      	mov	r3, r8
 8004bea:	463a      	mov	r2, r7
 8004bec:	4628      	mov	r0, r5
 8004bee:	47b0      	blx	r6
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	dc06      	bgt.n	8004c02 <__sflush_r+0xfe>
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	e78e      	b.n	8004b20 <__sflush_r+0x1c>
 8004c02:	4407      	add	r7, r0
 8004c04:	eba8 0800 	sub.w	r8, r8, r0
 8004c08:	e7e9      	b.n	8004bde <__sflush_r+0xda>
 8004c0a:	bf00      	nop
 8004c0c:	dfbffffe 	.word	0xdfbffffe

08004c10 <_fflush_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	690b      	ldr	r3, [r1, #16]
 8004c14:	4605      	mov	r5, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	b913      	cbnz	r3, 8004c20 <_fflush_r+0x10>
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	b118      	cbz	r0, 8004c2a <_fflush_r+0x1a>
 8004c22:	6a03      	ldr	r3, [r0, #32]
 8004c24:	b90b      	cbnz	r3, 8004c2a <_fflush_r+0x1a>
 8004c26:	f7ff f9a9 	bl	8003f7c <__sinit>
 8004c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f3      	beq.n	8004c1a <_fflush_r+0xa>
 8004c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c34:	07d0      	lsls	r0, r2, #31
 8004c36:	d404      	bmi.n	8004c42 <_fflush_r+0x32>
 8004c38:	0599      	lsls	r1, r3, #22
 8004c3a:	d402      	bmi.n	8004c42 <_fflush_r+0x32>
 8004c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3e:	f7ff fb92 	bl	8004366 <__retarget_lock_acquire_recursive>
 8004c42:	4628      	mov	r0, r5
 8004c44:	4621      	mov	r1, r4
 8004c46:	f7ff ff5d 	bl	8004b04 <__sflush_r>
 8004c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c4c:	07da      	lsls	r2, r3, #31
 8004c4e:	4605      	mov	r5, r0
 8004c50:	d4e4      	bmi.n	8004c1c <_fflush_r+0xc>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	059b      	lsls	r3, r3, #22
 8004c56:	d4e1      	bmi.n	8004c1c <_fflush_r+0xc>
 8004c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c5a:	f7ff fb85 	bl	8004368 <__retarget_lock_release_recursive>
 8004c5e:	e7dd      	b.n	8004c1c <_fflush_r+0xc>

08004c60 <__swhatbuf_r>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460c      	mov	r4, r1
 8004c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c68:	2900      	cmp	r1, #0
 8004c6a:	b096      	sub	sp, #88	; 0x58
 8004c6c:	4615      	mov	r5, r2
 8004c6e:	461e      	mov	r6, r3
 8004c70:	da0d      	bge.n	8004c8e <__swhatbuf_r+0x2e>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	bf0c      	ite	eq
 8004c7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004c82:	2340      	movne	r3, #64	; 0x40
 8004c84:	2000      	movs	r0, #0
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	b016      	add	sp, #88	; 0x58
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	466a      	mov	r2, sp
 8004c90:	f000 f848 	bl	8004d24 <_fstat_r>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	dbec      	blt.n	8004c72 <__swhatbuf_r+0x12>
 8004c98:	9901      	ldr	r1, [sp, #4]
 8004c9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004c9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ca2:	4259      	negs	r1, r3
 8004ca4:	4159      	adcs	r1, r3
 8004ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004caa:	e7eb      	b.n	8004c84 <__swhatbuf_r+0x24>

08004cac <__smakebuf_r>:
 8004cac:	898b      	ldrh	r3, [r1, #12]
 8004cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cb0:	079d      	lsls	r5, r3, #30
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460c      	mov	r4, r1
 8004cb6:	d507      	bpl.n	8004cc8 <__smakebuf_r+0x1c>
 8004cb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	6163      	str	r3, [r4, #20]
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	ab01      	add	r3, sp, #4
 8004cca:	466a      	mov	r2, sp
 8004ccc:	f7ff ffc8 	bl	8004c60 <__swhatbuf_r>
 8004cd0:	9900      	ldr	r1, [sp, #0]
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f7ff fbb5 	bl	8004444 <_malloc_r>
 8004cda:	b948      	cbnz	r0, 8004cf0 <__smakebuf_r+0x44>
 8004cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce0:	059a      	lsls	r2, r3, #22
 8004ce2:	d4ef      	bmi.n	8004cc4 <__smakebuf_r+0x18>
 8004ce4:	f023 0303 	bic.w	r3, r3, #3
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	81a3      	strh	r3, [r4, #12]
 8004cee:	e7e3      	b.n	8004cb8 <__smakebuf_r+0xc>
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	6020      	str	r0, [r4, #0]
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	81a3      	strh	r3, [r4, #12]
 8004cfa:	9b00      	ldr	r3, [sp, #0]
 8004cfc:	6163      	str	r3, [r4, #20]
 8004cfe:	9b01      	ldr	r3, [sp, #4]
 8004d00:	6120      	str	r0, [r4, #16]
 8004d02:	b15b      	cbz	r3, 8004d1c <__smakebuf_r+0x70>
 8004d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f000 f81d 	bl	8004d48 <_isatty_r>
 8004d0e:	b128      	cbz	r0, 8004d1c <__smakebuf_r+0x70>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	431d      	orrs	r5, r3
 8004d20:	81a5      	strh	r5, [r4, #12]
 8004d22:	e7cf      	b.n	8004cc4 <__smakebuf_r+0x18>

08004d24 <_fstat_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d07      	ldr	r5, [pc, #28]	; (8004d44 <_fstat_r+0x20>)
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	f7fc fc9a 	bl	800166a <_fstat>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d102      	bne.n	8004d40 <_fstat_r+0x1c>
 8004d3a:	682b      	ldr	r3, [r5, #0]
 8004d3c:	b103      	cbz	r3, 8004d40 <_fstat_r+0x1c>
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	bd38      	pop	{r3, r4, r5, pc}
 8004d42:	bf00      	nop
 8004d44:	2000034c 	.word	0x2000034c

08004d48 <_isatty_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4d06      	ldr	r5, [pc, #24]	; (8004d64 <_isatty_r+0x1c>)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	f7fc fc99 	bl	800168a <_isatty>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_isatty_r+0x1a>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_isatty_r+0x1a>
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	2000034c 	.word	0x2000034c

08004d68 <_sbrk_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4d06      	ldr	r5, [pc, #24]	; (8004d84 <_sbrk_r+0x1c>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f7fc fca2 	bl	80016bc <_sbrk>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_sbrk_r+0x1a>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_sbrk_r+0x1a>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	2000034c 	.word	0x2000034c

08004d88 <_init>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	bf00      	nop
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr

08004d94 <_fini>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	bf00      	nop
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr
