
3wheelomniregister.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d98  08003d98  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da0  08003da0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000007c  08003e24  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003e24  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000879b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001796  00000000  00000000  0002888a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b8  00000000  00000000  0002a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022009  00000000  00000000  0002ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1d1  00000000  00000000  0004cd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb1dc  00000000  00000000  00056f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002570  00000000  00000000  00122118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00124688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c60 	.word	0x08003c60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08003c60 	.word	0x08003c60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <PWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM (uint16_t CCR1LoadValue)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b08f      	sub	sp, #60	; 0x3c
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
	uint32_t *pAHB1ClkCtrlReg =   (uint32_t*)0x40023830; // address of AHB1 clock control register
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <PWM+0xac>)
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t *pAFRLPortAReg   =   (uint32_t*)0x40020020; // address of alternate function register of port A
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <PWM+0xb0>)
 80005bc:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t *pPortAModeReg   =   (uint32_t*)0x40020000; // address of port A mode register
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <PWM+0xb4>)
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t *pAPB1ClkCtrlReg =   (uint32_t*)0x40023840; // address of APB1 clock control register
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <PWM+0xb8>)
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t *pTimer2PsclrReg =   (uint32_t*)0x40000C28; // address of timer 5 pre-scalar register
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <PWM+0xbc>)
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t *pTimer2ArrReg   =   (uint32_t*)0x40000C2C; // address of timer 5 auto reload register
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <PWM+0xc0>)
 80005cc:	623b      	str	r3, [r7, #32]
    uint32_t *pTimer2CntReg   =   (uint32_t*)0x40000C24; // address of timer 5 counter register
 80005ce:	4b28      	ldr	r3, [pc, #160]	; (8000670 <PWM+0xc4>)
 80005d0:	61fb      	str	r3, [r7, #28]
    uint32_t *pTimer2CCMR1Reg =   (uint32_t*)0x40000C18; // address of timer 5 capture/compare register
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <PWM+0xc8>)
 80005d4:	61bb      	str	r3, [r7, #24]
	uint32_t *pTimer2CcerReg  =   (uint32_t*)0x40000C20; // address of timer 5 capture/compare enable register
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <PWM+0xcc>)
 80005d8:	617b      	str	r3, [r7, #20]
	uint32_t *pTimer2CCR1Reg  =   (uint32_t*)0x40000C34; // address of timer 5 capture/compare register
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <PWM+0xd0>)
 80005dc:	613b      	str	r3, [r7, #16]
	uint32_t *pTimer2CR1Reg   =   (uint32_t*)0x40000C00; // address of timer 5 control register 1
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <PWM+0xd4>)
 80005e0:	60fb      	str	r3, [r7, #12]


			*pAHB1ClkCtrlReg |= 0x1;        // port A clock enable
 80005e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f043 0201 	orr.w	r2, r3, #1
 80005ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ec:	601a      	str	r2, [r3, #0]
		    *pAFRLPortAReg   |= 0x00000002; // alternate function of Timer 5 enabled
 80005ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f043 0202 	orr.w	r2, r3, #2
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	601a      	str	r2, [r3, #0]
		    *pPortAModeReg   &= 0xFFFFFFFC;
 80005fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f023 0203 	bic.w	r2, r3, #3
 8000602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000604:	601a      	str	r2, [r3, #0]
		    *pPortAModeReg   |= 0x00000002; // port A Pin 0 configured for 'Alternate function'
 8000606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f043 0202 	orr.w	r2, r3, #2
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	601a      	str	r2, [r3, #0]


		    *pAPB1ClkCtrlReg |= 0x8;           // timer 5 clock enable
 8000612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f043 0208 	orr.w	r2, r3, #8
 800061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061c:	601a      	str	r2, [r3, #0]
		    *pTimer2PsclrReg = 10 - 1;         // pre-scalar value
 800061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000620:	2209      	movs	r2, #9
 8000622:	601a      	str	r2, [r3, #0]
		    *pTimer2ArrReg   = 26667 - 1 ;     // calculated auto reload value (60Hz PWM frequency)
 8000624:	6a3b      	ldr	r3, [r7, #32]
 8000626:	f646 022a 	movw	r2, #26666	; 0x682a
 800062a:	601a      	str	r2, [r3, #0]
		    *pTimer2CntReg   = 0;              // counter initialized to 0
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
		    *pTimer2CCMR1Reg = 0x0060;         // output Compare mode 1 enabled in Timer 5 Channel 1
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	2260      	movs	r2, #96	; 0x60
 8000636:	601a      	str	r2, [r3, #0]
		    *pTimer2CcerReg  = 1;              // configured as active low in Output compare mode
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
		    *pTimer2CCR1Reg  = CCR1LoadValue;  // duty cycle of PWM signal
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	601a      	str	r2, [r3, #0]
		    *pTimer2CR1Reg   = 1;              // counter enable
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2201      	movs	r2, #1
 8000648:	601a      	str	r2, [r3, #0]

}
 800064a:	bf00      	nop
 800064c:	373c      	adds	r7, #60	; 0x3c
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023830 	.word	0x40023830
 800065c:	40020020 	.word	0x40020020
 8000660:	40020000 	.word	0x40020000
 8000664:	40023840 	.word	0x40023840
 8000668:	40000c28 	.word	0x40000c28
 800066c:	40000c2c 	.word	0x40000c2c
 8000670:	40000c24 	.word	0x40000c24
 8000674:	40000c18 	.word	0x40000c18
 8000678:	40000c20 	.word	0x40000c20
 800067c:	40000c34 	.word	0x40000c34
 8000680:	40000c00 	.word	0x40000c00

08000684 <PWM_PA1_TIM2>:
void PWM_PA1_TIM2(uint16_t CCR1LoadValue) {
 8000684:	b480      	push	{r7}
 8000686:	b08d      	sub	sp, #52	; 0x34
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
    uint32_t *pAHB1ClkCtrlReg = (uint32_t*)0x40023830;  // RCC AHB1 Clock Enable Register
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <PWM_PA1_TIM2+0xc0>)
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t *pAPB1ClkCtrlReg = (uint32_t*)0x40023840;  // RCC APB1 Clock Enable Register
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <PWM_PA1_TIM2+0xc4>)
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t *pGPIOA_MODER    = (uint32_t*)0x40020000;  // GPIOA Mode Register
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <PWM_PA1_TIM2+0xc8>)
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t *pGPIOA_AFRL     = (uint32_t*)0x40020020;  // GPIOA AFRL (Alternate Function Low Register)
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <PWM_PA1_TIM2+0xcc>)
 800069c:	623b      	str	r3, [r7, #32]
    uint32_t *pTIM2_PSC       = (uint32_t*)0x40000028;  // TIM2 Prescaler Register
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <PWM_PA1_TIM2+0xd0>)
 80006a0:	61fb      	str	r3, [r7, #28]
    uint32_t *pTIM2_ARR       = (uint32_t*)0x4000002C;  // TIM2 Auto-Reload Register
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <PWM_PA1_TIM2+0xd4>)
 80006a4:	61bb      	str	r3, [r7, #24]
    uint32_t *pTIM2_CCR2      = (uint32_t*)0x40000038;  // TIM2 Capture/Compare Register 2
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <PWM_PA1_TIM2+0xd8>)
 80006a8:	617b      	str	r3, [r7, #20]
    uint32_t *pTIM2_CCMR1     = (uint32_t*)0x40000018;  // TIM2 Capture/Compare Mode Register 1
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <PWM_PA1_TIM2+0xdc>)
 80006ac:	613b      	str	r3, [r7, #16]
    uint32_t *pTIM2_CCER      = (uint32_t*)0x40000020;  // TIM2 Capture/Compare Enable Register
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <PWM_PA1_TIM2+0xe0>)
 80006b0:	60fb      	str	r3, [r7, #12]
    uint32_t *pTIM2_CR1       = (uint32_t*)0x40000000;  // TIM2 Control Register 1
 80006b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b6:	60bb      	str	r3, [r7, #8]

    // 1. Enable GPIOA and TIM2 clocks
    *pAHB1ClkCtrlReg |= (1 << 0);  // GPIOA clock enable
 80006b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f043 0201 	orr.w	r2, r3, #1
 80006c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c2:	601a      	str	r2, [r3, #0]
    *pAPB1ClkCtrlReg |= (1 << 0);  // TIM2 clock enable
 80006c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f043 0201 	orr.w	r2, r3, #1
 80006cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ce:	601a      	str	r2, [r3, #0]

    // 2. Set PA1 to alternate function mode (MODERy[1:0] = 10)
    *pGPIOA_MODER &= ~(0x3 << (1 * 2));  // Clear mode bits for PA1
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f023 020c 	bic.w	r2, r3, #12
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	601a      	str	r2, [r3, #0]
    *pGPIOA_MODER |=  (0x2 << (1 * 2));  // Set PA1 to alternate function mode
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f043 0208 	orr.w	r2, r3, #8
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	601a      	str	r2, [r3, #0]

    // 3. Configure PA1 for AF1 (TIM2_CH2)
    *pGPIOA_AFRL &= ~(0xF << (1 * 4));   // Clear AFRL bits for PA1
 80006e8:	6a3b      	ldr	r3, [r7, #32]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	601a      	str	r2, [r3, #0]
    *pGPIOA_AFRL |=  (0x1 << (1 * 4));   // Set AF1 for PA1
 80006f4:	6a3b      	ldr	r3, [r7, #32]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f043 0210 	orr.w	r2, r3, #16
 80006fc:	6a3b      	ldr	r3, [r7, #32]
 80006fe:	601a      	str	r2, [r3, #0]

    // 4. Configure TIM2
    *pTIM2_PSC = 10 - 1;                 // Set prescaler value
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	2209      	movs	r2, #9
 8000704:	601a      	str	r2, [r3, #0]
    *pTIM2_ARR = 26667 - 1;              // Set auto-reload value for 60Hz
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	f646 022a 	movw	r2, #26666	; 0x682a
 800070c:	601a      	str	r2, [r3, #0]
    *pTIM2_CCR2 = CCR1LoadValue;         // Set duty cycle
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	601a      	str	r2, [r3, #0]
    *pTIM2_CCMR1 |= (0x6 << 12);         // Set PWM mode 1 on channel 2
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	601a      	str	r2, [r3, #0]
    *pTIM2_CCER |= (1 << 4);             // Enable capture/compare for channel 2
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f043 0210 	orr.w	r2, r3, #16
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	601a      	str	r2, [r3, #0]
    *pTIM2_CR1 |= (1 << 0);              // Enable TIM2
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f043 0201 	orr.w	r2, r3, #1
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	3734      	adds	r7, #52	; 0x34
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	40023830 	.word	0x40023830
 8000748:	40023840 	.word	0x40023840
 800074c:	40020000 	.word	0x40020000
 8000750:	40020020 	.word	0x40020020
 8000754:	40000028 	.word	0x40000028
 8000758:	4000002c 	.word	0x4000002c
 800075c:	40000038 	.word	0x40000038
 8000760:	40000018 	.word	0x40000018
 8000764:	40000020 	.word	0x40000020

08000768 <PWM_PA5_TIM8>:
void PWM_PA5_TIM8(uint16_t CCR1LoadValue) {
 8000768:	b480      	push	{r7}
 800076a:	b08d      	sub	sp, #52	; 0x34
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
    uint32_t *pAHB1ClkCtrlReg = (uint32_t*)0x40023830;  // RCC AHB1 Clock Enable Register
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <PWM_PA5_TIM8+0xc0>)
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t *pAPB2ClkCtrlReg = (uint32_t*)0x40023844;  // RCC APB2 Clock Enable Register
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <PWM_PA5_TIM8+0xc4>)
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t *pGPIOA_MODER    = (uint32_t*)0x40020000;  // GPIOA Mode Register
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <PWM_PA5_TIM8+0xc8>)
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t *pGPIOA_AFRL     = (uint32_t*)0x40020020;  // GPIOA AFRL (Alternate Function Low Register)
 800077e:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <PWM_PA5_TIM8+0xcc>)
 8000780:	623b      	str	r3, [r7, #32]
    uint32_t *pTIM8_PSC       = (uint32_t*)0x40010428;  // TIM8 Prescaler Register
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <PWM_PA5_TIM8+0xd0>)
 8000784:	61fb      	str	r3, [r7, #28]
    uint32_t *pTIM8_ARR       = (uint32_t*)0x4001042C;  // TIM8 Auto-Reload Register
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <PWM_PA5_TIM8+0xd4>)
 8000788:	61bb      	str	r3, [r7, #24]
    uint32_t *pTIM8_CCR1      = (uint32_t*)0x40010434;  // TIM8 Capture/Compare Register 1
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <PWM_PA5_TIM8+0xd8>)
 800078c:	617b      	str	r3, [r7, #20]
    uint32_t *pTIM8_CCMR1     = (uint32_t*)0x40010418;  // TIM8 Capture/Compare Mode Register 1
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <PWM_PA5_TIM8+0xdc>)
 8000790:	613b      	str	r3, [r7, #16]
    uint32_t *pTIM8_CCER      = (uint32_t*)0x40010420;  // TIM8 Capture/Compare Enable Register
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <PWM_PA5_TIM8+0xe0>)
 8000794:	60fb      	str	r3, [r7, #12]
    uint32_t *pTIM8_CR1       = (uint32_t*)0x40010400;  // TIM8 Control Register 1
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <PWM_PA5_TIM8+0xe4>)
 8000798:	60bb      	str	r3, [r7, #8]

    // 1. Enable GPIOA and TIM8 clocks
    *pAHB1ClkCtrlReg |= (1 << 0);  // GPIOA clock enable
 800079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f043 0201 	orr.w	r2, r3, #1
 80007a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a4:	601a      	str	r2, [r3, #0]
    *pAPB2ClkCtrlReg |= (1 << 1);  // TIM8 clock enable
 80007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f043 0202 	orr.w	r2, r3, #2
 80007ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b0:	601a      	str	r2, [r3, #0]

    // 2. Set PA5 to alternate function mode (MODERy[1:0] = 10)
    *pGPIOA_MODER &= ~(0x3 << (5 * 2));  // Clear mode bits for PA5
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	601a      	str	r2, [r3, #0]
    *pGPIOA_MODER |=  (0x2 << (5 * 2));  // Set PA5 to alternate function mode
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	601a      	str	r2, [r3, #0]

    // 3. Configure PA5 for AF3 (TIM8_CH1)
    *pGPIOA_AFRL &= ~(0xF << (5 * 4));   // Clear AFRL bits for PA5
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80007d2:	6a3b      	ldr	r3, [r7, #32]
 80007d4:	601a      	str	r2, [r3, #0]
    *pGPIOA_AFRL |=  (0x3 << (5 * 4));   // Set AF3 for PA5
 80007d6:	6a3b      	ldr	r3, [r7, #32]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 80007de:	6a3b      	ldr	r3, [r7, #32]
 80007e0:	601a      	str	r2, [r3, #0]

    // 4. Configure TIM8
    *pTIM8_PSC = 10 - 1;                 // Set prescaler value
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	2209      	movs	r2, #9
 80007e6:	601a      	str	r2, [r3, #0]
    *pTIM8_ARR = 26667 - 1;              // Set auto-reload value for 60Hz
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	f646 022a 	movw	r2, #26666	; 0x682a
 80007ee:	601a      	str	r2, [r3, #0]
    *pTIM8_CCR1 = CCR1LoadValue;         // Set duty cycle
 80007f0:	88fa      	ldrh	r2, [r7, #6]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	601a      	str	r2, [r3, #0]
    *pTIM8_CCMR1 |= (0x6 << 4);          // Set PWM mode 1 on channel 1
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	601a      	str	r2, [r3, #0]
    *pTIM8_CCER |= (1 << 0);             // Enable capture/compare for channel 1
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f043 0201 	orr.w	r2, r3, #1
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	601a      	str	r2, [r3, #0]
    *pTIM8_CR1 |= (1 << 0);              // Enable TIM8
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f043 0201 	orr.w	r2, r3, #1
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3734      	adds	r7, #52	; 0x34
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023830 	.word	0x40023830
 800082c:	40023844 	.word	0x40023844
 8000830:	40020000 	.word	0x40020000
 8000834:	40020020 	.word	0x40020020
 8000838:	40010428 	.word	0x40010428
 800083c:	4001042c 	.word	0x4001042c
 8000840:	40010434 	.word	0x40010434
 8000844:	40010418 	.word	0x40010418
 8000848:	40010420 	.word	0x40010420
 800084c:	40010400 	.word	0x40010400

08000850 <map>:
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	603b      	str	r3, [r7, #0]
return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	69b9      	ldr	r1, [r7, #24]
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	1a8a      	subs	r2, r1, r2
 800086a:	fb03 f202 	mul.w	r2, r3, r2
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1acb      	subs	r3, r1, r3
 8000874:	fb92 f2f3 	sdiv	r2, r2, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	4413      	add	r3, r2
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f000 fdd5 	bl	800143c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000892:	f000 fb97 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000896:	f000 fc1f 	bl	80010d8 <MX_GPIO_Init>
  MX_UART4_Init();
 800089a:	f000 fbf3 	bl	8001084 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive(&huart4, rxbuff, 64,1000);
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	2240      	movs	r2, #64	; 0x40
 80008a4:	4976      	ldr	r1, [pc, #472]	; (8000a80 <main+0x1f8>)
 80008a6:	4877      	ldr	r0, [pc, #476]	; (8000a84 <main+0x1fc>)
 80008a8:	f001 fe80 	bl	80025ac <HAL_UART_Receive>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_StatusTypeDef status;

		 	 	   status=HAL_UART_Receive(&huart4, rxbuff,64,1000);
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	4973      	ldr	r1, [pc, #460]	; (8000a80 <main+0x1f8>)
 80008b4:	4873      	ldr	r0, [pc, #460]	; (8000a84 <main+0x1fc>)
 80008b6:	f001 fe79 	bl	80025ac <HAL_UART_Receive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]



		 	 	   if (status == HAL_OK)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	f040 8167 	bne.w	8000b94 <main+0x30c>

		 	 	   // Convert the received bytes to signed integers



		 	 	   lx = (rxbuff[1] & 0x80) ? (int32_t)rxbuff[1] - 256 : (int32_t)rxbuff[1];
 80008c6:	4b6e      	ldr	r3, [pc, #440]	; (8000a80 <main+0x1f8>)
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	da04      	bge.n	80008da <main+0x52>
 80008d0:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <main+0x1f8>)
 80008d2:	785b      	ldrb	r3, [r3, #1]
 80008d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008d8:	e001      	b.n	80008de <main+0x56>
 80008da:	4b69      	ldr	r3, [pc, #420]	; (8000a80 <main+0x1f8>)
 80008dc:	785b      	ldrb	r3, [r3, #1]
 80008de:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <main+0x200>)
 80008e0:	6013      	str	r3, [r2, #0]

		 	 	   ly = (rxbuff[2] & 0x80) ? (int32_t)rxbuff[2] - 256 : (int32_t)rxbuff[2];
 80008e2:	4b67      	ldr	r3, [pc, #412]	; (8000a80 <main+0x1f8>)
 80008e4:	789b      	ldrb	r3, [r3, #2]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da04      	bge.n	80008f6 <main+0x6e>
 80008ec:	4b64      	ldr	r3, [pc, #400]	; (8000a80 <main+0x1f8>)
 80008ee:	789b      	ldrb	r3, [r3, #2]
 80008f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008f4:	e001      	b.n	80008fa <main+0x72>
 80008f6:	4b62      	ldr	r3, [pc, #392]	; (8000a80 <main+0x1f8>)
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	4a64      	ldr	r2, [pc, #400]	; (8000a8c <main+0x204>)
 80008fc:	6013      	str	r3, [r2, #0]

		 	 	   rx = (rxbuff[3] & 0x80) ? (int32_t)rxbuff[3] - 256 : (int32_t)rxbuff[3];
 80008fe:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <main+0x1f8>)
 8000900:	78db      	ldrb	r3, [r3, #3]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	da04      	bge.n	8000912 <main+0x8a>
 8000908:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <main+0x1f8>)
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000910:	e001      	b.n	8000916 <main+0x8e>
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <main+0x1f8>)
 8000914:	78db      	ldrb	r3, [r3, #3]
 8000916:	4a5e      	ldr	r2, [pc, #376]	; (8000a90 <main+0x208>)
 8000918:	6013      	str	r3, [r2, #0]

		 	 	   ry = (rxbuff[4] & 0x80) ? (int32_t)rxbuff[4] - 256 : (int32_t)rxbuff[4];
 800091a:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <main+0x1f8>)
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	b25b      	sxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	da04      	bge.n	800092e <main+0xa6>
 8000924:	4b56      	ldr	r3, [pc, #344]	; (8000a80 <main+0x1f8>)
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800092c:	e001      	b.n	8000932 <main+0xaa>
 800092e:	4b54      	ldr	r3, [pc, #336]	; (8000a80 <main+0x1f8>)
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	4a58      	ldr	r2, [pc, #352]	; (8000a94 <main+0x20c>)
 8000934:	6013      	str	r3, [r2, #0]



		 	 	   cro= (rxbuff[5] & 0x80) ? (int32_t)rxbuff[5] - 256 : (int32_t)rxbuff[5];
 8000936:	4b52      	ldr	r3, [pc, #328]	; (8000a80 <main+0x1f8>)
 8000938:	795b      	ldrb	r3, [r3, #5]
 800093a:	b25b      	sxtb	r3, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	da04      	bge.n	800094a <main+0xc2>
 8000940:	4b4f      	ldr	r3, [pc, #316]	; (8000a80 <main+0x1f8>)
 8000942:	795b      	ldrb	r3, [r3, #5]
 8000944:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000948:	e001      	b.n	800094e <main+0xc6>
 800094a:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <main+0x1f8>)
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <main+0x210>)
 8000950:	6013      	str	r3, [r2, #0]

		 	 	   squ= (rxbuff[6] & 0x80) ? (int32_t)rxbuff[6] - 256 : (int32_t)rxbuff[6];
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <main+0x1f8>)
 8000954:	799b      	ldrb	r3, [r3, #6]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	da04      	bge.n	8000966 <main+0xde>
 800095c:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <main+0x1f8>)
 800095e:	799b      	ldrb	r3, [r3, #6]
 8000960:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000964:	e001      	b.n	800096a <main+0xe2>
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <main+0x1f8>)
 8000968:	799b      	ldrb	r3, [r3, #6]
 800096a:	4a4c      	ldr	r2, [pc, #304]	; (8000a9c <main+0x214>)
 800096c:	6013      	str	r3, [r2, #0]

		 	 	   tri= (rxbuff[7] & 0x80) ? (int32_t)rxbuff[7] - 256 : (int32_t)rxbuff[7];
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <main+0x1f8>)
 8000970:	79db      	ldrb	r3, [r3, #7]
 8000972:	b25b      	sxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	da04      	bge.n	8000982 <main+0xfa>
 8000978:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <main+0x1f8>)
 800097a:	79db      	ldrb	r3, [r3, #7]
 800097c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000980:	e001      	b.n	8000986 <main+0xfe>
 8000982:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <main+0x1f8>)
 8000984:	79db      	ldrb	r3, [r3, #7]
 8000986:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <main+0x218>)
 8000988:	6013      	str	r3, [r2, #0]

		 	 	   cir= (rxbuff[8] & 0x80) ? (int32_t)rxbuff[8] - 256 : (int32_t)rxbuff[8];
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <main+0x1f8>)
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	da04      	bge.n	800099e <main+0x116>
 8000994:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <main+0x1f8>)
 8000996:	7a1b      	ldrb	r3, [r3, #8]
 8000998:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800099c:	e001      	b.n	80009a2 <main+0x11a>
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <main+0x1f8>)
 80009a0:	7a1b      	ldrb	r3, [r3, #8]
 80009a2:	4a40      	ldr	r2, [pc, #256]	; (8000aa4 <main+0x21c>)
 80009a4:	6013      	str	r3, [r2, #0]

		 	 	   up= (rxbuff[9] & 0x80) ? (int32_t)rxbuff[9] - 256 : (int32_t)rxbuff[9];
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <main+0x1f8>)
 80009a8:	7a5b      	ldrb	r3, [r3, #9]
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	da04      	bge.n	80009ba <main+0x132>
 80009b0:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <main+0x1f8>)
 80009b2:	7a5b      	ldrb	r3, [r3, #9]
 80009b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009b8:	e001      	b.n	80009be <main+0x136>
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <main+0x1f8>)
 80009bc:	7a5b      	ldrb	r3, [r3, #9]
 80009be:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <main+0x220>)
 80009c0:	6013      	str	r3, [r2, #0]

		 	 	   down= (rxbuff[10] & 0x80) ? (int32_t)rxbuff[10] - 256 : (int32_t)rxbuff[10];
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <main+0x1f8>)
 80009c4:	7a9b      	ldrb	r3, [r3, #10]
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	da04      	bge.n	80009d6 <main+0x14e>
 80009cc:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <main+0x1f8>)
 80009ce:	7a9b      	ldrb	r3, [r3, #10]
 80009d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009d4:	e001      	b.n	80009da <main+0x152>
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <main+0x1f8>)
 80009d8:	7a9b      	ldrb	r3, [r3, #10]
 80009da:	4a34      	ldr	r2, [pc, #208]	; (8000aac <main+0x224>)
 80009dc:	6013      	str	r3, [r2, #0]

		 	 	   left= (rxbuff[11] & 0x80) ? (int32_t)rxbuff[11] - 256 : (int32_t)rxbuff[11];
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <main+0x1f8>)
 80009e0:	7adb      	ldrb	r3, [r3, #11]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	da04      	bge.n	80009f2 <main+0x16a>
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <main+0x1f8>)
 80009ea:	7adb      	ldrb	r3, [r3, #11]
 80009ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009f0:	e001      	b.n	80009f6 <main+0x16e>
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <main+0x1f8>)
 80009f4:	7adb      	ldrb	r3, [r3, #11]
 80009f6:	4a2e      	ldr	r2, [pc, #184]	; (8000ab0 <main+0x228>)
 80009f8:	6013      	str	r3, [r2, #0]

		 	 	   right=(rxbuff[12] & 0x80) ? (int32_t)rxbuff[12] - 256 : (int32_t)rxbuff[12];
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <main+0x1f8>)
 80009fc:	7b1b      	ldrb	r3, [r3, #12]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	da04      	bge.n	8000a0e <main+0x186>
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <main+0x1f8>)
 8000a06:	7b1b      	ldrb	r3, [r3, #12]
 8000a08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a0c:	e001      	b.n	8000a12 <main+0x18a>
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <main+0x1f8>)
 8000a10:	7b1b      	ldrb	r3, [r3, #12]
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <main+0x22c>)
 8000a14:	6013      	str	r3, [r2, #0]

		 	 	   ll1= (rxbuff[13] & 0x80) ? (int32_t)rxbuff[13] - 256 : (int32_t)rxbuff[13];
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <main+0x1f8>)
 8000a18:	7b5b      	ldrb	r3, [r3, #13]
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da04      	bge.n	8000a2a <main+0x1a2>
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <main+0x1f8>)
 8000a22:	7b5b      	ldrb	r3, [r3, #13]
 8000a24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a28:	e001      	b.n	8000a2e <main+0x1a6>
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <main+0x1f8>)
 8000a2c:	7b5b      	ldrb	r3, [r3, #13]
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <main+0x230>)
 8000a30:	6013      	str	r3, [r2, #0]

		 	 	   ll2= (rxbuff[14] & 0x80) ? (int32_t)rxbuff[14] - 256 : (int32_t)rxbuff[14];
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <main+0x1f8>)
 8000a34:	7b9b      	ldrb	r3, [r3, #14]
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da04      	bge.n	8000a46 <main+0x1be>
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <main+0x1f8>)
 8000a3e:	7b9b      	ldrb	r3, [r3, #14]
 8000a40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a44:	e001      	b.n	8000a4a <main+0x1c2>
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <main+0x1f8>)
 8000a48:	7b9b      	ldrb	r3, [r3, #14]
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <main+0x234>)
 8000a4c:	6013      	str	r3, [r2, #0]

		 	 	   rr1= (rxbuff[15] & 0x80) ? (int32_t)rxbuff[15] - 256 : (int32_t)rxbuff[15];
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <main+0x1f8>)
 8000a50:	7bdb      	ldrb	r3, [r3, #15]
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da04      	bge.n	8000a62 <main+0x1da>
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <main+0x1f8>)
 8000a5a:	7bdb      	ldrb	r3, [r3, #15]
 8000a5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a60:	e001      	b.n	8000a66 <main+0x1de>
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <main+0x1f8>)
 8000a64:	7bdb      	ldrb	r3, [r3, #15]
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <main+0x238>)
 8000a68:	6013      	str	r3, [r2, #0]

		 	 	   rr2= (rxbuff[16] & 0x80) ? (int32_t)rxbuff[16] - 256 : (int32_t)rxbuff[16];
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <main+0x1f8>)
 8000a6c:	7c1b      	ldrb	r3, [r3, #16]
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da27      	bge.n	8000ac4 <main+0x23c>
 8000a74:	4b02      	ldr	r3, [pc, #8]	; (8000a80 <main+0x1f8>)
 8000a76:	7c1b      	ldrb	r3, [r3, #16]
 8000a78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a7c:	e024      	b.n	8000ac8 <main+0x240>
 8000a7e:	bf00      	nop
 8000a80:	20000098 	.word	0x20000098
 8000a84:	200000e8 	.word	0x200000e8
 8000a88:	200000a8 	.word	0x200000a8
 8000a8c:	200000ac 	.word	0x200000ac
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	200000b4 	.word	0x200000b4
 8000a98:	200000b8 	.word	0x200000b8
 8000a9c:	200000bc 	.word	0x200000bc
 8000aa0:	200000c0 	.word	0x200000c0
 8000aa4:	200000c4 	.word	0x200000c4
 8000aa8:	200000c8 	.word	0x200000c8
 8000aac:	200000cc 	.word	0x200000cc
 8000ab0:	200000d0 	.word	0x200000d0
 8000ab4:	200000d4 	.word	0x200000d4
 8000ab8:	200000d8 	.word	0x200000d8
 8000abc:	200000e0 	.word	0x200000e0
 8000ac0:	200000dc 	.word	0x200000dc
 8000ac4:	4b9b      	ldr	r3, [pc, #620]	; (8000d34 <main+0x4ac>)
 8000ac6:	7c1b      	ldrb	r3, [r3, #16]
 8000ac8:	4a9b      	ldr	r2, [pc, #620]	; (8000d38 <main+0x4b0>)
 8000aca:	6013      	str	r3, [r2, #0]



		 	 	   // Print the received values

		 	 	   printf("Received Integers:\n");
 8000acc:	489b      	ldr	r0, [pc, #620]	; (8000d3c <main+0x4b4>)
 8000ace:	f002 fa5d 	bl	8002f8c <puts>

		 	 	   printf("lx: %ld\n", lx);
 8000ad2:	4b9b      	ldr	r3, [pc, #620]	; (8000d40 <main+0x4b8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	489a      	ldr	r0, [pc, #616]	; (8000d44 <main+0x4bc>)
 8000ada:	f002 f9f1 	bl	8002ec0 <iprintf>

		 	 	   printf("ly: %ld\n", ly);
 8000ade:	4b9a      	ldr	r3, [pc, #616]	; (8000d48 <main+0x4c0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4899      	ldr	r0, [pc, #612]	; (8000d4c <main+0x4c4>)
 8000ae6:	f002 f9eb 	bl	8002ec0 <iprintf>

		 	 	   printf("rx: %ld\n", rx);
 8000aea:	4b99      	ldr	r3, [pc, #612]	; (8000d50 <main+0x4c8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4898      	ldr	r0, [pc, #608]	; (8000d54 <main+0x4cc>)
 8000af2:	f002 f9e5 	bl	8002ec0 <iprintf>

		 	 	   printf("ry: %ld\n", ry);
 8000af6:	4b98      	ldr	r3, [pc, #608]	; (8000d58 <main+0x4d0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4897      	ldr	r0, [pc, #604]	; (8000d5c <main+0x4d4>)
 8000afe:	f002 f9df 	bl	8002ec0 <iprintf>



		 	 	   printf("cro: %ld\n", cro);
 8000b02:	4b97      	ldr	r3, [pc, #604]	; (8000d60 <main+0x4d8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4896      	ldr	r0, [pc, #600]	; (8000d64 <main+0x4dc>)
 8000b0a:	f002 f9d9 	bl	8002ec0 <iprintf>

		 	 	   printf("squ: %ld\n", squ);
 8000b0e:	4b96      	ldr	r3, [pc, #600]	; (8000d68 <main+0x4e0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4895      	ldr	r0, [pc, #596]	; (8000d6c <main+0x4e4>)
 8000b16:	f002 f9d3 	bl	8002ec0 <iprintf>

		 	 	   printf("tri: %ld\n", tri);
 8000b1a:	4b95      	ldr	r3, [pc, #596]	; (8000d70 <main+0x4e8>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4894      	ldr	r0, [pc, #592]	; (8000d74 <main+0x4ec>)
 8000b22:	f002 f9cd 	bl	8002ec0 <iprintf>

		 	 	   printf("cir: %ld\n", cir);
 8000b26:	4b94      	ldr	r3, [pc, #592]	; (8000d78 <main+0x4f0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4893      	ldr	r0, [pc, #588]	; (8000d7c <main+0x4f4>)
 8000b2e:	f002 f9c7 	bl	8002ec0 <iprintf>



		 	 	   printf("up: %ld\n", up);
 8000b32:	4b93      	ldr	r3, [pc, #588]	; (8000d80 <main+0x4f8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4892      	ldr	r0, [pc, #584]	; (8000d84 <main+0x4fc>)
 8000b3a:	f002 f9c1 	bl	8002ec0 <iprintf>

		 	 	   printf("down: %ld\n", down);
 8000b3e:	4b92      	ldr	r3, [pc, #584]	; (8000d88 <main+0x500>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	4891      	ldr	r0, [pc, #580]	; (8000d8c <main+0x504>)
 8000b46:	f002 f9bb 	bl	8002ec0 <iprintf>

		 	 	   printf("left: %ld\n", left);
 8000b4a:	4b91      	ldr	r3, [pc, #580]	; (8000d90 <main+0x508>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4890      	ldr	r0, [pc, #576]	; (8000d94 <main+0x50c>)
 8000b52:	f002 f9b5 	bl	8002ec0 <iprintf>

		 	 	   printf("right: %ld\n", right);
 8000b56:	4b90      	ldr	r3, [pc, #576]	; (8000d98 <main+0x510>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	488f      	ldr	r0, [pc, #572]	; (8000d9c <main+0x514>)
 8000b5e:	f002 f9af 	bl	8002ec0 <iprintf>



		 	 	   printf("ll1: %ld\n", ll1);
 8000b62:	4b8f      	ldr	r3, [pc, #572]	; (8000da0 <main+0x518>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4619      	mov	r1, r3
 8000b68:	488e      	ldr	r0, [pc, #568]	; (8000da4 <main+0x51c>)
 8000b6a:	f002 f9a9 	bl	8002ec0 <iprintf>

		 	 	   printf("ll2: %ld\n", ll2);
 8000b6e:	4b8e      	ldr	r3, [pc, #568]	; (8000da8 <main+0x520>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4619      	mov	r1, r3
 8000b74:	488d      	ldr	r0, [pc, #564]	; (8000dac <main+0x524>)
 8000b76:	f002 f9a3 	bl	8002ec0 <iprintf>

		 	 	   printf("rr1: %ld\n", rr1);
 8000b7a:	4b8d      	ldr	r3, [pc, #564]	; (8000db0 <main+0x528>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	488c      	ldr	r0, [pc, #560]	; (8000db4 <main+0x52c>)
 8000b82:	f002 f99d 	bl	8002ec0 <iprintf>

		 	 	   printf("rr2: %ld\n", rr2);
 8000b86:	4b6c      	ldr	r3, [pc, #432]	; (8000d38 <main+0x4b0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	488a      	ldr	r0, [pc, #552]	; (8000db8 <main+0x530>)
 8000b8e:	f002 f997 	bl	8002ec0 <iprintf>
 8000b92:	e02f      	b.n	8000bf4 <main+0x36c>

		 	 	   }

		 	 	   else{

		 	 	   ry = 0;
 8000b94:	4b70      	ldr	r3, [pc, #448]	; (8000d58 <main+0x4d0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]

		 	 	   rx = 0;
 8000b9a:	4b6d      	ldr	r3, [pc, #436]	; (8000d50 <main+0x4c8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]

		 	 	   lx = 0;
 8000ba0:	4b67      	ldr	r3, [pc, #412]	; (8000d40 <main+0x4b8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]

		 	 	   ly = 0;
 8000ba6:	4b68      	ldr	r3, [pc, #416]	; (8000d48 <main+0x4c0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]

		 	 	   cro = 0;
 8000bac:	4b6c      	ldr	r3, [pc, #432]	; (8000d60 <main+0x4d8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]

		 	 	   squ = 0;
 8000bb2:	4b6d      	ldr	r3, [pc, #436]	; (8000d68 <main+0x4e0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]

		 	 	   tri = 0;
 8000bb8:	4b6d      	ldr	r3, [pc, #436]	; (8000d70 <main+0x4e8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]

		 	 	   cir = 0;
 8000bbe:	4b6e      	ldr	r3, [pc, #440]	; (8000d78 <main+0x4f0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]

		 	 	   up = 0;
 8000bc4:	4b6e      	ldr	r3, [pc, #440]	; (8000d80 <main+0x4f8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]

		 	 	   down = 0;
 8000bca:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <main+0x500>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]

		 	 	   left = 0;
 8000bd0:	4b6f      	ldr	r3, [pc, #444]	; (8000d90 <main+0x508>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]

		 	 	   right = 0;
 8000bd6:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <main+0x510>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]

		 	 	   ll1=0;
 8000bdc:	4b70      	ldr	r3, [pc, #448]	; (8000da0 <main+0x518>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]

		 	 	   ll2=0;
 8000be2:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <main+0x520>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]

		 	 	   rr1=0;
 8000be8:	4b71      	ldr	r3, [pc, #452]	; (8000db0 <main+0x528>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]

		 	 	   rr2=0;
 8000bee:	4b52      	ldr	r3, [pc, #328]	; (8000d38 <main+0x4b0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]



		 	 	   uint16_t dutycycle;

		 	 	  	dutycycle=0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	80bb      	strh	r3, [r7, #4]



		 	 	  	//motors stop

		 	 	  	if(ly>=Buff2 && ly<=Buff1 && lx>=Buff2 && lx<=Buff1 && rx>=Buff2 && rx<=Buff1){
 8000bf8:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <main+0x4c0>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b6f      	ldr	r3, [pc, #444]	; (8000dbc <main+0x534>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	db2c      	blt.n	8000c5e <main+0x3d6>
 8000c04:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <main+0x4c0>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <main+0x538>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dc26      	bgt.n	8000c5e <main+0x3d6>
 8000c10:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <main+0x4b8>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b69      	ldr	r3, [pc, #420]	; (8000dbc <main+0x534>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	db20      	blt.n	8000c5e <main+0x3d6>
 8000c1c:	4b48      	ldr	r3, [pc, #288]	; (8000d40 <main+0x4b8>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <main+0x538>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dc1a      	bgt.n	8000c5e <main+0x3d6>
 8000c28:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <main+0x4c8>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <main+0x534>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	db14      	blt.n	8000c5e <main+0x3d6>
 8000c34:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <main+0x4c8>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b61      	ldr	r3, [pc, #388]	; (8000dc0 <main+0x538>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dc0e      	bgt.n	8000c5e <main+0x3d6>
		 	 //

		 	 //
		 	 	  	dutycycle=0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	80bb      	strh	r3, [r7, #4]
		 	 	  	PWM(dutycycle);
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fcb0 	bl	80005ac <PWM>
		 	 	  PWM_PA1_TIM2(dutycycle);
 8000c4c:	88bb      	ldrh	r3, [r7, #4]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fd18 	bl	8000684 <PWM_PA1_TIM2>
		 	 	  PWM_PA5_TIM8(dutycycle);
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fd86 	bl	8000768 <PWM_PA5_TIM8>
 8000c5c:	e19c      	b.n	8000f98 <main+0x710>
		 	 //
		 	 //	  	// else{
		 	 //
		 	 //	  	//forward
		 	 //
		 	 	  	else if( ly>=Buff1 && (lx<=BuffP && lx>=BuffN) )
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <main+0x4c0>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <main+0x538>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	db2e      	blt.n	8000cc8 <main+0x440>
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <main+0x4b8>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b55      	ldr	r3, [pc, #340]	; (8000dc4 <main+0x53c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dc28      	bgt.n	8000cc8 <main+0x440>
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <main+0x4b8>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <main+0x540>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	db22      	blt.n	8000cc8 <main+0x440>

		 	 	  	{

		 	 	  	dutycycle=map(ly,Buff1,127,0,fast);
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <main+0x4c0>)
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <main+0x538>)
 8000c88:	6819      	ldr	r1, [r3, #0]
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <main+0x544>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2300      	movs	r3, #0
 8000c92:	227f      	movs	r2, #127	; 0x7f
 8000c94:	f7ff fddc 	bl	8000850 <map>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	80bb      	strh	r3, [r7, #4]

		 	 		PWM(dutycycle);
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc84 	bl	80005ac <PWM>
		 	 			 	 	  PWM_PA1_TIM2(0);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fced 	bl	8000684 <PWM_PA1_TIM2>
		 	 			 	 	  PWM_PA5_TIM8(dutycycle);
 8000caa:	88bb      	ldrh	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd5b 	bl	8000768 <PWM_PA5_TIM8>





		 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4846      	ldr	r0, [pc, #280]	; (8000dd0 <main+0x548>)
 8000cb8:	f000 feac 	bl	8001a14 <HAL_GPIO_WritePin>

		 //	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);



		 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4843      	ldr	r0, [pc, #268]	; (8000dd0 <main+0x548>)
 8000cc2:	f000 fea7 	bl	8001a14 <HAL_GPIO_WritePin>
 8000cc6:	e167      	b.n	8000f98 <main+0x710>

		 	 	   }

		 	 	   // backward

		 	 	   else if(ly<=Buff2 && (lx<=BuffP && lx>=BuffN) )
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <main+0x4c0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <main+0x534>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dc7f      	bgt.n	8000dd4 <main+0x54c>
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <main+0x4b8>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <main+0x53c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dc79      	bgt.n	8000dd4 <main+0x54c>
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <main+0x4b8>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <main+0x540>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	db73      	blt.n	8000dd4 <main+0x54c>

		 	 	   {

		 	 		 dutycycle=map(ly,-128,Buff2,fast,0);
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <main+0x4c0>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <main+0x534>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <main+0x544>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	9100      	str	r1, [sp, #0]
 8000cfc:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000d00:	f7ff fda6 	bl	8000850 <map>
 8000d04:	4603      	mov	r3, r0
 8000d06:	80bb      	strh	r3, [r7, #4]





		 	 		PWM(dutycycle);
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fc4e 	bl	80005ac <PWM>
		 	 			 	 	  PWM_PA1_TIM2(0);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fcb7 	bl	8000684 <PWM_PA1_TIM2>
		 	 			 	 	  PWM_PA5_TIM8(dutycycle);
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fd25 	bl	8000768 <PWM_PA5_TIM8>
		 	 //	  //
		 	 //



		 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2101      	movs	r1, #1
 8000d22:	482b      	ldr	r0, [pc, #172]	; (8000dd0 <main+0x548>)
 8000d24:	f000 fe76 	bl	8001a14 <HAL_GPIO_WritePin>

		 //	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);



		 	 	   HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	4828      	ldr	r0, [pc, #160]	; (8000dd0 <main+0x548>)
 8000d2e:	f000 fe71 	bl	8001a14 <HAL_GPIO_WritePin>
 8000d32:	e131      	b.n	8000f98 <main+0x710>
 8000d34:	20000098 	.word	0x20000098
 8000d38:	200000e4 	.word	0x200000e4
 8000d3c:	08003c78 	.word	0x08003c78
 8000d40:	200000a8 	.word	0x200000a8
 8000d44:	08003c8c 	.word	0x08003c8c
 8000d48:	200000ac 	.word	0x200000ac
 8000d4c:	08003c98 	.word	0x08003c98
 8000d50:	200000b0 	.word	0x200000b0
 8000d54:	08003ca4 	.word	0x08003ca4
 8000d58:	200000b4 	.word	0x200000b4
 8000d5c:	08003cb0 	.word	0x08003cb0
 8000d60:	200000b8 	.word	0x200000b8
 8000d64:	08003cbc 	.word	0x08003cbc
 8000d68:	200000bc 	.word	0x200000bc
 8000d6c:	08003cc8 	.word	0x08003cc8
 8000d70:	200000c0 	.word	0x200000c0
 8000d74:	08003cd4 	.word	0x08003cd4
 8000d78:	200000c4 	.word	0x200000c4
 8000d7c:	08003ce0 	.word	0x08003ce0
 8000d80:	200000c8 	.word	0x200000c8
 8000d84:	08003cec 	.word	0x08003cec
 8000d88:	200000cc 	.word	0x200000cc
 8000d8c:	08003cf8 	.word	0x08003cf8
 8000d90:	200000d0 	.word	0x200000d0
 8000d94:	08003d04 	.word	0x08003d04
 8000d98:	200000d4 	.word	0x200000d4
 8000d9c:	08003d10 	.word	0x08003d10
 8000da0:	200000d8 	.word	0x200000d8
 8000da4:	08003d1c 	.word	0x08003d1c
 8000da8:	200000e0 	.word	0x200000e0
 8000dac:	08003d28 	.word	0x08003d28
 8000db0:	200000dc 	.word	0x200000dc
 8000db4:	08003d34 	.word	0x08003d34
 8000db8:	08003d40 	.word	0x08003d40
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	40020800 	.word	0x40020800

		 	 	   }

		 	 	   //	right

		 	 	   else if(lx>=Buff1 && (ly<=BuffP && ly>=BuffN))
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <main+0x714>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <main+0x718>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	db2e      	blt.n	8000e3e <main+0x5b6>
 8000de0:	4b70      	ldr	r3, [pc, #448]	; (8000fa4 <main+0x71c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b70      	ldr	r3, [pc, #448]	; (8000fa8 <main+0x720>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dc28      	bgt.n	8000e3e <main+0x5b6>
 8000dec:	4b6d      	ldr	r3, [pc, #436]	; (8000fa4 <main+0x71c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b6e      	ldr	r3, [pc, #440]	; (8000fac <main+0x724>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	db22      	blt.n	8000e3e <main+0x5b6>

		 	 	   {

		 	 	   dutycycle=map(lx,Buff1,127,0,fast);
 8000df8:	4b68      	ldr	r3, [pc, #416]	; (8000f9c <main+0x714>)
 8000dfa:	6818      	ldr	r0, [r3, #0]
 8000dfc:	4b68      	ldr	r3, [pc, #416]	; (8000fa0 <main+0x718>)
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <main+0x728>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2300      	movs	r3, #0
 8000e08:	227f      	movs	r2, #127	; 0x7f
 8000e0a:	f7ff fd21 	bl	8000850 <map>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80bb      	strh	r3, [r7, #4]

		 	 		PWM(dutycycle);
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fbc9 	bl	80005ac <PWM>
		 	 			 	 	  PWM_PA1_TIM2(dutycycle);
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc31 	bl	8000684 <PWM_PA1_TIM2>
		 	 			 	 	  PWM_PA5_TIM8(0);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fca0 	bl	8000768 <PWM_PA5_TIM8>





		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4861      	ldr	r0, [pc, #388]	; (8000fb4 <main+0x72c>)
 8000e2e:	f000 fdf1 	bl	8001a14 <HAL_GPIO_WritePin>

		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2102      	movs	r1, #2
 8000e36:	485f      	ldr	r0, [pc, #380]	; (8000fb4 <main+0x72c>)
 8000e38:	f000 fdec 	bl	8001a14 <HAL_GPIO_WritePin>
 8000e3c:	e0ac      	b.n	8000f98 <main+0x710>

		 	 	   }

		 	 	   // left

		 	 	   else if(lx<=Buff2 && (ly<=BuffP && ly>=BuffN) )
 8000e3e:	4b57      	ldr	r3, [pc, #348]	; (8000f9c <main+0x714>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <main+0x730>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dc2f      	bgt.n	8000eaa <main+0x622>
 8000e4a:	4b56      	ldr	r3, [pc, #344]	; (8000fa4 <main+0x71c>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <main+0x720>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dc29      	bgt.n	8000eaa <main+0x622>
 8000e56:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <main+0x71c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b54      	ldr	r3, [pc, #336]	; (8000fac <main+0x724>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	db23      	blt.n	8000eaa <main+0x622>

		 	 	   {

		 	 	   dutycycle=map(lx,-128,Buff2,fast,0);
 8000e62:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <main+0x714>)
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	4b54      	ldr	r3, [pc, #336]	; (8000fb8 <main+0x730>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <main+0x728>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2100      	movs	r1, #0
 8000e70:	9100      	str	r1, [sp, #0]
 8000e72:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000e76:	f7ff fceb 	bl	8000850 <map>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80bb      	strh	r3, [r7, #4]



		 	 		PWM(dutycycle);
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb93 	bl	80005ac <PWM>
		 	 			 	 	  PWM_PA1_TIM2(dutycycle);
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fbfb 	bl	8000684 <PWM_PA1_TIM2>
		 	 			 	 	  PWM_PA5_TIM8(0);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fc6a 	bl	8000768 <PWM_PA5_TIM8>



		 //	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);

		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	4846      	ldr	r0, [pc, #280]	; (8000fb4 <main+0x72c>)
 8000e9a:	f000 fdbb 	bl	8001a14 <HAL_GPIO_WritePin>



		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	4844      	ldr	r0, [pc, #272]	; (8000fb4 <main+0x72c>)
 8000ea4:	f000 fdb6 	bl	8001a14 <HAL_GPIO_WritePin>
 8000ea8:	e076      	b.n	8000f98 <main+0x710>

		 	 	   }

		 	 	   //clockwise

		 	 	   else if(rx>=Buff1 && (ry<=BuffP && ry>=BuffN) ){
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <main+0x734>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <main+0x718>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	db33      	blt.n	8000f1e <main+0x696>
 8000eb6:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <main+0x738>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <main+0x720>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	dc2d      	bgt.n	8000f1e <main+0x696>
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <main+0x738>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <main+0x724>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	db27      	blt.n	8000f1e <main+0x696>

		 	 	   dutycycle=map(rx,Buff1,127,0,100);
 8000ece:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <main+0x734>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <main+0x718>)
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	227f      	movs	r2, #127	; 0x7f
 8000ede:	f7ff fcb7 	bl	8000850 <map>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80bb      	strh	r3, [r7, #4]





		 	 		PWM(dutycycle);
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fb5f 	bl	80005ac <PWM>
		 	 			 	 	  PWM_PA1_TIM2(dutycycle);
 8000eee:	88bb      	ldrh	r3, [r7, #4]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fbc7 	bl	8000684 <PWM_PA1_TIM2>
		 	 			 	 	  PWM_PA5_TIM8(dutycycle);
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fc35 	bl	8000768 <PWM_PA5_TIM8>





		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2101      	movs	r1, #1
 8000f02:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <main+0x72c>)
 8000f04:	f000 fd86 	bl	8001a14 <HAL_GPIO_WritePin>

		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	4829      	ldr	r0, [pc, #164]	; (8000fb4 <main+0x72c>)
 8000f0e:	f000 fd81 	bl	8001a14 <HAL_GPIO_WritePin>



		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2108      	movs	r1, #8
 8000f16:	4827      	ldr	r0, [pc, #156]	; (8000fb4 <main+0x72c>)
 8000f18:	f000 fd7c 	bl	8001a14 <HAL_GPIO_WritePin>
 8000f1c:	e03c      	b.n	8000f98 <main+0x710>



		 	 	  // //anticlockwise

		 	 	   else if(rx<=Buff2 && (ry<=BuffP && ry>=BuffN) ){
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <main+0x734>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <main+0x730>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	f73f acc0 	bgt.w	80008ac <main+0x24>
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <main+0x738>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <main+0x720>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f73f acb9 	bgt.w	80008ac <main+0x24>
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <main+0x738>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <main+0x724>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	f6ff acb2 	blt.w	80008ac <main+0x24>

		 	 	   dutycycle=map(rx,-128,Buff2,100,0);
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <main+0x734>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <main+0x730>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2364      	movs	r3, #100	; 0x64
 8000f56:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8000f5a:	f7ff fc79 	bl	8000850 <map>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80bb      	strh	r3, [r7, #4]

		 	 		PWM(dutycycle);
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb21 	bl	80005ac <PWM>
		 	 			 	 	  PWM_PA1_TIM2(dutycycle);
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fb89 	bl	8000684 <PWM_PA1_TIM2>
		 	 			 	 	  PWM_PA5_TIM8(dutycycle);
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbf7 	bl	8000768 <PWM_PA5_TIM8>





		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <main+0x72c>)
 8000f80:	f000 fd48 	bl	8001a14 <HAL_GPIO_WritePin>

		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2102      	movs	r1, #2
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <main+0x72c>)
 8000f8a:	f000 fd43 	bl	8001a14 <HAL_GPIO_WritePin>



		 	 	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <main+0x72c>)
 8000f94:	f000 fd3e 	bl	8001a14 <HAL_GPIO_WritePin>
  {
 8000f98:	e488      	b.n	80008ac <main+0x24>
 8000f9a:	bf00      	nop
 8000f9c:	200000a8 	.word	0x200000a8
 8000fa0:	20000004 	.word	0x20000004
 8000fa4:	200000ac 	.word	0x200000ac
 8000fa8:	2000000c 	.word	0x2000000c
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200000b0 	.word	0x200000b0
 8000fc0:	200000b4 	.word	0x200000b4

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	2234      	movs	r2, #52	; 0x34
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 f8ba 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <SystemClock_Config+0xb8>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <SystemClock_Config+0xb8>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <SystemClock_Config+0xb8>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <SystemClock_Config+0xbc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <SystemClock_Config+0xbc>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <SystemClock_Config+0xbc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800102c:	2310      	movs	r3, #16
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4618      	mov	r0, r3
 800103a:	f000 ffc9 	bl	8001fd0 <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001044:	f000 f87a 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fcf0 	bl	8001a48 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800106e:	f000 f865 	bl	800113c <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	; 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_UART4_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_UART4_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_UART4_Init+0x4c>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_UART4_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_UART4_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_UART4_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_UART4_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_UART4_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_UART4_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_UART4_Init+0x4c>)
 80010bc:	f001 fa26 	bl	800250c <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010c6:	f000 f839 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000e8 	.word	0x200000e8
 80010d4:	40004c00 	.word	0x40004c00

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_GPIO_Init+0x5c>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	210e      	movs	r1, #14
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <MX_GPIO_Init+0x60>)
 800110e:	f000 fc81 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001112:	230e      	movs	r3, #14
 8001114:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_GPIO_Init+0x60>)
 8001128:	f000 fae0 	bl	80016ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40020800 	.word	0x40020800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <HAL_UART_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_UART_MspInit+0x88>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_UART_MspInit+0x88>)
 80011c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_UART_MspInit+0x88>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_UART_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_UART_MspInit+0x88>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_UART_MspInit+0x88>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001204:	2308      	movs	r3, #8
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_UART_MspInit+0x8c>)
 8001210:	f000 fa6c 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40004c00 	.word	0x40004c00
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f934 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e00a      	b.n	80012a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800128e:	f3af 8000 	nop.w
 8001292:	4601      	mov	r1, r0
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	60ba      	str	r2, [r7, #8]
 800129a:	b2ca      	uxtb	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf0      	blt.n	800128e <_read+0x12>
  }

  return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e009      	b.n	80012dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	60ba      	str	r2, [r7, #8]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf1      	blt.n	80012c8 <_write+0x12>
  }
  return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_close>:

int _close(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001316:	605a      	str	r2, [r3, #4]
  return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_isatty>:

int _isatty(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f001 ff2e 	bl	80031e8 <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20020000 	.word	0x20020000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	20000130 	.word	0x20000130
 80013c0:	20000288 	.word	0x20000288

080013c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001420 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013ec:	f7ff ffea 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013f2:	490d      	ldr	r1, [pc, #52]	; (8001428 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001408:	4c0a      	ldr	r4, [pc, #40]	; (8001434 <LoopFillZerobss+0x22>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001416:	f001 feed 	bl	80031f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f7ff fa35 	bl	8000888 <main>
  bx  lr    
 800141e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800142c:	08003da8 	.word	0x08003da8
  ldr r2, =_sbss
 8001430:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001434:	20000284 	.word	0x20000284

08001438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC_IRQHandler>
	...

0800143c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_Init+0x40>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_Init+0x40>)
 8001446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_Init+0x40>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_Init+0x40>)
 8001452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_Init+0x40>)
 800145e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001464:	2003      	movs	r0, #3
 8001466:	f000 f90d 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800146a:	200f      	movs	r0, #15
 800146c:	f000 f808 	bl	8001480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001470:	f7ff fe6a 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023c00 	.word	0x40023c00

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_InitTick+0x54>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_InitTick+0x58>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	fbb3 f3f1 	udiv	r3, r3, r1
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 f917 	bl	80016d2 <HAL_SYSTICK_Config>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00e      	b.n	80014cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b0f      	cmp	r3, #15
 80014b2:	d80a      	bhi.n	80014ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f000 f8ed 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014c0:	4a06      	ldr	r2, [pc, #24]	; (80014dc <HAL_InitTick+0x5c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000014 	.word	0x20000014
 80014d8:	2000001c 	.word	0x2000001c
 80014dc:	20000018 	.word	0x20000018

080014e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000001c 	.word	0x2000001c
 8001504:	20000134 	.word	0x20000134

08001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000134 	.word	0x20000134

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff47 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff5c 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffb0 	bl	8001640 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e165      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 8154 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d005      	beq.n	800173e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	2b02      	cmp	r3, #2
 800173c:	d130      	bne.n	80017a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d017      	beq.n	80017dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d123      	bne.n	8001830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80ae 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_GPIO_Init+0x300>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_GPIO_Init+0x300>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <HAL_GPIO_Init+0x300>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_GPIO_Init+0x304>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4f      	ldr	r2, [pc, #316]	; (80019f4 <HAL_GPIO_Init+0x308>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4e      	ldr	r2, [pc, #312]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x216>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4d      	ldr	r2, [pc, #308]	; (80019fc <HAL_GPIO_Init+0x310>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x212>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <HAL_GPIO_Init+0x314>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x20e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <HAL_GPIO_Init+0x318>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x20a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4a      	ldr	r2, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x31c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x206>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_GPIO_Init+0x320>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x202>
 80018ea:	2306      	movs	r3, #6
 80018ec:	e00c      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018ee:	2307      	movs	r3, #7
 80018f0:	e00a      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018f2:	2305      	movs	r3, #5
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x21c>
 8001906:	2300      	movs	r3, #0
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x304>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001926:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_GPIO_Init+0x324>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194a:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_GPIO_Init+0x324>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001950:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_GPIO_Init+0x324>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001974:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_GPIO_Init+0x324>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_GPIO_Init+0x324>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	f67f ae96 	bls.w	8001708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40021400 	.word	0x40021400
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0cc      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b68      	ldr	r3, [pc, #416]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d90c      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d044      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d119      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e06f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e067      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4934      	ldr	r1, [pc, #208]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b38:	f7ff fce6 	bl	8001508 <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7ff fce2 	bl	8001508 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e04f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d20c      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f855 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	490a      	ldr	r1, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1c8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fc46 	bl	8001480 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08003d4c 	.word	0x08003d4c
 8001c0c:	20000014 	.word	0x20000014
 8001c10:	20000018 	.word	0x20000018

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000014 	.word	0x20000014

08001c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c30:	f7ff fff0 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	0a9b      	lsrs	r3, r3, #10
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	4903      	ldr	r1, [pc, #12]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c42:	5ccb      	ldrb	r3, [r1, r3]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	08003d5c 	.word	0x08003d5c

08001c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c58:	f7ff ffdc 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0b5b      	lsrs	r3, r3, #13
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08003d5c 	.word	0x08003d5c

08001c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c80:	b0a6      	sub	sp, #152	; 0x98
 8001c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca2:	4bc8      	ldr	r3, [pc, #800]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	f200 817e 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x330>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001ced 	.word	0x08001ced
 8001cbc:	08001fad 	.word	0x08001fad
 8001cc0:	08001fad 	.word	0x08001fad
 8001cc4:	08001fad 	.word	0x08001fad
 8001cc8:	08001cf5 	.word	0x08001cf5
 8001ccc:	08001fad 	.word	0x08001fad
 8001cd0:	08001fad 	.word	0x08001fad
 8001cd4:	08001fad 	.word	0x08001fad
 8001cd8:	08001cfd 	.word	0x08001cfd
 8001cdc:	08001fad 	.word	0x08001fad
 8001ce0:	08001fad 	.word	0x08001fad
 8001ce4:	08001fad 	.word	0x08001fad
 8001ce8:	08001e67 	.word	0x08001e67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4bb6      	ldr	r3, [pc, #728]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001cf2:	e15f      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cf4:	4bb5      	ldr	r3, [pc, #724]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001cfa:	e15b      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cfc:	4bb1      	ldr	r3, [pc, #708]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d08:	4bae      	ldr	r3, [pc, #696]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d031      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d14:	4bab      	ldr	r3, [pc, #684]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d26:	663b      	str	r3, [r7, #96]	; 0x60
 8001d28:	2300      	movs	r3, #0
 8001d2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d2c:	4ba7      	ldr	r3, [pc, #668]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001d2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d32:	462a      	mov	r2, r5
 8001d34:	fb03 f202 	mul.w	r2, r3, r2
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	4aa2      	ldr	r2, [pc, #648]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001d44:	4621      	mov	r1, r4
 8001d46:	fba1 1202 	umull	r1, r2, r1, r2
 8001d4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001d50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d52:	4413      	add	r3, r2
 8001d54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d68:	f7fe faa2 	bl	80002b0 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d76:	e064      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	2200      	movs	r2, #0
 8001d80:	653b      	str	r3, [r7, #80]	; 0x50
 8001d82:	657a      	str	r2, [r7, #84]	; 0x54
 8001d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001d94:	4622      	mov	r2, r4
 8001d96:	462b      	mov	r3, r5
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	0159      	lsls	r1, r3, #5
 8001da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da6:	0150      	lsls	r0, r2, #5
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4621      	mov	r1, r4
 8001dae:	1a51      	subs	r1, r2, r1
 8001db0:	6139      	str	r1, [r7, #16]
 8001db2:	4629      	mov	r1, r5
 8001db4:	eb63 0301 	sbc.w	r3, r3, r1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dc6:	4659      	mov	r1, fp
 8001dc8:	018b      	lsls	r3, r1, #6
 8001dca:	4651      	mov	r1, sl
 8001dcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	018a      	lsls	r2, r1, #6
 8001dd4:	4651      	mov	r1, sl
 8001dd6:	ebb2 0801 	subs.w	r8, r2, r1
 8001dda:	4659      	mov	r1, fp
 8001ddc:	eb63 0901 	sbc.w	r9, r3, r1
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4699      	mov	r9, r3
 8001df8:	4623      	mov	r3, r4
 8001dfa:	eb18 0303 	adds.w	r3, r8, r3
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	462b      	mov	r3, r5
 8001e02:	eb49 0303 	adc.w	r3, r9, r3
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e14:	4629      	mov	r1, r5
 8001e16:	028b      	lsls	r3, r1, #10
 8001e18:	4621      	mov	r1, r4
 8001e1a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e1e:	4621      	mov	r1, r4
 8001e20:	028a      	lsls	r2, r1, #10
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8001e30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e34:	f7fe fa3c 	bl	80002b0 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e42:	4b60      	ldr	r3, [pc, #384]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0c1b      	lsrs	r3, r3, #16
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco / pllp;
 8001e54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e64:	e0a6      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e66:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02a      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	2200      	movs	r2, #0
 8001e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e90:	2100      	movs	r1, #0
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001e94:	fb03 f201 	mul.w	r2, r3, r1
 8001e98:	2300      	movs	r3, #0
 8001e9a:	fb00 f303 	mul.w	r3, r0, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a4a      	ldr	r2, [pc, #296]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001ea2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ea6:	677a      	str	r2, [r7, #116]	; 0x74
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	673a      	str	r2, [r7, #112]	; 0x70
 8001eac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001eae:	4413      	add	r3, r2
 8001eb0:	677b      	str	r3, [r7, #116]	; 0x74
 8001eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eba:	637a      	str	r2, [r7, #52]	; 0x34
 8001ebc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ec0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ec4:	f7fe f9f4 	bl	80002b0 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ed2:	e05b      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	2200      	movs	r2, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	464b      	mov	r3, r9
 8001ef4:	f04f 0000 	mov.w	r0, #0
 8001ef8:	f04f 0100 	mov.w	r1, #0
 8001efc:	0159      	lsls	r1, r3, #5
 8001efe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f02:	0150      	lsls	r0, r2, #5
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4641      	mov	r1, r8
 8001f0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f0e:	4649      	mov	r1, r9
 8001f10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f28:	ebb2 040a 	subs.w	r4, r2, sl
 8001f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	00eb      	lsls	r3, r5, #3
 8001f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f3e:	00e2      	lsls	r2, r4, #3
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4643      	mov	r3, r8
 8001f46:	18e3      	adds	r3, r4, r3
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	eb45 0303 	adc.w	r3, r5, r3
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f5e:	4629      	mov	r1, r5
 8001f60:	028b      	lsls	r3, r1, #10
 8001f62:	4621      	mov	r1, r4
 8001f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f68:	4621      	mov	r1, r4
 8001f6a:	028a      	lsls	r2, r1, #10
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f74:	2200      	movs	r2, #0
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	61fa      	str	r2, [r7, #28]
 8001f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7e:	f7fe f997 	bl	80002b0 <__aeabi_uldivmod>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4613      	mov	r3, r2
 8001f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0f1b      	lsrs	r3, r3, #28
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco / pllr;
 8001f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001faa:	e003      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3798      	adds	r7, #152	; 0x98
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	017d7840 	.word	0x017d7840

08001fd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e28d      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8083 	beq.w	80020f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ff0:	4b94      	ldr	r3, [pc, #592]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d019      	beq.n	8002030 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ffc:	4b91      	ldr	r3, [pc, #580]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
        || \
 8002004:	2b08      	cmp	r3, #8
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002008:	4b8e      	ldr	r3, [pc, #568]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002014:	d00c      	beq.n	8002030 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002016:	4b8b      	ldr	r3, [pc, #556]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d112      	bne.n	8002048 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002022:	4b88      	ldr	r3, [pc, #544]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202e:	d10b      	bne.n	8002048 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	4b84      	ldr	r3, [pc, #528]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d05b      	beq.n	80020f4 <HAL_RCC_OscConfig+0x124>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d157      	bne.n	80020f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e25a      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x90>
 8002052:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7b      	ldr	r2, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xcc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xb4>
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a75      	ldr	r2, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xcc>
 8002084:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6e      	ldr	r2, [pc, #440]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b6c      	ldr	r3, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6b      	ldr	r2, [pc, #428]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff fa30 	bl	8001508 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fa2c 	bl	8001508 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e21f      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b61      	ldr	r3, [pc, #388]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xdc>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff fa1c 	bl	8001508 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fa18 	bl	8001508 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e20b      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x104>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06f      	beq.n	80021e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002102:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d017      	beq.n	800213e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800210e:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
        || \
 8002116:	2b08      	cmp	r3, #8
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800211a:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d11c      	bne.n	800216c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002132:	4b44      	ldr	r3, [pc, #272]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d116      	bne.n	800216c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x186>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d001      	beq.n	8002156 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e1d3      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4937      	ldr	r1, [pc, #220]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	e03a      	b.n	80021e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d020      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_OscConfig+0x278>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217a:	f7ff f9c5 	bl	8001508 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002182:	f7ff f9c1 	bl	8001508 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e1b4      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4925      	ldr	r1, [pc, #148]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
 80021b4:	e015      	b.n	80021e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_OscConfig+0x278>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff f9a4 	bl	8001508 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7ff f9a0 	bl	8001508 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e193      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d036      	beq.n	800225c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d016      	beq.n	8002224 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_RCC_OscConfig+0x27c>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff f984 	bl	8001508 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff f980 	bl	8001508 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e173      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x234>
 8002222:	e01b      	b.n	800225c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_RCC_OscConfig+0x27c>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff f96d 	bl	8001508 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	e00e      	b.n	8002250 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff f969 	bl	8001508 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d907      	bls.n	8002250 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e15c      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
 8002244:	40023800 	.word	0x40023800
 8002248:	42470000 	.word	0x42470000
 800224c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	4b8a      	ldr	r3, [pc, #552]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ea      	bne.n	8002232 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 8097 	beq.w	8002398 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b83      	ldr	r3, [pc, #524]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10f      	bne.n	800229a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	4b7f      	ldr	r3, [pc, #508]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a7e      	ldr	r2, [pc, #504]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b7c      	ldr	r3, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <HAL_RCC_OscConfig+0x4b0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b76      	ldr	r3, [pc, #472]	; (8002480 <HAL_RCC_OscConfig+0x4b0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a75      	ldr	r2, [pc, #468]	; (8002480 <HAL_RCC_OscConfig+0x4b0>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7ff f929 	bl	8001508 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7ff f925 	bl	8001508 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e118      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b6c      	ldr	r3, [pc, #432]	; (8002480 <HAL_RCC_OscConfig+0x4b0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x31e>
 80022e0:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a65      	ldr	r2, [pc, #404]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	e01c      	b.n	8002328 <HAL_RCC_OscConfig+0x358>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x340>
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a60      	ldr	r2, [pc, #384]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	4b5e      	ldr	r3, [pc, #376]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a5d      	ldr	r2, [pc, #372]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0x358>
 8002310:	4b5a      	ldr	r3, [pc, #360]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	4a59      	ldr	r2, [pc, #356]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	6713      	str	r3, [r2, #112]	; 0x70
 800231c:	4b57      	ldr	r3, [pc, #348]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002322:	f023 0304 	bic.w	r3, r3, #4
 8002326:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002330:	f7ff f8ea 	bl	8001508 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002336:	e00a      	b.n	800234e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7ff f8e6 	bl	8001508 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0d7      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234e:	4b4b      	ldr	r3, [pc, #300]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0ee      	beq.n	8002338 <HAL_RCC_OscConfig+0x368>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7ff f8d4 	bl	8001508 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002362:	e00a      	b.n	800237a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7ff f8d0 	bl	8001508 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0c1      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237a:	4b40      	ldr	r3, [pc, #256]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1ee      	bne.n	8002364 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	4a3a      	ldr	r2, [pc, #232]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002396:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80ad 	beq.w	80024fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d060      	beq.n	8002470 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d145      	bne.n	8002442 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_RCC_OscConfig+0x4b4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff f8a4 	bl	8001508 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff f8a0 	bl	8001508 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e093      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	019b      	lsls	r3, r3, #6
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	3b01      	subs	r3, #1
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	071b      	lsls	r3, r3, #28
 800240e:	491b      	ldr	r1, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x4b4>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff f875 	bl	8001508 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff f871 	bl	8001508 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e064      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x452>
 8002440:	e05c      	b.n	80024fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_RCC_OscConfig+0x4b4>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f85e 	bl	8001508 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff f85a 	bl	8001508 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e04d      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_OscConfig+0x4ac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0x480>
 800246e:	e045      	b.n	80024fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e040      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
 800247c:	40023800 	.word	0x40023800
 8002480:	40007000 	.word	0x40007000
 8002484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_RCC_OscConfig+0x538>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d030      	beq.n	80024f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d129      	bne.n	80024f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d122      	bne.n	80024f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b8:	4013      	ands	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d119      	bne.n	80024f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	3b01      	subs	r3, #1
 80024d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d10f      	bne.n	80024f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e042      	b.n	80025a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fe30 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2224      	movs	r2, #36	; 0x24
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f97f 	bl	8002854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	f040 8081 	bne.w	80026d0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_UART_Receive+0x2e>
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e079      	b.n	80026d2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2222      	movs	r2, #34	; 0x22
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f2:	f7fe ff89 	bl	8001508 <HAL_GetTick>
 80025f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260c:	d108      	bne.n	8002620 <HAL_UART_Receive+0x74>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e003      	b.n	8002628 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002628:	e047      	b.n	80026ba <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2200      	movs	r2, #0
 8002632:	2120      	movs	r1, #32
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f850 	bl	80026da <UART_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e042      	b.n	80026d2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	b29b      	uxth	r3, r3
 800265a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265e:	b29a      	uxth	r2, r3
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	3302      	adds	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	e01f      	b.n	80026ac <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002674:	d007      	beq.n	8002686 <HAL_UART_Receive+0xda>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_UART_Receive+0xe8>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e008      	b.n	80026a6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1b2      	bne.n	800262a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ea:	e03b      	b.n	8002764 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d037      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f4:	f7fe ff08 	bl	8001508 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	6a3a      	ldr	r2, [r7, #32]
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <UART_WaitOnFlagUntilTimeout+0x30>
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e03a      	b.n	8002784 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d023      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x8a>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d020      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d01d      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d116      	bne.n	8002764 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f81d 	bl	800278c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2208      	movs	r2, #8
 8002756:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e00f      	b.n	8002784 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	429a      	cmp	r2, r3
 8002780:	d0b4      	beq.n	80026ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800278c:	b480      	push	{r7}
 800278e:	b095      	sub	sp, #84	; 0x54
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	e853 3f00 	ldrex	r3, [r3]
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027b4:	643a      	str	r2, [r7, #64]	; 0x40
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027bc:	e841 2300 	strex	r3, r2, [r1]
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e5      	bne.n	8002794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e5      	bne.n	80027c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b01      	cmp	r3, #1
 8002802:	d119      	bne.n	8002838 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	e853 3f00 	ldrex	r3, [r3]
 8002812:	60bb      	str	r3, [r7, #8]
   return(result);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f023 0310 	bic.w	r3, r3, #16
 800281a:	647b      	str	r3, [r7, #68]	; 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002824:	61ba      	str	r2, [r7, #24]
 8002826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002828:	6979      	ldr	r1, [r7, #20]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	e841 2300 	strex	r3, r2, [r1]
 8002830:	613b      	str	r3, [r7, #16]
   return(result);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1e5      	bne.n	8002804 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002846:	bf00      	nop
 8002848:	3754      	adds	r7, #84	; 0x54
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002858:	b0c0      	sub	sp, #256	; 0x100
 800285a:	af00      	add	r7, sp, #0
 800285c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002870:	68d9      	ldr	r1, [r3, #12]
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	ea40 0301 	orr.w	r3, r0, r1
 800287c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800287e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	431a      	orrs	r2, r3
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	431a      	orrs	r2, r3
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028ac:	f021 010c 	bic.w	r1, r1, #12
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028ba:	430b      	orrs	r3, r1
 80028bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ce:	6999      	ldr	r1, [r3, #24]
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	ea40 0301 	orr.w	r3, r0, r1
 80028da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <UART_SetConfig+0x2cc>)
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d005      	beq.n	80028f4 <UART_SetConfig+0xa0>
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <UART_SetConfig+0x2d0>)
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d104      	bne.n	80028fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028f4:	f7ff f9ae 	bl	8001c54 <HAL_RCC_GetPCLK2Freq>
 80028f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028fc:	e003      	b.n	8002906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028fe:	f7ff f995 	bl	8001c2c <HAL_RCC_GetPCLK1Freq>
 8002902:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002910:	f040 810c 	bne.w	8002b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002918:	2200      	movs	r2, #0
 800291a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800291e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002926:	4622      	mov	r2, r4
 8002928:	462b      	mov	r3, r5
 800292a:	1891      	adds	r1, r2, r2
 800292c:	65b9      	str	r1, [r7, #88]	; 0x58
 800292e:	415b      	adcs	r3, r3
 8002930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002936:	4621      	mov	r1, r4
 8002938:	eb12 0801 	adds.w	r8, r2, r1
 800293c:	4629      	mov	r1, r5
 800293e:	eb43 0901 	adc.w	r9, r3, r1
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800294e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002956:	4690      	mov	r8, r2
 8002958:	4699      	mov	r9, r3
 800295a:	4623      	mov	r3, r4
 800295c:	eb18 0303 	adds.w	r3, r8, r3
 8002960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002964:	462b      	mov	r3, r5
 8002966:	eb49 0303 	adc.w	r3, r9, r3
 800296a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800297a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800297e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002982:	460b      	mov	r3, r1
 8002984:	18db      	adds	r3, r3, r3
 8002986:	653b      	str	r3, [r7, #80]	; 0x50
 8002988:	4613      	mov	r3, r2
 800298a:	eb42 0303 	adc.w	r3, r2, r3
 800298e:	657b      	str	r3, [r7, #84]	; 0x54
 8002990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002998:	f7fd fc8a 	bl	80002b0 <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <UART_SetConfig+0x2d4>)
 80029a2:	fba3 2302 	umull	r2, r3, r3, r2
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	011c      	lsls	r4, r3, #4
 80029aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029bc:	4642      	mov	r2, r8
 80029be:	464b      	mov	r3, r9
 80029c0:	1891      	adds	r1, r2, r2
 80029c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80029c4:	415b      	adcs	r3, r3
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029cc:	4641      	mov	r1, r8
 80029ce:	eb12 0a01 	adds.w	sl, r2, r1
 80029d2:	4649      	mov	r1, r9
 80029d4:	eb43 0b01 	adc.w	fp, r3, r1
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ec:	4692      	mov	sl, r2
 80029ee:	469b      	mov	fp, r3
 80029f0:	4643      	mov	r3, r8
 80029f2:	eb1a 0303 	adds.w	r3, sl, r3
 80029f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029fa:	464b      	mov	r3, r9
 80029fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	18db      	adds	r3, r3, r3
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a1e:	4613      	mov	r3, r2
 8002a20:	eb42 0303 	adc.w	r3, r2, r3
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
 8002a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a2e:	f7fd fc3f 	bl	80002b0 <__aeabi_uldivmod>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4611      	mov	r1, r2
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <UART_SetConfig+0x2d4>)
 8002a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2264      	movs	r2, #100	; 0x64
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	1acb      	subs	r3, r1, r3
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a4e:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <UART_SetConfig+0x2d4>)
 8002a50:	fba3 2302 	umull	r2, r3, r3, r2
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a5c:	441c      	add	r4, r3
 8002a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a70:	4642      	mov	r2, r8
 8002a72:	464b      	mov	r3, r9
 8002a74:	1891      	adds	r1, r2, r2
 8002a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a78:	415b      	adcs	r3, r3
 8002a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a80:	4641      	mov	r1, r8
 8002a82:	1851      	adds	r1, r2, r1
 8002a84:	6339      	str	r1, [r7, #48]	; 0x30
 8002a86:	4649      	mov	r1, r9
 8002a88:	414b      	adcs	r3, r1
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a98:	4659      	mov	r1, fp
 8002a9a:	00cb      	lsls	r3, r1, #3
 8002a9c:	4651      	mov	r1, sl
 8002a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	00ca      	lsls	r2, r1, #3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4642      	mov	r2, r8
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	460a      	mov	r2, r1
 8002ab8:	eb42 0303 	adc.w	r3, r2, r3
 8002abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002acc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	18db      	adds	r3, r3, r3
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ada:	4613      	mov	r3, r2
 8002adc:	eb42 0303 	adc.w	r3, r2, r3
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002aea:	f7fd fbe1 	bl	80002b0 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <UART_SetConfig+0x2d4>)
 8002af4:	fba3 1302 	umull	r1, r3, r3, r2
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	2164      	movs	r1, #100	; 0x64
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	3332      	adds	r3, #50	; 0x32
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <UART_SetConfig+0x2d4>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	f003 0207 	and.w	r2, r3, #7
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4422      	add	r2, r4
 8002b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b1c:	e106      	b.n	8002d2c <UART_SetConfig+0x4d8>
 8002b1e:	bf00      	nop
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40011400 	.word	0x40011400
 8002b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b30:	2200      	movs	r2, #0
 8002b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b3e:	4642      	mov	r2, r8
 8002b40:	464b      	mov	r3, r9
 8002b42:	1891      	adds	r1, r2, r2
 8002b44:	6239      	str	r1, [r7, #32]
 8002b46:	415b      	adcs	r3, r3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b4e:	4641      	mov	r1, r8
 8002b50:	1854      	adds	r4, r2, r1
 8002b52:	4649      	mov	r1, r9
 8002b54:	eb43 0501 	adc.w	r5, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4643      	mov	r3, r8
 8002b6e:	18e3      	adds	r3, r4, r3
 8002b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b74:	464b      	mov	r3, r9
 8002b76:	eb45 0303 	adc.w	r3, r5, r3
 8002b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	008b      	lsls	r3, r1, #2
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	008a      	lsls	r2, r1, #2
 8002ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bac:	f7fd fb80 	bl	80002b0 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4b60      	ldr	r3, [pc, #384]	; (8002d38 <UART_SetConfig+0x4e4>)
 8002bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	011c      	lsls	r4, r3, #4
 8002bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	1891      	adds	r1, r2, r2
 8002bd6:	61b9      	str	r1, [r7, #24]
 8002bd8:	415b      	adcs	r3, r3
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be0:	4641      	mov	r1, r8
 8002be2:	1851      	adds	r1, r2, r1
 8002be4:	6139      	str	r1, [r7, #16]
 8002be6:	4649      	mov	r1, r9
 8002be8:	414b      	adcs	r3, r1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	00cb      	lsls	r3, r1, #3
 8002bfc:	4651      	mov	r1, sl
 8002bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c02:	4651      	mov	r1, sl
 8002c04:	00ca      	lsls	r2, r1, #3
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c14:	464b      	mov	r3, r9
 8002c16:	460a      	mov	r2, r1
 8002c18:	eb42 0303 	adc.w	r3, r2, r3
 8002c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c38:	4649      	mov	r1, r9
 8002c3a:	008b      	lsls	r3, r1, #2
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c42:	4641      	mov	r1, r8
 8002c44:	008a      	lsls	r2, r1, #2
 8002c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c4a:	f7fd fb31 	bl	80002b0 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <UART_SetConfig+0x4e4>)
 8002c56:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2264      	movs	r2, #100	; 0x64
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	1acb      	subs	r3, r1, r3
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	3332      	adds	r3, #50	; 0x32
 8002c68:	4a33      	ldr	r2, [pc, #204]	; (8002d38 <UART_SetConfig+0x4e4>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	441c      	add	r4, r3
 8002c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c7e:	677a      	str	r2, [r7, #116]	; 0x74
 8002c80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c94:	4641      	mov	r1, r8
 8002c96:	1851      	adds	r1, r2, r1
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	414b      	adcs	r3, r1
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cac:	4659      	mov	r1, fp
 8002cae:	00cb      	lsls	r3, r1, #3
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	00ca      	lsls	r2, r1, #3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	460a      	mov	r2, r1
 8002cca:	eb42 0303 	adc.w	r3, r2, r3
 8002cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cda:	667a      	str	r2, [r7, #100]	; 0x64
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ce8:	4649      	mov	r1, r9
 8002cea:	008b      	lsls	r3, r1, #2
 8002cec:	4641      	mov	r1, r8
 8002cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	008a      	lsls	r2, r1, #2
 8002cf6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cfa:	f7fd fad9 	bl	80002b0 <__aeabi_uldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <UART_SetConfig+0x4e4>)
 8002d04:	fba3 1302 	umull	r1, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	2164      	movs	r1, #100	; 0x64
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	3332      	adds	r3, #50	; 0x32
 8002d16:	4a08      	ldr	r2, [pc, #32]	; (8002d38 <UART_SetConfig+0x4e4>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	f003 020f 	and.w	r2, r3, #15
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4422      	add	r2, r4
 8002d2a:	609a      	str	r2, [r3, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d32:	46bd      	mov	sp, r7
 8002d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d38:	51eb851f 	.word	0x51eb851f

08002d3c <std>:
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	4604      	mov	r4, r0
 8002d42:	e9c0 3300 	strd	r3, r3, [r0]
 8002d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d4a:	6083      	str	r3, [r0, #8]
 8002d4c:	8181      	strh	r1, [r0, #12]
 8002d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8002d50:	81c2      	strh	r2, [r0, #14]
 8002d52:	6183      	str	r3, [r0, #24]
 8002d54:	4619      	mov	r1, r3
 8002d56:	2208      	movs	r2, #8
 8002d58:	305c      	adds	r0, #92	; 0x5c
 8002d5a:	f000 f9f7 	bl	800314c <memset>
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <std+0x58>)
 8002d60:	6263      	str	r3, [r4, #36]	; 0x24
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <std+0x5c>)
 8002d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <std+0x60>)
 8002d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <std+0x64>)
 8002d6c:	6323      	str	r3, [r4, #48]	; 0x30
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <std+0x68>)
 8002d70:	6224      	str	r4, [r4, #32]
 8002d72:	429c      	cmp	r4, r3
 8002d74:	d006      	beq.n	8002d84 <std+0x48>
 8002d76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002d7a:	4294      	cmp	r4, r2
 8002d7c:	d002      	beq.n	8002d84 <std+0x48>
 8002d7e:	33d0      	adds	r3, #208	; 0xd0
 8002d80:	429c      	cmp	r4, r3
 8002d82:	d105      	bne.n	8002d90 <std+0x54>
 8002d84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d8c:	f000 ba56 	b.w	800323c <__retarget_lock_init_recursive>
 8002d90:	bd10      	pop	{r4, pc}
 8002d92:	bf00      	nop
 8002d94:	08002f9d 	.word	0x08002f9d
 8002d98:	08002fbf 	.word	0x08002fbf
 8002d9c:	08002ff7 	.word	0x08002ff7
 8002da0:	0800301b 	.word	0x0800301b
 8002da4:	20000138 	.word	0x20000138

08002da8 <stdio_exit_handler>:
 8002da8:	4a02      	ldr	r2, [pc, #8]	; (8002db4 <stdio_exit_handler+0xc>)
 8002daa:	4903      	ldr	r1, [pc, #12]	; (8002db8 <stdio_exit_handler+0x10>)
 8002dac:	4803      	ldr	r0, [pc, #12]	; (8002dbc <stdio_exit_handler+0x14>)
 8002dae:	f000 b869 	b.w	8002e84 <_fwalk_sglue>
 8002db2:	bf00      	nop
 8002db4:	20000020 	.word	0x20000020
 8002db8:	08003ae9 	.word	0x08003ae9
 8002dbc:	2000002c 	.word	0x2000002c

08002dc0 <cleanup_stdio>:
 8002dc0:	6841      	ldr	r1, [r0, #4]
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <cleanup_stdio+0x34>)
 8002dc4:	4299      	cmp	r1, r3
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	4604      	mov	r4, r0
 8002dca:	d001      	beq.n	8002dd0 <cleanup_stdio+0x10>
 8002dcc:	f000 fe8c 	bl	8003ae8 <_fflush_r>
 8002dd0:	68a1      	ldr	r1, [r4, #8]
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <cleanup_stdio+0x38>)
 8002dd4:	4299      	cmp	r1, r3
 8002dd6:	d002      	beq.n	8002dde <cleanup_stdio+0x1e>
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f000 fe85 	bl	8003ae8 <_fflush_r>
 8002dde:	68e1      	ldr	r1, [r4, #12]
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <cleanup_stdio+0x3c>)
 8002de2:	4299      	cmp	r1, r3
 8002de4:	d004      	beq.n	8002df0 <cleanup_stdio+0x30>
 8002de6:	4620      	mov	r0, r4
 8002de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dec:	f000 be7c 	b.w	8003ae8 <_fflush_r>
 8002df0:	bd10      	pop	{r4, pc}
 8002df2:	bf00      	nop
 8002df4:	20000138 	.word	0x20000138
 8002df8:	200001a0 	.word	0x200001a0
 8002dfc:	20000208 	.word	0x20000208

08002e00 <global_stdio_init.part.0>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <global_stdio_init.part.0+0x30>)
 8002e04:	4c0b      	ldr	r4, [pc, #44]	; (8002e34 <global_stdio_init.part.0+0x34>)
 8002e06:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <global_stdio_init.part.0+0x38>)
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2104      	movs	r1, #4
 8002e10:	f7ff ff94 	bl	8002d3c <std>
 8002e14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2109      	movs	r1, #9
 8002e1c:	f7ff ff8e 	bl	8002d3c <std>
 8002e20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e24:	2202      	movs	r2, #2
 8002e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2a:	2112      	movs	r1, #18
 8002e2c:	f7ff bf86 	b.w	8002d3c <std>
 8002e30:	20000270 	.word	0x20000270
 8002e34:	20000138 	.word	0x20000138
 8002e38:	08002da9 	.word	0x08002da9

08002e3c <__sfp_lock_acquire>:
 8002e3c:	4801      	ldr	r0, [pc, #4]	; (8002e44 <__sfp_lock_acquire+0x8>)
 8002e3e:	f000 b9fe 	b.w	800323e <__retarget_lock_acquire_recursive>
 8002e42:	bf00      	nop
 8002e44:	20000279 	.word	0x20000279

08002e48 <__sfp_lock_release>:
 8002e48:	4801      	ldr	r0, [pc, #4]	; (8002e50 <__sfp_lock_release+0x8>)
 8002e4a:	f000 b9f9 	b.w	8003240 <__retarget_lock_release_recursive>
 8002e4e:	bf00      	nop
 8002e50:	20000279 	.word	0x20000279

08002e54 <__sinit>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4604      	mov	r4, r0
 8002e58:	f7ff fff0 	bl	8002e3c <__sfp_lock_acquire>
 8002e5c:	6a23      	ldr	r3, [r4, #32]
 8002e5e:	b11b      	cbz	r3, 8002e68 <__sinit+0x14>
 8002e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e64:	f7ff bff0 	b.w	8002e48 <__sfp_lock_release>
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <__sinit+0x28>)
 8002e6a:	6223      	str	r3, [r4, #32]
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <__sinit+0x2c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f5      	bne.n	8002e60 <__sinit+0xc>
 8002e74:	f7ff ffc4 	bl	8002e00 <global_stdio_init.part.0>
 8002e78:	e7f2      	b.n	8002e60 <__sinit+0xc>
 8002e7a:	bf00      	nop
 8002e7c:	08002dc1 	.word	0x08002dc1
 8002e80:	20000270 	.word	0x20000270

08002e84 <_fwalk_sglue>:
 8002e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e88:	4607      	mov	r7, r0
 8002e8a:	4688      	mov	r8, r1
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	2600      	movs	r6, #0
 8002e90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e94:	f1b9 0901 	subs.w	r9, r9, #1
 8002e98:	d505      	bpl.n	8002ea6 <_fwalk_sglue+0x22>
 8002e9a:	6824      	ldr	r4, [r4, #0]
 8002e9c:	2c00      	cmp	r4, #0
 8002e9e:	d1f7      	bne.n	8002e90 <_fwalk_sglue+0xc>
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ea6:	89ab      	ldrh	r3, [r5, #12]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d907      	bls.n	8002ebc <_fwalk_sglue+0x38>
 8002eac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	d003      	beq.n	8002ebc <_fwalk_sglue+0x38>
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	4638      	mov	r0, r7
 8002eb8:	47c0      	blx	r8
 8002eba:	4306      	orrs	r6, r0
 8002ebc:	3568      	adds	r5, #104	; 0x68
 8002ebe:	e7e9      	b.n	8002e94 <_fwalk_sglue+0x10>

08002ec0 <iprintf>:
 8002ec0:	b40f      	push	{r0, r1, r2, r3}
 8002ec2:	b507      	push	{r0, r1, r2, lr}
 8002ec4:	4906      	ldr	r1, [pc, #24]	; (8002ee0 <iprintf+0x20>)
 8002ec6:	ab04      	add	r3, sp, #16
 8002ec8:	6808      	ldr	r0, [r1, #0]
 8002eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ece:	6881      	ldr	r1, [r0, #8]
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	f000 fad9 	bl	8003488 <_vfiprintf_r>
 8002ed6:	b003      	add	sp, #12
 8002ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002edc:	b004      	add	sp, #16
 8002ede:	4770      	bx	lr
 8002ee0:	20000078 	.word	0x20000078

08002ee4 <_puts_r>:
 8002ee4:	6a03      	ldr	r3, [r0, #32]
 8002ee6:	b570      	push	{r4, r5, r6, lr}
 8002ee8:	6884      	ldr	r4, [r0, #8]
 8002eea:	4605      	mov	r5, r0
 8002eec:	460e      	mov	r6, r1
 8002eee:	b90b      	cbnz	r3, 8002ef4 <_puts_r+0x10>
 8002ef0:	f7ff ffb0 	bl	8002e54 <__sinit>
 8002ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ef6:	07db      	lsls	r3, r3, #31
 8002ef8:	d405      	bmi.n	8002f06 <_puts_r+0x22>
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	0598      	lsls	r0, r3, #22
 8002efe:	d402      	bmi.n	8002f06 <_puts_r+0x22>
 8002f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f02:	f000 f99c 	bl	800323e <__retarget_lock_acquire_recursive>
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	0719      	lsls	r1, r3, #28
 8002f0a:	d513      	bpl.n	8002f34 <_puts_r+0x50>
 8002f0c:	6923      	ldr	r3, [r4, #16]
 8002f0e:	b18b      	cbz	r3, 8002f34 <_puts_r+0x50>
 8002f10:	3e01      	subs	r6, #1
 8002f12:	68a3      	ldr	r3, [r4, #8]
 8002f14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60a3      	str	r3, [r4, #8]
 8002f1c:	b9e9      	cbnz	r1, 8002f5a <_puts_r+0x76>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da2e      	bge.n	8002f80 <_puts_r+0x9c>
 8002f22:	4622      	mov	r2, r4
 8002f24:	210a      	movs	r1, #10
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 f87b 	bl	8003022 <__swbuf_r>
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d007      	beq.n	8002f40 <_puts_r+0x5c>
 8002f30:	250a      	movs	r5, #10
 8002f32:	e007      	b.n	8002f44 <_puts_r+0x60>
 8002f34:	4621      	mov	r1, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 f8b0 	bl	800309c <__swsetup_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d0e7      	beq.n	8002f10 <_puts_r+0x2c>
 8002f40:	f04f 35ff 	mov.w	r5, #4294967295
 8002f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f46:	07da      	lsls	r2, r3, #31
 8002f48:	d405      	bmi.n	8002f56 <_puts_r+0x72>
 8002f4a:	89a3      	ldrh	r3, [r4, #12]
 8002f4c:	059b      	lsls	r3, r3, #22
 8002f4e:	d402      	bmi.n	8002f56 <_puts_r+0x72>
 8002f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f52:	f000 f975 	bl	8003240 <__retarget_lock_release_recursive>
 8002f56:	4628      	mov	r0, r5
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	da04      	bge.n	8002f68 <_puts_r+0x84>
 8002f5e:	69a2      	ldr	r2, [r4, #24]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	dc06      	bgt.n	8002f72 <_puts_r+0x8e>
 8002f64:	290a      	cmp	r1, #10
 8002f66:	d004      	beq.n	8002f72 <_puts_r+0x8e>
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	6022      	str	r2, [r4, #0]
 8002f6e:	7019      	strb	r1, [r3, #0]
 8002f70:	e7cf      	b.n	8002f12 <_puts_r+0x2e>
 8002f72:	4622      	mov	r2, r4
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 f854 	bl	8003022 <__swbuf_r>
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d1c9      	bne.n	8002f12 <_puts_r+0x2e>
 8002f7e:	e7df      	b.n	8002f40 <_puts_r+0x5c>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	250a      	movs	r5, #10
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	6022      	str	r2, [r4, #0]
 8002f88:	701d      	strb	r5, [r3, #0]
 8002f8a:	e7db      	b.n	8002f44 <_puts_r+0x60>

08002f8c <puts>:
 8002f8c:	4b02      	ldr	r3, [pc, #8]	; (8002f98 <puts+0xc>)
 8002f8e:	4601      	mov	r1, r0
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	f7ff bfa7 	b.w	8002ee4 <_puts_r>
 8002f96:	bf00      	nop
 8002f98:	20000078 	.word	0x20000078

08002f9c <__sread>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa4:	f000 f8fc 	bl	80031a0 <_read_r>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	bfab      	itete	ge
 8002fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fae:	89a3      	ldrhlt	r3, [r4, #12]
 8002fb0:	181b      	addge	r3, r3, r0
 8002fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fb6:	bfac      	ite	ge
 8002fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fba:	81a3      	strhlt	r3, [r4, #12]
 8002fbc:	bd10      	pop	{r4, pc}

08002fbe <__swrite>:
 8002fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc2:	461f      	mov	r7, r3
 8002fc4:	898b      	ldrh	r3, [r1, #12]
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	4605      	mov	r5, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	4616      	mov	r6, r2
 8002fce:	d505      	bpl.n	8002fdc <__swrite+0x1e>
 8002fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f000 f8d0 	bl	800317c <_lseek_r>
 8002fdc:	89a3      	ldrh	r3, [r4, #12]
 8002fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fe6:	81a3      	strh	r3, [r4, #12]
 8002fe8:	4632      	mov	r2, r6
 8002fea:	463b      	mov	r3, r7
 8002fec:	4628      	mov	r0, r5
 8002fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff2:	f000 b8e7 	b.w	80031c4 <_write_r>

08002ff6 <__sseek>:
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffe:	f000 f8bd 	bl	800317c <_lseek_r>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	bf15      	itete	ne
 8003008:	6560      	strne	r0, [r4, #84]	; 0x54
 800300a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800300e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003012:	81a3      	strheq	r3, [r4, #12]
 8003014:	bf18      	it	ne
 8003016:	81a3      	strhne	r3, [r4, #12]
 8003018:	bd10      	pop	{r4, pc}

0800301a <__sclose>:
 800301a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301e:	f000 b89d 	b.w	800315c <_close_r>

08003022 <__swbuf_r>:
 8003022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003024:	460e      	mov	r6, r1
 8003026:	4614      	mov	r4, r2
 8003028:	4605      	mov	r5, r0
 800302a:	b118      	cbz	r0, 8003034 <__swbuf_r+0x12>
 800302c:	6a03      	ldr	r3, [r0, #32]
 800302e:	b90b      	cbnz	r3, 8003034 <__swbuf_r+0x12>
 8003030:	f7ff ff10 	bl	8002e54 <__sinit>
 8003034:	69a3      	ldr	r3, [r4, #24]
 8003036:	60a3      	str	r3, [r4, #8]
 8003038:	89a3      	ldrh	r3, [r4, #12]
 800303a:	071a      	lsls	r2, r3, #28
 800303c:	d525      	bpl.n	800308a <__swbuf_r+0x68>
 800303e:	6923      	ldr	r3, [r4, #16]
 8003040:	b31b      	cbz	r3, 800308a <__swbuf_r+0x68>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	6922      	ldr	r2, [r4, #16]
 8003046:	1a98      	subs	r0, r3, r2
 8003048:	6963      	ldr	r3, [r4, #20]
 800304a:	b2f6      	uxtb	r6, r6
 800304c:	4283      	cmp	r3, r0
 800304e:	4637      	mov	r7, r6
 8003050:	dc04      	bgt.n	800305c <__swbuf_r+0x3a>
 8003052:	4621      	mov	r1, r4
 8003054:	4628      	mov	r0, r5
 8003056:	f000 fd47 	bl	8003ae8 <_fflush_r>
 800305a:	b9e0      	cbnz	r0, 8003096 <__swbuf_r+0x74>
 800305c:	68a3      	ldr	r3, [r4, #8]
 800305e:	3b01      	subs	r3, #1
 8003060:	60a3      	str	r3, [r4, #8]
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	6022      	str	r2, [r4, #0]
 8003068:	701e      	strb	r6, [r3, #0]
 800306a:	6962      	ldr	r2, [r4, #20]
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	429a      	cmp	r2, r3
 8003070:	d004      	beq.n	800307c <__swbuf_r+0x5a>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	07db      	lsls	r3, r3, #31
 8003076:	d506      	bpl.n	8003086 <__swbuf_r+0x64>
 8003078:	2e0a      	cmp	r6, #10
 800307a:	d104      	bne.n	8003086 <__swbuf_r+0x64>
 800307c:	4621      	mov	r1, r4
 800307e:	4628      	mov	r0, r5
 8003080:	f000 fd32 	bl	8003ae8 <_fflush_r>
 8003084:	b938      	cbnz	r0, 8003096 <__swbuf_r+0x74>
 8003086:	4638      	mov	r0, r7
 8003088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800308a:	4621      	mov	r1, r4
 800308c:	4628      	mov	r0, r5
 800308e:	f000 f805 	bl	800309c <__swsetup_r>
 8003092:	2800      	cmp	r0, #0
 8003094:	d0d5      	beq.n	8003042 <__swbuf_r+0x20>
 8003096:	f04f 37ff 	mov.w	r7, #4294967295
 800309a:	e7f4      	b.n	8003086 <__swbuf_r+0x64>

0800309c <__swsetup_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <__swsetup_r+0xac>)
 80030a0:	4605      	mov	r5, r0
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	460c      	mov	r4, r1
 80030a6:	b118      	cbz	r0, 80030b0 <__swsetup_r+0x14>
 80030a8:	6a03      	ldr	r3, [r0, #32]
 80030aa:	b90b      	cbnz	r3, 80030b0 <__swsetup_r+0x14>
 80030ac:	f7ff fed2 	bl	8002e54 <__sinit>
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030b6:	0718      	lsls	r0, r3, #28
 80030b8:	d422      	bmi.n	8003100 <__swsetup_r+0x64>
 80030ba:	06d9      	lsls	r1, r3, #27
 80030bc:	d407      	bmi.n	80030ce <__swsetup_r+0x32>
 80030be:	2309      	movs	r3, #9
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030c6:	81a3      	strh	r3, [r4, #12]
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	e034      	b.n	8003138 <__swsetup_r+0x9c>
 80030ce:	0758      	lsls	r0, r3, #29
 80030d0:	d512      	bpl.n	80030f8 <__swsetup_r+0x5c>
 80030d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d4:	b141      	cbz	r1, 80030e8 <__swsetup_r+0x4c>
 80030d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030da:	4299      	cmp	r1, r3
 80030dc:	d002      	beq.n	80030e4 <__swsetup_r+0x48>
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 f8b0 	bl	8003244 <_free_r>
 80030e4:	2300      	movs	r3, #0
 80030e6:	6363      	str	r3, [r4, #52]	; 0x34
 80030e8:	89a3      	ldrh	r3, [r4, #12]
 80030ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030ee:	81a3      	strh	r3, [r4, #12]
 80030f0:	2300      	movs	r3, #0
 80030f2:	6063      	str	r3, [r4, #4]
 80030f4:	6923      	ldr	r3, [r4, #16]
 80030f6:	6023      	str	r3, [r4, #0]
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	f043 0308 	orr.w	r3, r3, #8
 80030fe:	81a3      	strh	r3, [r4, #12]
 8003100:	6923      	ldr	r3, [r4, #16]
 8003102:	b94b      	cbnz	r3, 8003118 <__swsetup_r+0x7c>
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800310a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310e:	d003      	beq.n	8003118 <__swsetup_r+0x7c>
 8003110:	4621      	mov	r1, r4
 8003112:	4628      	mov	r0, r5
 8003114:	f000 fd36 	bl	8003b84 <__smakebuf_r>
 8003118:	89a0      	ldrh	r0, [r4, #12]
 800311a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800311e:	f010 0301 	ands.w	r3, r0, #1
 8003122:	d00a      	beq.n	800313a <__swsetup_r+0x9e>
 8003124:	2300      	movs	r3, #0
 8003126:	60a3      	str	r3, [r4, #8]
 8003128:	6963      	ldr	r3, [r4, #20]
 800312a:	425b      	negs	r3, r3
 800312c:	61a3      	str	r3, [r4, #24]
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	b943      	cbnz	r3, 8003144 <__swsetup_r+0xa8>
 8003132:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003136:	d1c4      	bne.n	80030c2 <__swsetup_r+0x26>
 8003138:	bd38      	pop	{r3, r4, r5, pc}
 800313a:	0781      	lsls	r1, r0, #30
 800313c:	bf58      	it	pl
 800313e:	6963      	ldrpl	r3, [r4, #20]
 8003140:	60a3      	str	r3, [r4, #8]
 8003142:	e7f4      	b.n	800312e <__swsetup_r+0x92>
 8003144:	2000      	movs	r0, #0
 8003146:	e7f7      	b.n	8003138 <__swsetup_r+0x9c>
 8003148:	20000078 	.word	0x20000078

0800314c <memset>:
 800314c:	4402      	add	r2, r0
 800314e:	4603      	mov	r3, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <_close_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4d06      	ldr	r5, [pc, #24]	; (8003178 <_close_r+0x1c>)
 8003160:	2300      	movs	r3, #0
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	f7fe f8c1 	bl	80012ee <_close>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_close_r+0x1a>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_close_r+0x1a>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	20000274 	.word	0x20000274

0800317c <_lseek_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4d07      	ldr	r5, [pc, #28]	; (800319c <_lseek_r+0x20>)
 8003180:	4604      	mov	r4, r0
 8003182:	4608      	mov	r0, r1
 8003184:	4611      	mov	r1, r2
 8003186:	2200      	movs	r2, #0
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f7fe f8d6 	bl	800133c <_lseek>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_lseek_r+0x1e>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_lseek_r+0x1e>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000274 	.word	0x20000274

080031a0 <_read_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	4d07      	ldr	r5, [pc, #28]	; (80031c0 <_read_r+0x20>)
 80031a4:	4604      	mov	r4, r0
 80031a6:	4608      	mov	r0, r1
 80031a8:	4611      	mov	r1, r2
 80031aa:	2200      	movs	r2, #0
 80031ac:	602a      	str	r2, [r5, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7fe f864 	bl	800127c <_read>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_read_r+0x1e>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_read_r+0x1e>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	20000274 	.word	0x20000274

080031c4 <_write_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4d07      	ldr	r5, [pc, #28]	; (80031e4 <_write_r+0x20>)
 80031c8:	4604      	mov	r4, r0
 80031ca:	4608      	mov	r0, r1
 80031cc:	4611      	mov	r1, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	602a      	str	r2, [r5, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fe f86f 	bl	80012b6 <_write>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_write_r+0x1e>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_write_r+0x1e>
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20000274 	.word	0x20000274

080031e8 <__errno>:
 80031e8:	4b01      	ldr	r3, [pc, #4]	; (80031f0 <__errno+0x8>)
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000078 	.word	0x20000078

080031f4 <__libc_init_array>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	4d0d      	ldr	r5, [pc, #52]	; (800322c <__libc_init_array+0x38>)
 80031f8:	4c0d      	ldr	r4, [pc, #52]	; (8003230 <__libc_init_array+0x3c>)
 80031fa:	1b64      	subs	r4, r4, r5
 80031fc:	10a4      	asrs	r4, r4, #2
 80031fe:	2600      	movs	r6, #0
 8003200:	42a6      	cmp	r6, r4
 8003202:	d109      	bne.n	8003218 <__libc_init_array+0x24>
 8003204:	4d0b      	ldr	r5, [pc, #44]	; (8003234 <__libc_init_array+0x40>)
 8003206:	4c0c      	ldr	r4, [pc, #48]	; (8003238 <__libc_init_array+0x44>)
 8003208:	f000 fd2a 	bl	8003c60 <_init>
 800320c:	1b64      	subs	r4, r4, r5
 800320e:	10a4      	asrs	r4, r4, #2
 8003210:	2600      	movs	r6, #0
 8003212:	42a6      	cmp	r6, r4
 8003214:	d105      	bne.n	8003222 <__libc_init_array+0x2e>
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	f855 3b04 	ldr.w	r3, [r5], #4
 800321c:	4798      	blx	r3
 800321e:	3601      	adds	r6, #1
 8003220:	e7ee      	b.n	8003200 <__libc_init_array+0xc>
 8003222:	f855 3b04 	ldr.w	r3, [r5], #4
 8003226:	4798      	blx	r3
 8003228:	3601      	adds	r6, #1
 800322a:	e7f2      	b.n	8003212 <__libc_init_array+0x1e>
 800322c:	08003da0 	.word	0x08003da0
 8003230:	08003da0 	.word	0x08003da0
 8003234:	08003da0 	.word	0x08003da0
 8003238:	08003da4 	.word	0x08003da4

0800323c <__retarget_lock_init_recursive>:
 800323c:	4770      	bx	lr

0800323e <__retarget_lock_acquire_recursive>:
 800323e:	4770      	bx	lr

08003240 <__retarget_lock_release_recursive>:
 8003240:	4770      	bx	lr
	...

08003244 <_free_r>:
 8003244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003246:	2900      	cmp	r1, #0
 8003248:	d044      	beq.n	80032d4 <_free_r+0x90>
 800324a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800324e:	9001      	str	r0, [sp, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f1a1 0404 	sub.w	r4, r1, #4
 8003256:	bfb8      	it	lt
 8003258:	18e4      	addlt	r4, r4, r3
 800325a:	f000 f8df 	bl	800341c <__malloc_lock>
 800325e:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <_free_r+0x94>)
 8003260:	9801      	ldr	r0, [sp, #4]
 8003262:	6813      	ldr	r3, [r2, #0]
 8003264:	b933      	cbnz	r3, 8003274 <_free_r+0x30>
 8003266:	6063      	str	r3, [r4, #4]
 8003268:	6014      	str	r4, [r2, #0]
 800326a:	b003      	add	sp, #12
 800326c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003270:	f000 b8da 	b.w	8003428 <__malloc_unlock>
 8003274:	42a3      	cmp	r3, r4
 8003276:	d908      	bls.n	800328a <_free_r+0x46>
 8003278:	6825      	ldr	r5, [r4, #0]
 800327a:	1961      	adds	r1, r4, r5
 800327c:	428b      	cmp	r3, r1
 800327e:	bf01      	itttt	eq
 8003280:	6819      	ldreq	r1, [r3, #0]
 8003282:	685b      	ldreq	r3, [r3, #4]
 8003284:	1949      	addeq	r1, r1, r5
 8003286:	6021      	streq	r1, [r4, #0]
 8003288:	e7ed      	b.n	8003266 <_free_r+0x22>
 800328a:	461a      	mov	r2, r3
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	b10b      	cbz	r3, 8003294 <_free_r+0x50>
 8003290:	42a3      	cmp	r3, r4
 8003292:	d9fa      	bls.n	800328a <_free_r+0x46>
 8003294:	6811      	ldr	r1, [r2, #0]
 8003296:	1855      	adds	r5, r2, r1
 8003298:	42a5      	cmp	r5, r4
 800329a:	d10b      	bne.n	80032b4 <_free_r+0x70>
 800329c:	6824      	ldr	r4, [r4, #0]
 800329e:	4421      	add	r1, r4
 80032a0:	1854      	adds	r4, r2, r1
 80032a2:	42a3      	cmp	r3, r4
 80032a4:	6011      	str	r1, [r2, #0]
 80032a6:	d1e0      	bne.n	800326a <_free_r+0x26>
 80032a8:	681c      	ldr	r4, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	6053      	str	r3, [r2, #4]
 80032ae:	440c      	add	r4, r1
 80032b0:	6014      	str	r4, [r2, #0]
 80032b2:	e7da      	b.n	800326a <_free_r+0x26>
 80032b4:	d902      	bls.n	80032bc <_free_r+0x78>
 80032b6:	230c      	movs	r3, #12
 80032b8:	6003      	str	r3, [r0, #0]
 80032ba:	e7d6      	b.n	800326a <_free_r+0x26>
 80032bc:	6825      	ldr	r5, [r4, #0]
 80032be:	1961      	adds	r1, r4, r5
 80032c0:	428b      	cmp	r3, r1
 80032c2:	bf04      	itt	eq
 80032c4:	6819      	ldreq	r1, [r3, #0]
 80032c6:	685b      	ldreq	r3, [r3, #4]
 80032c8:	6063      	str	r3, [r4, #4]
 80032ca:	bf04      	itt	eq
 80032cc:	1949      	addeq	r1, r1, r5
 80032ce:	6021      	streq	r1, [r4, #0]
 80032d0:	6054      	str	r4, [r2, #4]
 80032d2:	e7ca      	b.n	800326a <_free_r+0x26>
 80032d4:	b003      	add	sp, #12
 80032d6:	bd30      	pop	{r4, r5, pc}
 80032d8:	2000027c 	.word	0x2000027c

080032dc <sbrk_aligned>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	4e0e      	ldr	r6, [pc, #56]	; (8003318 <sbrk_aligned+0x3c>)
 80032e0:	460c      	mov	r4, r1
 80032e2:	6831      	ldr	r1, [r6, #0]
 80032e4:	4605      	mov	r5, r0
 80032e6:	b911      	cbnz	r1, 80032ee <sbrk_aligned+0x12>
 80032e8:	f000 fcaa 	bl	8003c40 <_sbrk_r>
 80032ec:	6030      	str	r0, [r6, #0]
 80032ee:	4621      	mov	r1, r4
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 fca5 	bl	8003c40 <_sbrk_r>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	d00a      	beq.n	8003310 <sbrk_aligned+0x34>
 80032fa:	1cc4      	adds	r4, r0, #3
 80032fc:	f024 0403 	bic.w	r4, r4, #3
 8003300:	42a0      	cmp	r0, r4
 8003302:	d007      	beq.n	8003314 <sbrk_aligned+0x38>
 8003304:	1a21      	subs	r1, r4, r0
 8003306:	4628      	mov	r0, r5
 8003308:	f000 fc9a 	bl	8003c40 <_sbrk_r>
 800330c:	3001      	adds	r0, #1
 800330e:	d101      	bne.n	8003314 <sbrk_aligned+0x38>
 8003310:	f04f 34ff 	mov.w	r4, #4294967295
 8003314:	4620      	mov	r0, r4
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	20000280 	.word	0x20000280

0800331c <_malloc_r>:
 800331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003320:	1ccd      	adds	r5, r1, #3
 8003322:	f025 0503 	bic.w	r5, r5, #3
 8003326:	3508      	adds	r5, #8
 8003328:	2d0c      	cmp	r5, #12
 800332a:	bf38      	it	cc
 800332c:	250c      	movcc	r5, #12
 800332e:	2d00      	cmp	r5, #0
 8003330:	4607      	mov	r7, r0
 8003332:	db01      	blt.n	8003338 <_malloc_r+0x1c>
 8003334:	42a9      	cmp	r1, r5
 8003336:	d905      	bls.n	8003344 <_malloc_r+0x28>
 8003338:	230c      	movs	r3, #12
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	2600      	movs	r6, #0
 800333e:	4630      	mov	r0, r6
 8003340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003344:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003418 <_malloc_r+0xfc>
 8003348:	f000 f868 	bl	800341c <__malloc_lock>
 800334c:	f8d8 3000 	ldr.w	r3, [r8]
 8003350:	461c      	mov	r4, r3
 8003352:	bb5c      	cbnz	r4, 80033ac <_malloc_r+0x90>
 8003354:	4629      	mov	r1, r5
 8003356:	4638      	mov	r0, r7
 8003358:	f7ff ffc0 	bl	80032dc <sbrk_aligned>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	4604      	mov	r4, r0
 8003360:	d155      	bne.n	800340e <_malloc_r+0xf2>
 8003362:	f8d8 4000 	ldr.w	r4, [r8]
 8003366:	4626      	mov	r6, r4
 8003368:	2e00      	cmp	r6, #0
 800336a:	d145      	bne.n	80033f8 <_malloc_r+0xdc>
 800336c:	2c00      	cmp	r4, #0
 800336e:	d048      	beq.n	8003402 <_malloc_r+0xe6>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	4631      	mov	r1, r6
 8003374:	4638      	mov	r0, r7
 8003376:	eb04 0903 	add.w	r9, r4, r3
 800337a:	f000 fc61 	bl	8003c40 <_sbrk_r>
 800337e:	4581      	cmp	r9, r0
 8003380:	d13f      	bne.n	8003402 <_malloc_r+0xe6>
 8003382:	6821      	ldr	r1, [r4, #0]
 8003384:	1a6d      	subs	r5, r5, r1
 8003386:	4629      	mov	r1, r5
 8003388:	4638      	mov	r0, r7
 800338a:	f7ff ffa7 	bl	80032dc <sbrk_aligned>
 800338e:	3001      	adds	r0, #1
 8003390:	d037      	beq.n	8003402 <_malloc_r+0xe6>
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	442b      	add	r3, r5
 8003396:	6023      	str	r3, [r4, #0]
 8003398:	f8d8 3000 	ldr.w	r3, [r8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d038      	beq.n	8003412 <_malloc_r+0xf6>
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	42a2      	cmp	r2, r4
 80033a4:	d12b      	bne.n	80033fe <_malloc_r+0xe2>
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	e00f      	b.n	80033cc <_malloc_r+0xb0>
 80033ac:	6822      	ldr	r2, [r4, #0]
 80033ae:	1b52      	subs	r2, r2, r5
 80033b0:	d41f      	bmi.n	80033f2 <_malloc_r+0xd6>
 80033b2:	2a0b      	cmp	r2, #11
 80033b4:	d917      	bls.n	80033e6 <_malloc_r+0xca>
 80033b6:	1961      	adds	r1, r4, r5
 80033b8:	42a3      	cmp	r3, r4
 80033ba:	6025      	str	r5, [r4, #0]
 80033bc:	bf18      	it	ne
 80033be:	6059      	strne	r1, [r3, #4]
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	bf08      	it	eq
 80033c4:	f8c8 1000 	streq.w	r1, [r8]
 80033c8:	5162      	str	r2, [r4, r5]
 80033ca:	604b      	str	r3, [r1, #4]
 80033cc:	4638      	mov	r0, r7
 80033ce:	f104 060b 	add.w	r6, r4, #11
 80033d2:	f000 f829 	bl	8003428 <__malloc_unlock>
 80033d6:	f026 0607 	bic.w	r6, r6, #7
 80033da:	1d23      	adds	r3, r4, #4
 80033dc:	1af2      	subs	r2, r6, r3
 80033de:	d0ae      	beq.n	800333e <_malloc_r+0x22>
 80033e0:	1b9b      	subs	r3, r3, r6
 80033e2:	50a3      	str	r3, [r4, r2]
 80033e4:	e7ab      	b.n	800333e <_malloc_r+0x22>
 80033e6:	42a3      	cmp	r3, r4
 80033e8:	6862      	ldr	r2, [r4, #4]
 80033ea:	d1dd      	bne.n	80033a8 <_malloc_r+0x8c>
 80033ec:	f8c8 2000 	str.w	r2, [r8]
 80033f0:	e7ec      	b.n	80033cc <_malloc_r+0xb0>
 80033f2:	4623      	mov	r3, r4
 80033f4:	6864      	ldr	r4, [r4, #4]
 80033f6:	e7ac      	b.n	8003352 <_malloc_r+0x36>
 80033f8:	4634      	mov	r4, r6
 80033fa:	6876      	ldr	r6, [r6, #4]
 80033fc:	e7b4      	b.n	8003368 <_malloc_r+0x4c>
 80033fe:	4613      	mov	r3, r2
 8003400:	e7cc      	b.n	800339c <_malloc_r+0x80>
 8003402:	230c      	movs	r3, #12
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4638      	mov	r0, r7
 8003408:	f000 f80e 	bl	8003428 <__malloc_unlock>
 800340c:	e797      	b.n	800333e <_malloc_r+0x22>
 800340e:	6025      	str	r5, [r4, #0]
 8003410:	e7dc      	b.n	80033cc <_malloc_r+0xb0>
 8003412:	605b      	str	r3, [r3, #4]
 8003414:	deff      	udf	#255	; 0xff
 8003416:	bf00      	nop
 8003418:	2000027c 	.word	0x2000027c

0800341c <__malloc_lock>:
 800341c:	4801      	ldr	r0, [pc, #4]	; (8003424 <__malloc_lock+0x8>)
 800341e:	f7ff bf0e 	b.w	800323e <__retarget_lock_acquire_recursive>
 8003422:	bf00      	nop
 8003424:	20000278 	.word	0x20000278

08003428 <__malloc_unlock>:
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <__malloc_unlock+0x8>)
 800342a:	f7ff bf09 	b.w	8003240 <__retarget_lock_release_recursive>
 800342e:	bf00      	nop
 8003430:	20000278 	.word	0x20000278

08003434 <__sfputc_r>:
 8003434:	6893      	ldr	r3, [r2, #8]
 8003436:	3b01      	subs	r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	b410      	push	{r4}
 800343c:	6093      	str	r3, [r2, #8]
 800343e:	da08      	bge.n	8003452 <__sfputc_r+0x1e>
 8003440:	6994      	ldr	r4, [r2, #24]
 8003442:	42a3      	cmp	r3, r4
 8003444:	db01      	blt.n	800344a <__sfputc_r+0x16>
 8003446:	290a      	cmp	r1, #10
 8003448:	d103      	bne.n	8003452 <__sfputc_r+0x1e>
 800344a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800344e:	f7ff bde8 	b.w	8003022 <__swbuf_r>
 8003452:	6813      	ldr	r3, [r2, #0]
 8003454:	1c58      	adds	r0, r3, #1
 8003456:	6010      	str	r0, [r2, #0]
 8003458:	7019      	strb	r1, [r3, #0]
 800345a:	4608      	mov	r0, r1
 800345c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003460:	4770      	bx	lr

08003462 <__sfputs_r>:
 8003462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003464:	4606      	mov	r6, r0
 8003466:	460f      	mov	r7, r1
 8003468:	4614      	mov	r4, r2
 800346a:	18d5      	adds	r5, r2, r3
 800346c:	42ac      	cmp	r4, r5
 800346e:	d101      	bne.n	8003474 <__sfputs_r+0x12>
 8003470:	2000      	movs	r0, #0
 8003472:	e007      	b.n	8003484 <__sfputs_r+0x22>
 8003474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003478:	463a      	mov	r2, r7
 800347a:	4630      	mov	r0, r6
 800347c:	f7ff ffda 	bl	8003434 <__sfputc_r>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d1f3      	bne.n	800346c <__sfputs_r+0xa>
 8003484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003488 <_vfiprintf_r>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	460d      	mov	r5, r1
 800348e:	b09d      	sub	sp, #116	; 0x74
 8003490:	4614      	mov	r4, r2
 8003492:	4698      	mov	r8, r3
 8003494:	4606      	mov	r6, r0
 8003496:	b118      	cbz	r0, 80034a0 <_vfiprintf_r+0x18>
 8003498:	6a03      	ldr	r3, [r0, #32]
 800349a:	b90b      	cbnz	r3, 80034a0 <_vfiprintf_r+0x18>
 800349c:	f7ff fcda 	bl	8002e54 <__sinit>
 80034a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034a2:	07d9      	lsls	r1, r3, #31
 80034a4:	d405      	bmi.n	80034b2 <_vfiprintf_r+0x2a>
 80034a6:	89ab      	ldrh	r3, [r5, #12]
 80034a8:	059a      	lsls	r2, r3, #22
 80034aa:	d402      	bmi.n	80034b2 <_vfiprintf_r+0x2a>
 80034ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034ae:	f7ff fec6 	bl	800323e <__retarget_lock_acquire_recursive>
 80034b2:	89ab      	ldrh	r3, [r5, #12]
 80034b4:	071b      	lsls	r3, r3, #28
 80034b6:	d501      	bpl.n	80034bc <_vfiprintf_r+0x34>
 80034b8:	692b      	ldr	r3, [r5, #16]
 80034ba:	b99b      	cbnz	r3, 80034e4 <_vfiprintf_r+0x5c>
 80034bc:	4629      	mov	r1, r5
 80034be:	4630      	mov	r0, r6
 80034c0:	f7ff fdec 	bl	800309c <__swsetup_r>
 80034c4:	b170      	cbz	r0, 80034e4 <_vfiprintf_r+0x5c>
 80034c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034c8:	07dc      	lsls	r4, r3, #31
 80034ca:	d504      	bpl.n	80034d6 <_vfiprintf_r+0x4e>
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	b01d      	add	sp, #116	; 0x74
 80034d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d6:	89ab      	ldrh	r3, [r5, #12]
 80034d8:	0598      	lsls	r0, r3, #22
 80034da:	d4f7      	bmi.n	80034cc <_vfiprintf_r+0x44>
 80034dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034de:	f7ff feaf 	bl	8003240 <__retarget_lock_release_recursive>
 80034e2:	e7f3      	b.n	80034cc <_vfiprintf_r+0x44>
 80034e4:	2300      	movs	r3, #0
 80034e6:	9309      	str	r3, [sp, #36]	; 0x24
 80034e8:	2320      	movs	r3, #32
 80034ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80034f2:	2330      	movs	r3, #48	; 0x30
 80034f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80036a8 <_vfiprintf_r+0x220>
 80034f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034fc:	f04f 0901 	mov.w	r9, #1
 8003500:	4623      	mov	r3, r4
 8003502:	469a      	mov	sl, r3
 8003504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003508:	b10a      	cbz	r2, 800350e <_vfiprintf_r+0x86>
 800350a:	2a25      	cmp	r2, #37	; 0x25
 800350c:	d1f9      	bne.n	8003502 <_vfiprintf_r+0x7a>
 800350e:	ebba 0b04 	subs.w	fp, sl, r4
 8003512:	d00b      	beq.n	800352c <_vfiprintf_r+0xa4>
 8003514:	465b      	mov	r3, fp
 8003516:	4622      	mov	r2, r4
 8003518:	4629      	mov	r1, r5
 800351a:	4630      	mov	r0, r6
 800351c:	f7ff ffa1 	bl	8003462 <__sfputs_r>
 8003520:	3001      	adds	r0, #1
 8003522:	f000 80a9 	beq.w	8003678 <_vfiprintf_r+0x1f0>
 8003526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003528:	445a      	add	r2, fp
 800352a:	9209      	str	r2, [sp, #36]	; 0x24
 800352c:	f89a 3000 	ldrb.w	r3, [sl]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80a1 	beq.w	8003678 <_vfiprintf_r+0x1f0>
 8003536:	2300      	movs	r3, #0
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003540:	f10a 0a01 	add.w	sl, sl, #1
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	9307      	str	r3, [sp, #28]
 8003548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800354c:	931a      	str	r3, [sp, #104]	; 0x68
 800354e:	4654      	mov	r4, sl
 8003550:	2205      	movs	r2, #5
 8003552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003556:	4854      	ldr	r0, [pc, #336]	; (80036a8 <_vfiprintf_r+0x220>)
 8003558:	f7fc fe5a 	bl	8000210 <memchr>
 800355c:	9a04      	ldr	r2, [sp, #16]
 800355e:	b9d8      	cbnz	r0, 8003598 <_vfiprintf_r+0x110>
 8003560:	06d1      	lsls	r1, r2, #27
 8003562:	bf44      	itt	mi
 8003564:	2320      	movmi	r3, #32
 8003566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800356a:	0713      	lsls	r3, r2, #28
 800356c:	bf44      	itt	mi
 800356e:	232b      	movmi	r3, #43	; 0x2b
 8003570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003574:	f89a 3000 	ldrb.w	r3, [sl]
 8003578:	2b2a      	cmp	r3, #42	; 0x2a
 800357a:	d015      	beq.n	80035a8 <_vfiprintf_r+0x120>
 800357c:	9a07      	ldr	r2, [sp, #28]
 800357e:	4654      	mov	r4, sl
 8003580:	2000      	movs	r0, #0
 8003582:	f04f 0c0a 	mov.w	ip, #10
 8003586:	4621      	mov	r1, r4
 8003588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800358c:	3b30      	subs	r3, #48	; 0x30
 800358e:	2b09      	cmp	r3, #9
 8003590:	d94d      	bls.n	800362e <_vfiprintf_r+0x1a6>
 8003592:	b1b0      	cbz	r0, 80035c2 <_vfiprintf_r+0x13a>
 8003594:	9207      	str	r2, [sp, #28]
 8003596:	e014      	b.n	80035c2 <_vfiprintf_r+0x13a>
 8003598:	eba0 0308 	sub.w	r3, r0, r8
 800359c:	fa09 f303 	lsl.w	r3, r9, r3
 80035a0:	4313      	orrs	r3, r2
 80035a2:	9304      	str	r3, [sp, #16]
 80035a4:	46a2      	mov	sl, r4
 80035a6:	e7d2      	b.n	800354e <_vfiprintf_r+0xc6>
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	1d19      	adds	r1, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	9103      	str	r1, [sp, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bfbb      	ittet	lt
 80035b4:	425b      	neglt	r3, r3
 80035b6:	f042 0202 	orrlt.w	r2, r2, #2
 80035ba:	9307      	strge	r3, [sp, #28]
 80035bc:	9307      	strlt	r3, [sp, #28]
 80035be:	bfb8      	it	lt
 80035c0:	9204      	strlt	r2, [sp, #16]
 80035c2:	7823      	ldrb	r3, [r4, #0]
 80035c4:	2b2e      	cmp	r3, #46	; 0x2e
 80035c6:	d10c      	bne.n	80035e2 <_vfiprintf_r+0x15a>
 80035c8:	7863      	ldrb	r3, [r4, #1]
 80035ca:	2b2a      	cmp	r3, #42	; 0x2a
 80035cc:	d134      	bne.n	8003638 <_vfiprintf_r+0x1b0>
 80035ce:	9b03      	ldr	r3, [sp, #12]
 80035d0:	1d1a      	adds	r2, r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	9203      	str	r2, [sp, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bfb8      	it	lt
 80035da:	f04f 33ff 	movlt.w	r3, #4294967295
 80035de:	3402      	adds	r4, #2
 80035e0:	9305      	str	r3, [sp, #20]
 80035e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80036b8 <_vfiprintf_r+0x230>
 80035e6:	7821      	ldrb	r1, [r4, #0]
 80035e8:	2203      	movs	r2, #3
 80035ea:	4650      	mov	r0, sl
 80035ec:	f7fc fe10 	bl	8000210 <memchr>
 80035f0:	b138      	cbz	r0, 8003602 <_vfiprintf_r+0x17a>
 80035f2:	9b04      	ldr	r3, [sp, #16]
 80035f4:	eba0 000a 	sub.w	r0, r0, sl
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	4082      	lsls	r2, r0
 80035fc:	4313      	orrs	r3, r2
 80035fe:	3401      	adds	r4, #1
 8003600:	9304      	str	r3, [sp, #16]
 8003602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003606:	4829      	ldr	r0, [pc, #164]	; (80036ac <_vfiprintf_r+0x224>)
 8003608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800360c:	2206      	movs	r2, #6
 800360e:	f7fc fdff 	bl	8000210 <memchr>
 8003612:	2800      	cmp	r0, #0
 8003614:	d03f      	beq.n	8003696 <_vfiprintf_r+0x20e>
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <_vfiprintf_r+0x228>)
 8003618:	bb1b      	cbnz	r3, 8003662 <_vfiprintf_r+0x1da>
 800361a:	9b03      	ldr	r3, [sp, #12]
 800361c:	3307      	adds	r3, #7
 800361e:	f023 0307 	bic.w	r3, r3, #7
 8003622:	3308      	adds	r3, #8
 8003624:	9303      	str	r3, [sp, #12]
 8003626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003628:	443b      	add	r3, r7
 800362a:	9309      	str	r3, [sp, #36]	; 0x24
 800362c:	e768      	b.n	8003500 <_vfiprintf_r+0x78>
 800362e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003632:	460c      	mov	r4, r1
 8003634:	2001      	movs	r0, #1
 8003636:	e7a6      	b.n	8003586 <_vfiprintf_r+0xfe>
 8003638:	2300      	movs	r3, #0
 800363a:	3401      	adds	r4, #1
 800363c:	9305      	str	r3, [sp, #20]
 800363e:	4619      	mov	r1, r3
 8003640:	f04f 0c0a 	mov.w	ip, #10
 8003644:	4620      	mov	r0, r4
 8003646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800364a:	3a30      	subs	r2, #48	; 0x30
 800364c:	2a09      	cmp	r2, #9
 800364e:	d903      	bls.n	8003658 <_vfiprintf_r+0x1d0>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0c6      	beq.n	80035e2 <_vfiprintf_r+0x15a>
 8003654:	9105      	str	r1, [sp, #20]
 8003656:	e7c4      	b.n	80035e2 <_vfiprintf_r+0x15a>
 8003658:	fb0c 2101 	mla	r1, ip, r1, r2
 800365c:	4604      	mov	r4, r0
 800365e:	2301      	movs	r3, #1
 8003660:	e7f0      	b.n	8003644 <_vfiprintf_r+0x1bc>
 8003662:	ab03      	add	r3, sp, #12
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	462a      	mov	r2, r5
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <_vfiprintf_r+0x22c>)
 800366a:	a904      	add	r1, sp, #16
 800366c:	4630      	mov	r0, r6
 800366e:	f3af 8000 	nop.w
 8003672:	4607      	mov	r7, r0
 8003674:	1c78      	adds	r0, r7, #1
 8003676:	d1d6      	bne.n	8003626 <_vfiprintf_r+0x19e>
 8003678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800367a:	07d9      	lsls	r1, r3, #31
 800367c:	d405      	bmi.n	800368a <_vfiprintf_r+0x202>
 800367e:	89ab      	ldrh	r3, [r5, #12]
 8003680:	059a      	lsls	r2, r3, #22
 8003682:	d402      	bmi.n	800368a <_vfiprintf_r+0x202>
 8003684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003686:	f7ff fddb 	bl	8003240 <__retarget_lock_release_recursive>
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	065b      	lsls	r3, r3, #25
 800368e:	f53f af1d 	bmi.w	80034cc <_vfiprintf_r+0x44>
 8003692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003694:	e71c      	b.n	80034d0 <_vfiprintf_r+0x48>
 8003696:	ab03      	add	r3, sp, #12
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	462a      	mov	r2, r5
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <_vfiprintf_r+0x22c>)
 800369e:	a904      	add	r1, sp, #16
 80036a0:	4630      	mov	r0, r6
 80036a2:	f000 f879 	bl	8003798 <_printf_i>
 80036a6:	e7e4      	b.n	8003672 <_vfiprintf_r+0x1ea>
 80036a8:	08003d64 	.word	0x08003d64
 80036ac:	08003d6e 	.word	0x08003d6e
 80036b0:	00000000 	.word	0x00000000
 80036b4:	08003463 	.word	0x08003463
 80036b8:	08003d6a 	.word	0x08003d6a

080036bc <_printf_common>:
 80036bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c0:	4616      	mov	r6, r2
 80036c2:	4699      	mov	r9, r3
 80036c4:	688a      	ldr	r2, [r1, #8]
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bfb8      	it	lt
 80036d0:	4613      	movlt	r3, r2
 80036d2:	6033      	str	r3, [r6, #0]
 80036d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036d8:	4607      	mov	r7, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	b10a      	cbz	r2, 80036e2 <_printf_common+0x26>
 80036de:	3301      	adds	r3, #1
 80036e0:	6033      	str	r3, [r6, #0]
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	0699      	lsls	r1, r3, #26
 80036e6:	bf42      	ittt	mi
 80036e8:	6833      	ldrmi	r3, [r6, #0]
 80036ea:	3302      	addmi	r3, #2
 80036ec:	6033      	strmi	r3, [r6, #0]
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	f015 0506 	ands.w	r5, r5, #6
 80036f4:	d106      	bne.n	8003704 <_printf_common+0x48>
 80036f6:	f104 0a19 	add.w	sl, r4, #25
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	6832      	ldr	r2, [r6, #0]
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	42ab      	cmp	r3, r5
 8003702:	dc26      	bgt.n	8003752 <_printf_common+0x96>
 8003704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003708:	1e13      	subs	r3, r2, #0
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	bf18      	it	ne
 800370e:	2301      	movne	r3, #1
 8003710:	0692      	lsls	r2, r2, #26
 8003712:	d42b      	bmi.n	800376c <_printf_common+0xb0>
 8003714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003718:	4649      	mov	r1, r9
 800371a:	4638      	mov	r0, r7
 800371c:	47c0      	blx	r8
 800371e:	3001      	adds	r0, #1
 8003720:	d01e      	beq.n	8003760 <_printf_common+0xa4>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	6922      	ldr	r2, [r4, #16]
 8003726:	f003 0306 	and.w	r3, r3, #6
 800372a:	2b04      	cmp	r3, #4
 800372c:	bf02      	ittt	eq
 800372e:	68e5      	ldreq	r5, [r4, #12]
 8003730:	6833      	ldreq	r3, [r6, #0]
 8003732:	1aed      	subeq	r5, r5, r3
 8003734:	68a3      	ldr	r3, [r4, #8]
 8003736:	bf0c      	ite	eq
 8003738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800373c:	2500      	movne	r5, #0
 800373e:	4293      	cmp	r3, r2
 8003740:	bfc4      	itt	gt
 8003742:	1a9b      	subgt	r3, r3, r2
 8003744:	18ed      	addgt	r5, r5, r3
 8003746:	2600      	movs	r6, #0
 8003748:	341a      	adds	r4, #26
 800374a:	42b5      	cmp	r5, r6
 800374c:	d11a      	bne.n	8003784 <_printf_common+0xc8>
 800374e:	2000      	movs	r0, #0
 8003750:	e008      	b.n	8003764 <_printf_common+0xa8>
 8003752:	2301      	movs	r3, #1
 8003754:	4652      	mov	r2, sl
 8003756:	4649      	mov	r1, r9
 8003758:	4638      	mov	r0, r7
 800375a:	47c0      	blx	r8
 800375c:	3001      	adds	r0, #1
 800375e:	d103      	bne.n	8003768 <_printf_common+0xac>
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003768:	3501      	adds	r5, #1
 800376a:	e7c6      	b.n	80036fa <_printf_common+0x3e>
 800376c:	18e1      	adds	r1, r4, r3
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	2030      	movs	r0, #48	; 0x30
 8003772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003776:	4422      	add	r2, r4
 8003778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800377c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003780:	3302      	adds	r3, #2
 8003782:	e7c7      	b.n	8003714 <_printf_common+0x58>
 8003784:	2301      	movs	r3, #1
 8003786:	4622      	mov	r2, r4
 8003788:	4649      	mov	r1, r9
 800378a:	4638      	mov	r0, r7
 800378c:	47c0      	blx	r8
 800378e:	3001      	adds	r0, #1
 8003790:	d0e6      	beq.n	8003760 <_printf_common+0xa4>
 8003792:	3601      	adds	r6, #1
 8003794:	e7d9      	b.n	800374a <_printf_common+0x8e>
	...

08003798 <_printf_i>:
 8003798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800379c:	7e0f      	ldrb	r7, [r1, #24]
 800379e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037a0:	2f78      	cmp	r7, #120	; 0x78
 80037a2:	4691      	mov	r9, r2
 80037a4:	4680      	mov	r8, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	469a      	mov	sl, r3
 80037aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037ae:	d807      	bhi.n	80037c0 <_printf_i+0x28>
 80037b0:	2f62      	cmp	r7, #98	; 0x62
 80037b2:	d80a      	bhi.n	80037ca <_printf_i+0x32>
 80037b4:	2f00      	cmp	r7, #0
 80037b6:	f000 80d4 	beq.w	8003962 <_printf_i+0x1ca>
 80037ba:	2f58      	cmp	r7, #88	; 0x58
 80037bc:	f000 80c0 	beq.w	8003940 <_printf_i+0x1a8>
 80037c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037c8:	e03a      	b.n	8003840 <_printf_i+0xa8>
 80037ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037ce:	2b15      	cmp	r3, #21
 80037d0:	d8f6      	bhi.n	80037c0 <_printf_i+0x28>
 80037d2:	a101      	add	r1, pc, #4	; (adr r1, 80037d8 <_printf_i+0x40>)
 80037d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d8:	08003831 	.word	0x08003831
 80037dc:	08003845 	.word	0x08003845
 80037e0:	080037c1 	.word	0x080037c1
 80037e4:	080037c1 	.word	0x080037c1
 80037e8:	080037c1 	.word	0x080037c1
 80037ec:	080037c1 	.word	0x080037c1
 80037f0:	08003845 	.word	0x08003845
 80037f4:	080037c1 	.word	0x080037c1
 80037f8:	080037c1 	.word	0x080037c1
 80037fc:	080037c1 	.word	0x080037c1
 8003800:	080037c1 	.word	0x080037c1
 8003804:	08003949 	.word	0x08003949
 8003808:	08003871 	.word	0x08003871
 800380c:	08003903 	.word	0x08003903
 8003810:	080037c1 	.word	0x080037c1
 8003814:	080037c1 	.word	0x080037c1
 8003818:	0800396b 	.word	0x0800396b
 800381c:	080037c1 	.word	0x080037c1
 8003820:	08003871 	.word	0x08003871
 8003824:	080037c1 	.word	0x080037c1
 8003828:	080037c1 	.word	0x080037c1
 800382c:	0800390b 	.word	0x0800390b
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	1d1a      	adds	r2, r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	602a      	str	r2, [r5, #0]
 8003838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800383c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003840:	2301      	movs	r3, #1
 8003842:	e09f      	b.n	8003984 <_printf_i+0x1ec>
 8003844:	6820      	ldr	r0, [r4, #0]
 8003846:	682b      	ldr	r3, [r5, #0]
 8003848:	0607      	lsls	r7, r0, #24
 800384a:	f103 0104 	add.w	r1, r3, #4
 800384e:	6029      	str	r1, [r5, #0]
 8003850:	d501      	bpl.n	8003856 <_printf_i+0xbe>
 8003852:	681e      	ldr	r6, [r3, #0]
 8003854:	e003      	b.n	800385e <_printf_i+0xc6>
 8003856:	0646      	lsls	r6, r0, #25
 8003858:	d5fb      	bpl.n	8003852 <_printf_i+0xba>
 800385a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800385e:	2e00      	cmp	r6, #0
 8003860:	da03      	bge.n	800386a <_printf_i+0xd2>
 8003862:	232d      	movs	r3, #45	; 0x2d
 8003864:	4276      	negs	r6, r6
 8003866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386a:	485a      	ldr	r0, [pc, #360]	; (80039d4 <_printf_i+0x23c>)
 800386c:	230a      	movs	r3, #10
 800386e:	e012      	b.n	8003896 <_printf_i+0xfe>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	1d19      	adds	r1, r3, #4
 8003876:	6029      	str	r1, [r5, #0]
 8003878:	0605      	lsls	r5, r0, #24
 800387a:	d501      	bpl.n	8003880 <_printf_i+0xe8>
 800387c:	681e      	ldr	r6, [r3, #0]
 800387e:	e002      	b.n	8003886 <_printf_i+0xee>
 8003880:	0641      	lsls	r1, r0, #25
 8003882:	d5fb      	bpl.n	800387c <_printf_i+0xe4>
 8003884:	881e      	ldrh	r6, [r3, #0]
 8003886:	4853      	ldr	r0, [pc, #332]	; (80039d4 <_printf_i+0x23c>)
 8003888:	2f6f      	cmp	r7, #111	; 0x6f
 800388a:	bf0c      	ite	eq
 800388c:	2308      	moveq	r3, #8
 800388e:	230a      	movne	r3, #10
 8003890:	2100      	movs	r1, #0
 8003892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003896:	6865      	ldr	r5, [r4, #4]
 8003898:	60a5      	str	r5, [r4, #8]
 800389a:	2d00      	cmp	r5, #0
 800389c:	bfa2      	ittt	ge
 800389e:	6821      	ldrge	r1, [r4, #0]
 80038a0:	f021 0104 	bicge.w	r1, r1, #4
 80038a4:	6021      	strge	r1, [r4, #0]
 80038a6:	b90e      	cbnz	r6, 80038ac <_printf_i+0x114>
 80038a8:	2d00      	cmp	r5, #0
 80038aa:	d04b      	beq.n	8003944 <_printf_i+0x1ac>
 80038ac:	4615      	mov	r5, r2
 80038ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80038b2:	fb03 6711 	mls	r7, r3, r1, r6
 80038b6:	5dc7      	ldrb	r7, [r0, r7]
 80038b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038bc:	4637      	mov	r7, r6
 80038be:	42bb      	cmp	r3, r7
 80038c0:	460e      	mov	r6, r1
 80038c2:	d9f4      	bls.n	80038ae <_printf_i+0x116>
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d10b      	bne.n	80038e0 <_printf_i+0x148>
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	07de      	lsls	r6, r3, #31
 80038cc:	d508      	bpl.n	80038e0 <_printf_i+0x148>
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	6861      	ldr	r1, [r4, #4]
 80038d2:	4299      	cmp	r1, r3
 80038d4:	bfde      	ittt	le
 80038d6:	2330      	movle	r3, #48	; 0x30
 80038d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038e0:	1b52      	subs	r2, r2, r5
 80038e2:	6122      	str	r2, [r4, #16]
 80038e4:	f8cd a000 	str.w	sl, [sp]
 80038e8:	464b      	mov	r3, r9
 80038ea:	aa03      	add	r2, sp, #12
 80038ec:	4621      	mov	r1, r4
 80038ee:	4640      	mov	r0, r8
 80038f0:	f7ff fee4 	bl	80036bc <_printf_common>
 80038f4:	3001      	adds	r0, #1
 80038f6:	d14a      	bne.n	800398e <_printf_i+0x1f6>
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	b004      	add	sp, #16
 80038fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	f043 0320 	orr.w	r3, r3, #32
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	4833      	ldr	r0, [pc, #204]	; (80039d8 <_printf_i+0x240>)
 800390c:	2778      	movs	r7, #120	; 0x78
 800390e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	6829      	ldr	r1, [r5, #0]
 8003916:	061f      	lsls	r7, r3, #24
 8003918:	f851 6b04 	ldr.w	r6, [r1], #4
 800391c:	d402      	bmi.n	8003924 <_printf_i+0x18c>
 800391e:	065f      	lsls	r7, r3, #25
 8003920:	bf48      	it	mi
 8003922:	b2b6      	uxthmi	r6, r6
 8003924:	07df      	lsls	r7, r3, #31
 8003926:	bf48      	it	mi
 8003928:	f043 0320 	orrmi.w	r3, r3, #32
 800392c:	6029      	str	r1, [r5, #0]
 800392e:	bf48      	it	mi
 8003930:	6023      	strmi	r3, [r4, #0]
 8003932:	b91e      	cbnz	r6, 800393c <_printf_i+0x1a4>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f023 0320 	bic.w	r3, r3, #32
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	2310      	movs	r3, #16
 800393e:	e7a7      	b.n	8003890 <_printf_i+0xf8>
 8003940:	4824      	ldr	r0, [pc, #144]	; (80039d4 <_printf_i+0x23c>)
 8003942:	e7e4      	b.n	800390e <_printf_i+0x176>
 8003944:	4615      	mov	r5, r2
 8003946:	e7bd      	b.n	80038c4 <_printf_i+0x12c>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	6826      	ldr	r6, [r4, #0]
 800394c:	6961      	ldr	r1, [r4, #20]
 800394e:	1d18      	adds	r0, r3, #4
 8003950:	6028      	str	r0, [r5, #0]
 8003952:	0635      	lsls	r5, r6, #24
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	d501      	bpl.n	800395c <_printf_i+0x1c4>
 8003958:	6019      	str	r1, [r3, #0]
 800395a:	e002      	b.n	8003962 <_printf_i+0x1ca>
 800395c:	0670      	lsls	r0, r6, #25
 800395e:	d5fb      	bpl.n	8003958 <_printf_i+0x1c0>
 8003960:	8019      	strh	r1, [r3, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	4615      	mov	r5, r2
 8003968:	e7bc      	b.n	80038e4 <_printf_i+0x14c>
 800396a:	682b      	ldr	r3, [r5, #0]
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	602a      	str	r2, [r5, #0]
 8003970:	681d      	ldr	r5, [r3, #0]
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	2100      	movs	r1, #0
 8003976:	4628      	mov	r0, r5
 8003978:	f7fc fc4a 	bl	8000210 <memchr>
 800397c:	b108      	cbz	r0, 8003982 <_printf_i+0x1ea>
 800397e:	1b40      	subs	r0, r0, r5
 8003980:	6060      	str	r0, [r4, #4]
 8003982:	6863      	ldr	r3, [r4, #4]
 8003984:	6123      	str	r3, [r4, #16]
 8003986:	2300      	movs	r3, #0
 8003988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800398c:	e7aa      	b.n	80038e4 <_printf_i+0x14c>
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	462a      	mov	r2, r5
 8003992:	4649      	mov	r1, r9
 8003994:	4640      	mov	r0, r8
 8003996:	47d0      	blx	sl
 8003998:	3001      	adds	r0, #1
 800399a:	d0ad      	beq.n	80038f8 <_printf_i+0x160>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	079b      	lsls	r3, r3, #30
 80039a0:	d413      	bmi.n	80039ca <_printf_i+0x232>
 80039a2:	68e0      	ldr	r0, [r4, #12]
 80039a4:	9b03      	ldr	r3, [sp, #12]
 80039a6:	4298      	cmp	r0, r3
 80039a8:	bfb8      	it	lt
 80039aa:	4618      	movlt	r0, r3
 80039ac:	e7a6      	b.n	80038fc <_printf_i+0x164>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4632      	mov	r2, r6
 80039b2:	4649      	mov	r1, r9
 80039b4:	4640      	mov	r0, r8
 80039b6:	47d0      	blx	sl
 80039b8:	3001      	adds	r0, #1
 80039ba:	d09d      	beq.n	80038f8 <_printf_i+0x160>
 80039bc:	3501      	adds	r5, #1
 80039be:	68e3      	ldr	r3, [r4, #12]
 80039c0:	9903      	ldr	r1, [sp, #12]
 80039c2:	1a5b      	subs	r3, r3, r1
 80039c4:	42ab      	cmp	r3, r5
 80039c6:	dcf2      	bgt.n	80039ae <_printf_i+0x216>
 80039c8:	e7eb      	b.n	80039a2 <_printf_i+0x20a>
 80039ca:	2500      	movs	r5, #0
 80039cc:	f104 0619 	add.w	r6, r4, #25
 80039d0:	e7f5      	b.n	80039be <_printf_i+0x226>
 80039d2:	bf00      	nop
 80039d4:	08003d75 	.word	0x08003d75
 80039d8:	08003d86 	.word	0x08003d86

080039dc <__sflush_r>:
 80039dc:	898a      	ldrh	r2, [r1, #12]
 80039de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	4605      	mov	r5, r0
 80039e4:	0710      	lsls	r0, r2, #28
 80039e6:	460c      	mov	r4, r1
 80039e8:	d458      	bmi.n	8003a9c <__sflush_r+0xc0>
 80039ea:	684b      	ldr	r3, [r1, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dc05      	bgt.n	80039fc <__sflush_r+0x20>
 80039f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	dc02      	bgt.n	80039fc <__sflush_r+0x20>
 80039f6:	2000      	movs	r0, #0
 80039f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039fe:	2e00      	cmp	r6, #0
 8003a00:	d0f9      	beq.n	80039f6 <__sflush_r+0x1a>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a08:	682f      	ldr	r7, [r5, #0]
 8003a0a:	6a21      	ldr	r1, [r4, #32]
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	d032      	beq.n	8003a76 <__sflush_r+0x9a>
 8003a10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	075a      	lsls	r2, r3, #29
 8003a16:	d505      	bpl.n	8003a24 <__sflush_r+0x48>
 8003a18:	6863      	ldr	r3, [r4, #4]
 8003a1a:	1ac0      	subs	r0, r0, r3
 8003a1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a1e:	b10b      	cbz	r3, 8003a24 <__sflush_r+0x48>
 8003a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a22:	1ac0      	subs	r0, r0, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	4602      	mov	r2, r0
 8003a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a2a:	6a21      	ldr	r1, [r4, #32]
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	47b0      	blx	r6
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	d106      	bne.n	8003a44 <__sflush_r+0x68>
 8003a36:	6829      	ldr	r1, [r5, #0]
 8003a38:	291d      	cmp	r1, #29
 8003a3a:	d82b      	bhi.n	8003a94 <__sflush_r+0xb8>
 8003a3c:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <__sflush_r+0x108>)
 8003a3e:	410a      	asrs	r2, r1
 8003a40:	07d6      	lsls	r6, r2, #31
 8003a42:	d427      	bmi.n	8003a94 <__sflush_r+0xb8>
 8003a44:	2200      	movs	r2, #0
 8003a46:	6062      	str	r2, [r4, #4]
 8003a48:	04d9      	lsls	r1, r3, #19
 8003a4a:	6922      	ldr	r2, [r4, #16]
 8003a4c:	6022      	str	r2, [r4, #0]
 8003a4e:	d504      	bpl.n	8003a5a <__sflush_r+0x7e>
 8003a50:	1c42      	adds	r2, r0, #1
 8003a52:	d101      	bne.n	8003a58 <__sflush_r+0x7c>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b903      	cbnz	r3, 8003a5a <__sflush_r+0x7e>
 8003a58:	6560      	str	r0, [r4, #84]	; 0x54
 8003a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a5c:	602f      	str	r7, [r5, #0]
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	d0c9      	beq.n	80039f6 <__sflush_r+0x1a>
 8003a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a66:	4299      	cmp	r1, r3
 8003a68:	d002      	beq.n	8003a70 <__sflush_r+0x94>
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7ff fbea 	bl	8003244 <_free_r>
 8003a70:	2000      	movs	r0, #0
 8003a72:	6360      	str	r0, [r4, #52]	; 0x34
 8003a74:	e7c0      	b.n	80039f8 <__sflush_r+0x1c>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4628      	mov	r0, r5
 8003a7a:	47b0      	blx	r6
 8003a7c:	1c41      	adds	r1, r0, #1
 8003a7e:	d1c8      	bne.n	8003a12 <__sflush_r+0x36>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0c5      	beq.n	8003a12 <__sflush_r+0x36>
 8003a86:	2b1d      	cmp	r3, #29
 8003a88:	d001      	beq.n	8003a8e <__sflush_r+0xb2>
 8003a8a:	2b16      	cmp	r3, #22
 8003a8c:	d101      	bne.n	8003a92 <__sflush_r+0xb6>
 8003a8e:	602f      	str	r7, [r5, #0]
 8003a90:	e7b1      	b.n	80039f6 <__sflush_r+0x1a>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a98:	81a3      	strh	r3, [r4, #12]
 8003a9a:	e7ad      	b.n	80039f8 <__sflush_r+0x1c>
 8003a9c:	690f      	ldr	r7, [r1, #16]
 8003a9e:	2f00      	cmp	r7, #0
 8003aa0:	d0a9      	beq.n	80039f6 <__sflush_r+0x1a>
 8003aa2:	0793      	lsls	r3, r2, #30
 8003aa4:	680e      	ldr	r6, [r1, #0]
 8003aa6:	bf08      	it	eq
 8003aa8:	694b      	ldreq	r3, [r1, #20]
 8003aaa:	600f      	str	r7, [r1, #0]
 8003aac:	bf18      	it	ne
 8003aae:	2300      	movne	r3, #0
 8003ab0:	eba6 0807 	sub.w	r8, r6, r7
 8003ab4:	608b      	str	r3, [r1, #8]
 8003ab6:	f1b8 0f00 	cmp.w	r8, #0
 8003aba:	dd9c      	ble.n	80039f6 <__sflush_r+0x1a>
 8003abc:	6a21      	ldr	r1, [r4, #32]
 8003abe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ac0:	4643      	mov	r3, r8
 8003ac2:	463a      	mov	r2, r7
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b0      	blx	r6
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	dc06      	bgt.n	8003ada <__sflush_r+0xfe>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	e78e      	b.n	80039f8 <__sflush_r+0x1c>
 8003ada:	4407      	add	r7, r0
 8003adc:	eba8 0800 	sub.w	r8, r8, r0
 8003ae0:	e7e9      	b.n	8003ab6 <__sflush_r+0xda>
 8003ae2:	bf00      	nop
 8003ae4:	dfbffffe 	.word	0xdfbffffe

08003ae8 <_fflush_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	4605      	mov	r5, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	b913      	cbnz	r3, 8003af8 <_fflush_r+0x10>
 8003af2:	2500      	movs	r5, #0
 8003af4:	4628      	mov	r0, r5
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	b118      	cbz	r0, 8003b02 <_fflush_r+0x1a>
 8003afa:	6a03      	ldr	r3, [r0, #32]
 8003afc:	b90b      	cbnz	r3, 8003b02 <_fflush_r+0x1a>
 8003afe:	f7ff f9a9 	bl	8002e54 <__sinit>
 8003b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f3      	beq.n	8003af2 <_fflush_r+0xa>
 8003b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b0c:	07d0      	lsls	r0, r2, #31
 8003b0e:	d404      	bmi.n	8003b1a <_fflush_r+0x32>
 8003b10:	0599      	lsls	r1, r3, #22
 8003b12:	d402      	bmi.n	8003b1a <_fflush_r+0x32>
 8003b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b16:	f7ff fb92 	bl	800323e <__retarget_lock_acquire_recursive>
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	f7ff ff5d 	bl	80039dc <__sflush_r>
 8003b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b24:	07da      	lsls	r2, r3, #31
 8003b26:	4605      	mov	r5, r0
 8003b28:	d4e4      	bmi.n	8003af4 <_fflush_r+0xc>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	059b      	lsls	r3, r3, #22
 8003b2e:	d4e1      	bmi.n	8003af4 <_fflush_r+0xc>
 8003b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b32:	f7ff fb85 	bl	8003240 <__retarget_lock_release_recursive>
 8003b36:	e7dd      	b.n	8003af4 <_fflush_r+0xc>

08003b38 <__swhatbuf_r>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	460c      	mov	r4, r1
 8003b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b40:	2900      	cmp	r1, #0
 8003b42:	b096      	sub	sp, #88	; 0x58
 8003b44:	4615      	mov	r5, r2
 8003b46:	461e      	mov	r6, r3
 8003b48:	da0d      	bge.n	8003b66 <__swhatbuf_r+0x2e>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b50:	f04f 0100 	mov.w	r1, #0
 8003b54:	bf0c      	ite	eq
 8003b56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b5a:	2340      	movne	r3, #64	; 0x40
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	6031      	str	r1, [r6, #0]
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	b016      	add	sp, #88	; 0x58
 8003b64:	bd70      	pop	{r4, r5, r6, pc}
 8003b66:	466a      	mov	r2, sp
 8003b68:	f000 f848 	bl	8003bfc <_fstat_r>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	dbec      	blt.n	8003b4a <__swhatbuf_r+0x12>
 8003b70:	9901      	ldr	r1, [sp, #4]
 8003b72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b7a:	4259      	negs	r1, r3
 8003b7c:	4159      	adcs	r1, r3
 8003b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b82:	e7eb      	b.n	8003b5c <__swhatbuf_r+0x24>

08003b84 <__smakebuf_r>:
 8003b84:	898b      	ldrh	r3, [r1, #12]
 8003b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b88:	079d      	lsls	r5, r3, #30
 8003b8a:	4606      	mov	r6, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	d507      	bpl.n	8003ba0 <__smakebuf_r+0x1c>
 8003b90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	6123      	str	r3, [r4, #16]
 8003b98:	2301      	movs	r3, #1
 8003b9a:	6163      	str	r3, [r4, #20]
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	ab01      	add	r3, sp, #4
 8003ba2:	466a      	mov	r2, sp
 8003ba4:	f7ff ffc8 	bl	8003b38 <__swhatbuf_r>
 8003ba8:	9900      	ldr	r1, [sp, #0]
 8003baa:	4605      	mov	r5, r0
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7ff fbb5 	bl	800331c <_malloc_r>
 8003bb2:	b948      	cbnz	r0, 8003bc8 <__smakebuf_r+0x44>
 8003bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb8:	059a      	lsls	r2, r3, #22
 8003bba:	d4ef      	bmi.n	8003b9c <__smakebuf_r+0x18>
 8003bbc:	f023 0303 	bic.w	r3, r3, #3
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	e7e3      	b.n	8003b90 <__smakebuf_r+0xc>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	6020      	str	r0, [r4, #0]
 8003bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd0:	81a3      	strh	r3, [r4, #12]
 8003bd2:	9b00      	ldr	r3, [sp, #0]
 8003bd4:	6163      	str	r3, [r4, #20]
 8003bd6:	9b01      	ldr	r3, [sp, #4]
 8003bd8:	6120      	str	r0, [r4, #16]
 8003bda:	b15b      	cbz	r3, 8003bf4 <__smakebuf_r+0x70>
 8003bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003be0:	4630      	mov	r0, r6
 8003be2:	f000 f81d 	bl	8003c20 <_isatty_r>
 8003be6:	b128      	cbz	r0, 8003bf4 <__smakebuf_r+0x70>
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	431d      	orrs	r5, r3
 8003bf8:	81a5      	strh	r5, [r4, #12]
 8003bfa:	e7cf      	b.n	8003b9c <__smakebuf_r+0x18>

08003bfc <_fstat_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4d07      	ldr	r5, [pc, #28]	; (8003c1c <_fstat_r+0x20>)
 8003c00:	2300      	movs	r3, #0
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	f7fd fb7c 	bl	8001306 <_fstat>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d102      	bne.n	8003c18 <_fstat_r+0x1c>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	b103      	cbz	r3, 8003c18 <_fstat_r+0x1c>
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	bd38      	pop	{r3, r4, r5, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000274 	.word	0x20000274

08003c20 <_isatty_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d06      	ldr	r5, [pc, #24]	; (8003c3c <_isatty_r+0x1c>)
 8003c24:	2300      	movs	r3, #0
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f7fd fb7b 	bl	8001326 <_isatty>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_isatty_r+0x1a>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_isatty_r+0x1a>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	20000274 	.word	0x20000274

08003c40 <_sbrk_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4d06      	ldr	r5, [pc, #24]	; (8003c5c <_sbrk_r+0x1c>)
 8003c44:	2300      	movs	r3, #0
 8003c46:	4604      	mov	r4, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	602b      	str	r3, [r5, #0]
 8003c4c:	f7fd fb84 	bl	8001358 <_sbrk>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <_sbrk_r+0x1a>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	b103      	cbz	r3, 8003c5a <_sbrk_r+0x1a>
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	20000274 	.word	0x20000274

08003c60 <_init>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr

08003c6c <_fini>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr
